{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1585406140000},{"_id":"source/.DS_Store","hash":"72628a42d13eeb8beb93dc38d47432fa6cc862aa","modified":1599902715000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1585406140000},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1585406140000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1585406140000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1585406140000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1585406140000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1585406140000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1585406140000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1585406140000},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1585406140000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1585406140000},{"_id":"themes/next/_config.yml","hash":"ff0566251496c2191719027c43a124179a8514e6","modified":1585406140000},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1585406140000},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1585406140000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1585406140000},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1585406140000},{"_id":"source/_drafts/draft-file.md","hash":"af1aca1581def8249e90b995ad0503d20ffd3edc","modified":1585406140000},{"_id":"source/about/index.md","hash":"2b958cce6b377e26f44a2a0f71e2f33157b789ec","modified":1585406140000},{"_id":"source/_posts/.DS_Store","hash":"d3bd684e2e08be2bb4ccc367b3d7ff0b50d8c69e","modified":1602297314000},{"_id":"source/_posts/2018-12-30-python代码加密部署.md","hash":"b8698d5ff32a5ed120edeb3e48afd0798acc9253","modified":1585406140000},{"_id":"source/_posts/2018-11-04-win10docker使用填坑.md","hash":"ff5ef779480eb8b721d9fbddbeaaac2b9c10946b","modified":1585406140000},{"_id":"source/_posts/2018-11-25-flask服务端推送.md","hash":"79b6520a36b7a599ccd2c7600563b84d6439aee6","modified":1585406140000},{"_id":"source/_posts/2019-03-10-webserver异常-TooManyOpenFiles.md","hash":"89e7beaf4477c54ff78fb97a99f864c86bd3f4f1","modified":1585406140000},{"_id":"source/_posts/2019-01-22-sqlalchemy数据库连接数异常.md","hash":"60cad9211f18c1b3fc26670d86760b7fd9092e46","modified":1585406140000},{"_id":"source/_posts/2019-07-14-flask-caching源码浅析.md","hash":"4b16fe5510f7c3c0e5e29423f3c3a8141745e0d3","modified":1585406140000},{"_id":"source/_posts/2019-03-25-flask分布式部署及flask-session.md","hash":"5f02e8a8c39d047610feff6243f077b19cb8aa38","modified":1585406140000},{"_id":"source/_posts/2019-04-27-pycharm远程调试.md","hash":"400986cf18531a842e4267f75873a221c71951b4","modified":1585406140000},{"_id":"source/_posts/2019-06-09-python程序员开发规范.md","hash":"04875f8423883b7745a58d9a1103ce97b1eed3ca","modified":1585406140000},{"_id":"source/_posts/2019-12-27-兼职运维之ulimit-u.md","hash":"601ac3dad2af65d67d8cd0f7a80ad0b654b320fd","modified":1585406140000},{"_id":"source/_posts/2019-06-16-数据结构与算法总结.md","hash":"5902c9f5047f8a407d757d068f15b28477bf1c09","modified":1585406140000},{"_id":"source/_posts/2019-12-22-hexo容器化部署.md","hash":"d3c55f6170fe04589b8d5fd0725717f9a5a09f13","modified":1585406140000},{"_id":"source/_posts/2020-03-27-关于pyspark-dataframe与pandas-dataframe的那些事.md","hash":"845df401fe015d3147241ae4b1f69b00396e223f","modified":1585406140000},{"_id":"source/_posts/2020-01-13-shell编码整理.md","hash":"74077c87d74b84af1d673279790f513ea8c9b429","modified":1585406140000},{"_id":"source/_posts/2019-12-23-fabric使用总结.md","hash":"14614f706e3f7a4e186d91f4e6abfa707e3d1069","modified":1585406140000},{"_id":"source/_posts/2020-08-14-记一次spring事务问题排查.md","hash":"3ff17e97a6a5e550ca8431c0c93bb77fba1aa2f8","modified":1599905340000},{"_id":"source/_posts/2020-07-19-破解安卓机nfc功能模拟卡限制.md","hash":"68d614d028799549e41139c357cc3ae7c4d77039","modified":1595166180000},{"_id":"source/_posts/2020-03-31-python-pandas-to-csv的使用记录.md","hash":"9984aa70d018ef1a68d5ce93dafc119097661ab5","modified":1585658465000},{"_id":"source/_posts/2020-04-09-jenkins前后端分离部署.md","hash":"417a3c4431c43815b38e13d0020bd6abb8c786e5","modified":1595660808000},{"_id":"source/_posts/2020-10-10-数据仓库概念总结.md","hash":"4b08fa9b12c4e4b3ce62a8e70c1501ad7dae4ffa","modified":1602314548000},{"_id":"source/_posts/2020-10-21-mybatis动态SQL整理.md","hash":"5dd13ef7e07ec534119c7fc905f10793745bcd9b","modified":1603717013000},{"_id":"source/_posts/2020-09-12-设计模式学习总结.md","hash":"b7164192c8cfcee43f4728c4df322455f3abba02","modified":1599905528000},{"_id":"source/_posts/2020-10-10-数据仓库构建思考.md","hash":"5463d25d1e5e728613be20f2929e4a3b2dfb32a5","modified":1602317265000},{"_id":"source/_posts/2020-11-20-springcloud学习总结.md","hash":"153d47ca724eaa59f4ff162700dde1281261e2c8","modified":1605877764000},{"_id":"source/tags/index.md","hash":"24bbf92a1375f4719e42de71c25b2bfb34e4d834","modified":1585406140000},{"_id":"source/categories/index.md","hash":"14c5ea719245f4dca43c9a99a57fc41b325b4834","modified":1585406140000},{"_id":"source/_posts/2020-10-26-spring5框架学习总结.md","hash":"ac79b07e87cedac4f26e06eb97bb79bcd883138f","modified":1603717017000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1585406140000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1585406140000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1585406140000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1585406140000},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1585406140000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1585406140000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1585406140000},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1585406140000},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1585406140000},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1585406140000},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1585406140000},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1585406140000},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1585406140000},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1585406140000},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1585406140000},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1585406140000},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1585406140000},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1585406140000},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1585406140000},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1585406140000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1585406140000},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1585406140000},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1585406140000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1585406140000},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1585406140000},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1585406140000},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1585406140000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1585406140000},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1585406140000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1585406140000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1585406140000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1585406140000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1585406140000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1585406140000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1585406140000},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1585406140000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1585406140000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1585406140000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1585406140000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1585406140000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1585406140000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1585406140000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1585406140000},{"_id":"themes/next/source/images/alipay.jpg","hash":"30f5cded3686ee70d56144f06b8547e3ace3cd8d","modified":1585406140000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1585406140000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585406140000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1585406140000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1585406140000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1585406140000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1585406140000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1585406140000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1585406140000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1585406140000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585406140000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585406140000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1585406140000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1585406140000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1585406140000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1585406140000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1585406140000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1585406140000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1585406140000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1585406140000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1585406140000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"b811a3cd64ecc90533048d12e0d96cec2515d262","modified":1585406140000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1585406140000},{"_id":"themes/next/layout/_macro/post.swig","hash":"a4901c488c36c1349948b4486545fbd9355c6834","modified":1585406140000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1585406140000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1585406140000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1585406140000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1585406140000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1585406140000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1585406140000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1585406140000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1585406140000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1585406140000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1585406140000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1585406140000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1585406140000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1585406140000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1585406140000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1585406140000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1585406140000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"5f155ea8a9d792dba84727141859d0a4c1705582","modified":1585406140000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1585406140000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1585406140000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1585406140000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1585406140000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/source/images/avatar.jpeg","hash":"48414fbdb4a202ee77595083a0a00cdcb3a99fbc","modified":1585406140000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"3e223daecbb37196edbbeb937ce23063d305aa7b","modified":1585406140000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585406140000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1585406140000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5b1805ccffe7a6cc42050f77b0078d02c30b1853","modified":1585406140000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1585406140000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1585406140000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1585406140000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1585406140000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1585406140000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1585406140000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1585406140000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1585406140000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1585406140000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1585406140000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1585406140000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1585406140000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1585406140000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1585406140000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1585406140000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1585406140000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1585406140000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1585406140000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1585406140000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1585406140000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1585406140000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1585406140000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1585406140000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1585406140000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1585406140000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1585406140000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1585406140000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1585406140000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1585406140000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1585406140000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1585406140000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1585406140000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1585406140000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1585406140000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1585406140000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1585406140000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1585406140000},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1585406140000},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1585406140000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1585406140000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1585406140000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1585406140000},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1585406140000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1585406140000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1585406140000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1585406140000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1585406140000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1585406140000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1585406140000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1585406140000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1585406140000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1585406140000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1585406140000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1585406140000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1585406140000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1585406140000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1585406140000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1585406140000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1585406140000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1585406140000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1585406140000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1585406140000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1585406140000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1585406140000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1585406140000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1585406140000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1585406140000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1585406140000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1585406140000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1585406140000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1585406140000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1585406140000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1585406140000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1585406140000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1585406140000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"51f70ba4e2dd1c2bc5ff1f8f16ddf93a286c3e4f","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"bdcd8e4acbc6e51f28fa95d8a02f65fd1c80f242","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1585406140000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1585406140000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1585406140000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1585406140000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1585406140000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1585406140000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585406140000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1585406140000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1585406140000},{"_id":"public/atom.xml","hash":"51303987d574299c38352b1f518c33f8962f3598","modified":1605877844786},{"_id":"public/about/index.html","hash":"df09185b2ae2c95fecf0749114dd5c36d36b2c5c","modified":1605877852292},{"_id":"public/categories/index.html","hash":"9ada3c3c36585558aff09f0d5cc58030a61ef54a","modified":1605877852316},{"_id":"public/tags/index.html","hash":"c87ddeeb37a7b976a88c800ebe15eb6a33090ff1","modified":1605877852318},{"_id":"public/archives/2018/index.html","hash":"2a863b41219dfff6d98f735589664b15cb04dbd0","modified":1605877852320},{"_id":"public/archives/page/3/index.html","hash":"1ee91edfc026e06fd32f748d325b90b2b92c5cf1","modified":1605877852321},{"_id":"public/archives/2018/11/index.html","hash":"eee0b9a14a4e022ba486b59508520b4c2f05ac40","modified":1605877852321},{"_id":"public/archives/2018/12/index.html","hash":"aa23351e8f0289a18d0e13547da46915dc032709","modified":1605877852324},{"_id":"public/archives/2019/01/index.html","hash":"188e073cd7c8512c7d9bafd9820118441f3e44e9","modified":1605877852324},{"_id":"public/archives/2019/03/index.html","hash":"82707c93372dc8a8fd70d5e94d567e1ba983d3cf","modified":1605877852325},{"_id":"public/archives/2019/04/index.html","hash":"9e01e2eaeff2162be6ae0d4b001041fda875afaa","modified":1605877852325},{"_id":"public/archives/2019/06/index.html","hash":"2732fa3ec022d5be07253c2255a1faf8dba0563c","modified":1605877852327},{"_id":"public/archives/2019/07/index.html","hash":"7de295f610e9a1e359a57088a691cd51a748a28e","modified":1605877852327},{"_id":"public/archives/2019/12/index.html","hash":"88df7c8662f55b569c086b1ebe57d34b5b8fcaee","modified":1605877852328},{"_id":"public/archives/2020/01/index.html","hash":"c7556eff914c79b0e3fccc1ace3df9b9b98f0c69","modified":1605877852329},{"_id":"public/archives/2020/page/2/index.html","hash":"9021c6e2f954fd91f0fee367bb4a5fa89dd66436","modified":1605877852330},{"_id":"public/archives/2020/04/index.html","hash":"b5c31e29d7435a5000522ee364af2c7979ca0b59","modified":1605877852331},{"_id":"public/archives/2020/03/index.html","hash":"a0a4ec4213c1c31371b7188231a8fe493baf2941","modified":1605877852331},{"_id":"public/archives/2020/08/index.html","hash":"facdbfcf80ddcb344874d2d71715e093736696c1","modified":1605877852331},{"_id":"public/archives/2020/07/index.html","hash":"bec93496458411e0fa2508f4236c9e6c96364145","modified":1605877852331},{"_id":"public/archives/2020/09/index.html","hash":"1947acac60c0554cb39c88e64754ee75bb23dc66","modified":1605877852332},{"_id":"public/archives/2020/10/index.html","hash":"4f04c81a882ab5a243595b42dd50862f0cc12540","modified":1605877852332},{"_id":"public/categories/python/index.html","hash":"4942d0cd46ea7308e1ada11cb1c1bf7705a3b4a7","modified":1605877852336},{"_id":"public/categories/docker/index.html","hash":"003b44feb7af1431d416e01e4d08f940dbfc1f16","modified":1605877852339},{"_id":"public/categories/flask/index.html","hash":"13f1bc0455cb35c2f21a0ebca7ad3b1df0a1601f","modified":1605877852340},{"_id":"public/categories/linux/index.html","hash":"511a521aa50f069b759cae29402f67713dad1a76","modified":1605877852342},{"_id":"public/categories/问题分析/index.html","hash":"041baad3cd5f272f6698a471e90d00de4a1e20d4","modified":1605877852343},{"_id":"public/categories/coding-tools/index.html","hash":"bdb70b32c91b8e6d31593a089a683560409c7e8b","modified":1605877852345},{"_id":"public/categories/algorithm-datastructure/index.html","hash":"056039e8c2a0a6766502d0a9a816712dbe23afd0","modified":1605877852346},{"_id":"public/categories/部署/index.html","hash":"bf5e21e84111659fedcf2160ca64a65c20d7911b","modified":1605877852348},{"_id":"public/categories/设计模式/index.html","hash":"2d8c6aa71430508533ce128e70da32ee73118864","modified":1605877852348},{"_id":"public/categories/shell/index.html","hash":"ee91acaa62bc01b7e9b5ce8d9be3063e38d84136","modified":1605877852354},{"_id":"public/categories/手机/index.html","hash":"7c25bf894c80a6fa944dbfb875a86d358cf696dd","modified":1605877852356},{"_id":"public/categories/java/index.html","hash":"724ba206528d9a3422cb60a4884b1a003d748b2a","modified":1605877852357},{"_id":"public/categories/大数据/index.html","hash":"cb7a89149b7a09225e148934f1a6f3d2b450085e","modified":1605877852358},{"_id":"public/tags/python/index.html","hash":"585bb5acd9f13b6a41b02da5ba4454ff6644e4b9","modified":1605877852359},{"_id":"public/categories/spring/index.html","hash":"f6f3aac367fef965988e485347b9b6986206afe2","modified":1605877852360},{"_id":"public/tags/docker/index.html","hash":"8a812c9794c7718e70cb7a1778ed2253671d474a","modified":1605877852361},{"_id":"public/tags/flask/index.html","hash":"5b23bb8d893dfabef710df336c5ba40bee6b59ef","modified":1605877852362},{"_id":"public/tags/wins10/index.html","hash":"e4ee5a3a795e98ddeffcf48d73940f89645232bf","modified":1605877852363},{"_id":"public/tags/sse/index.html","hash":"b1693a274b7d2e9a6a019c73e21892638a51fb8d","modified":1605877852363},{"_id":"public/tags/问题分析/index.html","hash":"55cc48d2cfa5ed20143611e75e93cacbdfd3281f","modified":1605877852364},{"_id":"public/tags/linux/index.html","hash":"309033a0915790e1ee164509786f69d032bd93a2","modified":1605877852364},{"_id":"public/tags/mysql/index.html","hash":"802bac955a905273bdc256a60d64cec79f844fc7","modified":1605877852365},{"_id":"public/tags/源码浅析/index.html","hash":"4abab35f324568faabf97d0b5444f98da7403176","modified":1605877852365},{"_id":"public/tags/session/index.html","hash":"b7de4f6e2640f30bdf3517302e415c273405d15c","modified":1605877852366},{"_id":"public/tags/coding-tools/index.html","hash":"fb72f3bd06f62d85d89a7b20f976bbfb52f414e3","modified":1605877852370},{"_id":"public/tags/兼职运维/index.html","hash":"8b05d29b469b2e9b08f5f82b6b3e3cc5be9280d6","modified":1605877852372},{"_id":"public/tags/algorithm/index.html","hash":"85998e257543a02e8d9746fdaf58d8bca02b5400","modified":1605877852373},{"_id":"public/2020/10/26/spring5框架学习总结/index.html","hash":"7bfa64e3fa6a5231d9e4426ef85039b2468e4033","modified":1605877852374},{"_id":"public/2020/10/21/mybatis动态SQL整理/index.html","hash":"1a2740047851c71e997960d5f0b64b3fd62e2cd1","modified":1605877852374},{"_id":"public/2020/10/10/数据仓库构建思考/index.html","hash":"e8a3782ce8c4b84b8971c4295d257e60ee0289b3","modified":1605877852375},{"_id":"public/2020/10/10/数据仓库概念总结/index.html","hash":"9fa587ba7ced71d12efc65944106da3deccf41ac","modified":1605877852375},{"_id":"public/2020/09/12/设计模式学习总结/index.html","hash":"ecde09a2a0550e957aa0c6ef844a95b727fcf841","modified":1605877852376},{"_id":"public/2020/08/14/记一次spring事务问题排查/index.html","hash":"65cb5dd8a08dc224a4f4a159f9ff606b3356a01a","modified":1605877852379},{"_id":"public/2020/07/19/破解安卓机nfc功能模拟卡限制/index.html","hash":"6572d4c96c43552ccaf36056fd34d01e03c8313f","modified":1605877852379},{"_id":"public/2020/04/09/jenkins前后端分离部署/index.html","hash":"3db911f660e6ba3ec6470d5782eb41cd6a2cb7b1","modified":1605877852380},{"_id":"public/2020/03/31/python-pandas-to-csv的使用记录/index.html","hash":"f6e7142b30a0ff5f7f2c4e7ddae5df8a1708b1ea","modified":1605877852380},{"_id":"public/2020/03/27/关于pyspark-dataframe与pandas-dataframe的那些事/index.html","hash":"0507edd88d7ace2d5d5ab2666855c7c23f60e2c5","modified":1605877852384},{"_id":"public/2020/01/13/shell编码整理/index.html","hash":"e4a8c91f8d122ce62f1592e92d15c34a63524c6c","modified":1605877852388},{"_id":"public/2019/12/27/兼职运维之ulimit-u/index.html","hash":"780920e301f5214576dc39b2604b1e8f35d1e150","modified":1605877852390},{"_id":"public/2019/12/22/hexo容器化部署/index.html","hash":"1e653e176bb27dec189942c381f4523f96dfa5db","modified":1605877852391},{"_id":"public/2019/07/14/flask-caching源码浅析/index.html","hash":"99a200c52c39e80b543acfc00772f9c0ea0766f9","modified":1605877852392},{"_id":"public/2019/12/23/fabric使用总结/index.html","hash":"ce562d52626c0e67c9957488e3eaabaefc4f1180","modified":1605877852393},{"_id":"public/2019/06/16/数据结构与算法总结/index.html","hash":"5497fe6eca42b10f73b612aa44db184b3fef19ab","modified":1605877852394},{"_id":"public/2019/06/09/python程序员开发规范/index.html","hash":"751777f9c46609bb7691c1efb2a719fc7c58db41","modified":1605877852396},{"_id":"public/2019/03/25/flask分布式部署及flask-session/index.html","hash":"803a62af89d1af35fd458c74af5c8143ccca2362","modified":1605877852397},{"_id":"public/2019/03/10/webserver异常-TooManyOpenFiles/index.html","hash":"67c7510e0fb59ddf9ad59951df27805100e64f3a","modified":1605877852398},{"_id":"public/2019/04/27/pycharm远程调试/index.html","hash":"bde4eaebb08731e503cc587e962a9a6bf316b1f0","modified":1605877852399},{"_id":"public/2019/01/22/sqlalchemy数据库连接数异常/index.html","hash":"738f0ce30d46b5d5b5ea100c8c60696f4d05e452","modified":1605877852402},{"_id":"public/2018/12/30/python代码加密部署/index.html","hash":"0a13f313a4a340905b3d22c926c8297c078a9144","modified":1605877852404},{"_id":"public/archives/index.html","hash":"d63fd66f004b94426497b085245b4ffda561d553","modified":1605877852406},{"_id":"public/2018/11/25/flask服务端推送/index.html","hash":"d5df979f48c372774530e295b32c54e77598ba4a","modified":1605877852408},{"_id":"public/2018/11/04/win10docker使用填坑/index.html","hash":"eaedcf397866196858e4cd9fecc0633e3cf912ae","modified":1605877852409},{"_id":"public/archives/page/2/index.html","hash":"8fb65d3f1feca307faa2864e02b828834542599d","modified":1605877852410},{"_id":"public/archives/2019/index.html","hash":"319c6b51f364816770736257cd493ae084fc61e2","modified":1605877852410},{"_id":"public/archives/2020/index.html","hash":"9e1d8cd83088e7dca28181f25cd60b82622db890","modified":1605877852411},{"_id":"public/archives/2020/11/index.html","hash":"53ed1c9026bf855ebf7e469f72075d29efd96766","modified":1605877852848},{"_id":"public/tags/分布式/index.html","hash":"87d3d2a6978bfc751e2ae90ad536575cf75b6ec4","modified":1605877852849},{"_id":"public/tags/shell/index.html","hash":"e3dd6319ae4caac35d6eea145417817495bee204","modified":1605877852849},{"_id":"public/tags/datastructure/index.html","hash":"72e9e7ae72599f975718bd36571397ef497312b6","modified":1605877852849},{"_id":"public/tags/部署/index.html","hash":"6ca38ebb2dcee102022fba31e33ff4d57a7c4f1a","modified":1605877852849},{"_id":"public/tags/pysqark/index.html","hash":"6d1e47da6322684fb7f01e4f17237a6a1284bdbd","modified":1605877852849},{"_id":"public/tags/运维/index.html","hash":"9bd884b62e0f6e0b995876389f150b13f7c778c0","modified":1605877852849},{"_id":"public/tags/pandas/index.html","hash":"751682cac439c2b00047dafea42e6edcb45df505","modified":1605877852855},{"_id":"public/tags/hexo/index.html","hash":"2a35461ea20951ca5ed3400dbcc49d66fe1bb691","modified":1605877852856},{"_id":"public/tags/数据仓库/index.html","hash":"2a2cdea89b4213df422001fc4202ea5207f2b3f7","modified":1605877852856},{"_id":"public/tags/mybatis/index.html","hash":"058473e75b50024a7af5e9d7d4ad8f99fdd880c0","modified":1605877852857},{"_id":"public/tags/jenkins/index.html","hash":"5919ab337b876f65282cc89ace9a01497f3f07e3","modified":1605877852857},{"_id":"public/tags/nfc/index.html","hash":"b75b85e5b9234acc4640c2b27617583161f10cec","modified":1605877852857},{"_id":"public/tags/事务/index.html","hash":"727f1e94b353ddfb0b740a710f2611998abd8cd2","modified":1605877852857},{"_id":"public/tags/spring/index.html","hash":"44bc4a295d82d823d40949f75df9c3f20ac5b415","modified":1605877852858},{"_id":"public/2020/11/20/springcloud学习总结/index.html","hash":"bada5fc822fdfb8909870d0f410bc67a6513e74a","modified":1605877852858},{"_id":"public/index.html","hash":"57572d9a329e0e1f47986b7141d521191590d67c","modified":1605877852858},{"_id":"public/page/2/index.html","hash":"41e11356424daea50a010b5d620d15b3b3613169","modified":1605877852858},{"_id":"public/page/3/index.html","hash":"b87320bff6fcada9ec4a46ffc28482e725b9b53b","modified":1605877852859},{"_id":"public/tags/spring-cloud/index.html","hash":"7cc9e0ba50b1849014d946467c9e4b2c125d5aa0","modified":1605877852878},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1605877852878},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1605877852879},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1605877852880},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1605877852880},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1605877852880},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1605877852881},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1605877852881},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1605877852881},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1605877852881},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1605877852881},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1605877852881},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1605877852881},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1605877852881},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1605877852881},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1605877852881},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1605877852881},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1605877852882},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1605877852882},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1605877852882},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1605877852882},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1605877852947},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1605877852947},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1605877852948},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1605877852949},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1605877852956},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1605877852958},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1605877852961},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1605877852962},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1605877852963},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1605877852964},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1605877852965},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1605877852966},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1605877852971},{"_id":"public/images/alipay.jpg","hash":"30f5cded3686ee70d56144f06b8547e3ace3cd8d","modified":1605877857073},{"_id":"public/images/avatar.jpeg","hash":"48414fbdb4a202ee77595083a0a00cdcb3a99fbc","modified":1605877857074},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1605877857383},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1605877857385},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1605877857392},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1605877857392},{"_id":"public/css/main.css","hash":"ca2f268e755d001c472bc98add7a070fde93fe4f","modified":1605877857392},{"_id":"public/images/wechatpay.jpg","hash":"3e223daecbb37196edbbeb937ce23063d305aa7b","modified":1605877857393},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1605877857394},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1605877857395},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1605877857554},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1605877857554},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1605877857555},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1605877857555},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1605877857557},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1605877857557},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1605877857558},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1605877857558},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1605877857559},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1605877857559},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1605877857560},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1605877857561},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1605877857562},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1605877857562},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1605877857562},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1605877857563},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1605877857563},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1605877857563},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1605877857565},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1605877857568},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1605877857570},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1605877857574},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1605877857574},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1605877857575},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1605877857576},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1605877857576},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1605877857577},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1605877857578},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1605877857579},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1605877857581},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1605877857581},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1605877857582},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1605877857583},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1605877857583},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1605877857583},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1605877857583},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1605877857584},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1605877857585},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1605877857585},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1605877857585},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1605877857682},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1605877857682},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1605877857686},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1605877857686},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1605877857690},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1605877857691},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1605877857693},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1605877857876},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1605877857900},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1605877857913},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1605877857916},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1605877857943},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1605877857944},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1605877857974},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1605877857975},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1605877857975},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1605877857975},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1605877857975},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1605877857976},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1605877858181},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1605877858191},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1605877858191},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1605877858317},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1605877858358},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1605877858361},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1605877858362},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1605877858402},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1605877858473},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1605877858499}],"Category":[{"name":"python","_id":"ckhqa6uzd000416p70gzkn3bv"},{"name":"docker","_id":"ckhqa6v08000616p7h0v3d7i2"},{"name":"flask","_id":"ckhqa6v2f000i16p7xyrjkahq"},{"name":"问题分析","_id":"ckhqa6v3n000n16p74c3pa1h4"},{"name":"linux","_id":"ckhqa6v4s000s16p78iteozjk"},{"name":"coding-tools","_id":"ckhqa6v6e001516p7fpzv8zl4"},{"name":"algorithm&datastructure","_id":"ckhqa6v73001b16p7qefxq35b"},{"name":"shell","_id":"ckhqa6v80001l16p7gdp3hk3k"},{"name":"部署","_id":"ckhqa6v8c001s16p7c0bv8d3l"},{"name":"设计模式","_id":"ckhqa6v8p001z16p778e5kf80"},{"name":"手机","_id":"ckhqa6v9c002516p7pea97psm"},{"name":"大数据","_id":"ckhqa6v9e002816p7akkpgw55"},{"name":"java","_id":"ckhqa6v9i002h16p7z326sjnt"},{"name":"spring","_id":"ckhqa6vzf003o16p7hfmru2fr"}],"Data":[],"Page":[{"title":"about","date":"2018-09-16T09:18:34.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-16 17:18:34\n---\n","updated":"2020-03-28T14:35:40.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckhqa6uyi000116p78x1u9u81","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-16T09:16:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-16 17:16:53\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-03-28T14:35:40.000Z","path":"tags/index.html","layout":"page","_id":"ckhqa6v1z000f16p74zduxc3c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-16T09:17:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-16 17:17:00\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-03-28T14:35:40.000Z","path":"categories/index.html","layout":"page","_id":"ckhqa6v2b000h16p7mv3fwvco","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"draft_file","_content":"","source":"_drafts/draft-file.md","raw":"---\ntitle: draft_file\ntags:\n---\n","slug":"draft-file","published":0,"date":"2020-03-28T14:35:40.000Z","updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6uxr000016p7rj90coa0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"python代码pyc化加密部署","date":"2018-12-30T08:45:56.000Z","_content":"\n{%note info%}\npython不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。\n{%endnote%}\n<!--more-->\n\n### 为什么转换为pyc？\n- pyc官方的解释还请自行google\n- 简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同\n- pyc文件运行效率高于py文件（少了解释器对源码的转换）\n- pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的\n\n### 如何转换为pyc？\n```shell\npython -m compileall (file or dir) -b\n```\n- -b 支持生成pyc文件于当前目录而非`__pycache__`\n\n### 配合jenkins进行自动集成发布\n- 基于flask开发目录\n\n```\n/app\n/conf\n/tests\n...\n```\n\n```shell\n# /bin/sh\n\nfunction timeoutController(){\n    cmd=$1\n    timeout=$2\n    mod=$3\n    count=1\n    while [ $count -le 3 ]; do\n        timeout $timeout $cmd\n        exitCode=$?\n        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then\n            break\n        fi\n\n        if [ $exitCode == 124 ]; then\n            echo \"module: {$mod} timeout {$timeout} s and start to {$count} time retry\"\n        fi\n        count=`expr $count + 1`\n    done\n\n    if [ $exitCode -ne 0 ]; then\n        echo $mod \"=====================>unittest failed\"\n        exit 1\n    fi\n}\n\nfunction code_encrypt(){\n    release_dir=$1\n    pyc_dir=$2\n\n    # release svn del .svn\n    find $release_dir -name \".svn\" | xargs rm -rf\n\n    # svn del pyc\n    cd $pyc_dir\n    svn rm * --force\n    svn ci -m \"pyc delete\"\n\n    # cp release code to pyc && encrypt code\n    cp $release_dir/* $pyc_dir -R\n    python -m compileall . -b\n    find . -name \"*.py\" | xargs rm\n    rm tests/report -rf\n    # replace gunicorn.pyc with gunicorn.py\n    rm $pyc_dir/conf/gunicorn.pyc\n    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/\n\n    # pyc svn commit\n    svn add . --no-ignore --force\n    svn ci -m \"pyc commit\"\n}\n\nfunction main(){\n    echo \"========================== init env =============\"\n    source /root/anaconda3/bin/activate py3\n    release_dir=\"/home/pro/pro_release\"\n    pyc_dir=\"/home/pro/pro_pyc\"\n    release_svn_dir=\"http://*.*.*.*/\"\n\n    # update tag:release code\n    rm $release_dir -rf\n    svn co $release_svn_dir\n\n    echo \"========================== flake8 ===============\"\n    cd $release_dir\n    timeoutController \"flake8 --config=${release_dir}/.config/flake8 ${release_dir}\" 60 \"flake8\"\n\n    echo \"========================== pytest ===============\"\n    cd $release_dir/tests\n    timeoutController \"pytest .\"\n\n    echo \"========================== code encrypt =============\"\n    code_encrypt $release_dir $pyc_dir\n}\n\nmain\n```\n\n{%note warning%}\n- 以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密\n- gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉\n{%endnote%}","source":"_posts/2018-12-30-python代码加密部署.md","raw":"---\ntitle: python代码pyc化加密部署\ndate: 2018-12-30 16:45:56\ntags:\n- python\ncategories:\n- python\n---\n\n{%note info%}\npython不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。\n{%endnote%}\n<!--more-->\n\n### 为什么转换为pyc？\n- pyc官方的解释还请自行google\n- 简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同\n- pyc文件运行效率高于py文件（少了解释器对源码的转换）\n- pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的\n\n### 如何转换为pyc？\n```shell\npython -m compileall (file or dir) -b\n```\n- -b 支持生成pyc文件于当前目录而非`__pycache__`\n\n### 配合jenkins进行自动集成发布\n- 基于flask开发目录\n\n```\n/app\n/conf\n/tests\n...\n```\n\n```shell\n# /bin/sh\n\nfunction timeoutController(){\n    cmd=$1\n    timeout=$2\n    mod=$3\n    count=1\n    while [ $count -le 3 ]; do\n        timeout $timeout $cmd\n        exitCode=$?\n        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then\n            break\n        fi\n\n        if [ $exitCode == 124 ]; then\n            echo \"module: {$mod} timeout {$timeout} s and start to {$count} time retry\"\n        fi\n        count=`expr $count + 1`\n    done\n\n    if [ $exitCode -ne 0 ]; then\n        echo $mod \"=====================>unittest failed\"\n        exit 1\n    fi\n}\n\nfunction code_encrypt(){\n    release_dir=$1\n    pyc_dir=$2\n\n    # release svn del .svn\n    find $release_dir -name \".svn\" | xargs rm -rf\n\n    # svn del pyc\n    cd $pyc_dir\n    svn rm * --force\n    svn ci -m \"pyc delete\"\n\n    # cp release code to pyc && encrypt code\n    cp $release_dir/* $pyc_dir -R\n    python -m compileall . -b\n    find . -name \"*.py\" | xargs rm\n    rm tests/report -rf\n    # replace gunicorn.pyc with gunicorn.py\n    rm $pyc_dir/conf/gunicorn.pyc\n    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/\n\n    # pyc svn commit\n    svn add . --no-ignore --force\n    svn ci -m \"pyc commit\"\n}\n\nfunction main(){\n    echo \"========================== init env =============\"\n    source /root/anaconda3/bin/activate py3\n    release_dir=\"/home/pro/pro_release\"\n    pyc_dir=\"/home/pro/pro_pyc\"\n    release_svn_dir=\"http://*.*.*.*/\"\n\n    # update tag:release code\n    rm $release_dir -rf\n    svn co $release_svn_dir\n\n    echo \"========================== flake8 ===============\"\n    cd $release_dir\n    timeoutController \"flake8 --config=${release_dir}/.config/flake8 ${release_dir}\" 60 \"flake8\"\n\n    echo \"========================== pytest ===============\"\n    cd $release_dir/tests\n    timeoutController \"pytest .\"\n\n    echo \"========================== code encrypt =============\"\n    code_encrypt $release_dir $pyc_dir\n}\n\nmain\n```\n\n{%note warning%}\n- 以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密\n- gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉\n{%endnote%}","slug":"python代码加密部署","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6uyp000216p7bbyjuykc","content":"<div class=\"note info\"><p>python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"为什么转换为pyc？\"><a href=\"#为什么转换为pyc？\" class=\"headerlink\" title=\"为什么转换为pyc？\"></a>为什么转换为pyc？</h3><ul>\n<li>pyc官方的解释还请自行google</li>\n<li>简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同</li>\n<li>pyc文件运行效率高于py文件（少了解释器对源码的转换）</li>\n<li>pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的</li>\n</ul>\n<h3 id=\"如何转换为pyc？\"><a href=\"#如何转换为pyc？\" class=\"headerlink\" title=\"如何转换为pyc？\"></a>如何转换为pyc？</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m compileall (file or dir) -b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b 支持生成pyc文件于当前目录而非<code>__pycache__</code></li>\n</ul>\n<h3 id=\"配合jenkins进行自动集成发布\"><a href=\"#配合jenkins进行自动集成发布\" class=\"headerlink\" title=\"配合jenkins进行自动集成发布\"></a>配合jenkins进行自动集成发布</h3><ul>\n<li>基于flask开发目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app</span><br><span class=\"line\">/conf</span><br><span class=\"line\">/tests</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">function timeoutController()&#123;</span><br><span class=\"line\">    cmd=$1</span><br><span class=\"line\">    timeout=$2</span><br><span class=\"line\">    mod=$3</span><br><span class=\"line\">    count=1</span><br><span class=\"line\">    while [ $count -le 3 ]; do</span><br><span class=\"line\">        timeout $timeout $cmd</span><br><span class=\"line\">        exitCode=$?</span><br><span class=\"line\">        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        if [ $exitCode == 124 ]; then</span><br><span class=\"line\">            echo \"module: &#123;$mod&#125; timeout &#123;$timeout&#125; s and start to &#123;$count&#125; time retry\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        count=`expr $count + 1`</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $exitCode -ne 0 ]; then</span><br><span class=\"line\">        echo $mod \"=====================&gt;unittest failed\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function code_encrypt()&#123;</span><br><span class=\"line\">    release_dir=$1</span><br><span class=\"line\">    pyc_dir=$2</span><br><span class=\"line\"></span><br><span class=\"line\">    # release svn del .svn</span><br><span class=\"line\">    find $release_dir -name \".svn\" | xargs rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    # svn del pyc</span><br><span class=\"line\">    cd $pyc_dir</span><br><span class=\"line\">    svn rm * --force</span><br><span class=\"line\">    svn ci -m \"pyc delete\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # cp release code to pyc &amp;&amp; encrypt code</span><br><span class=\"line\">    cp $release_dir/* $pyc_dir -R</span><br><span class=\"line\">    python -m compileall . -b</span><br><span class=\"line\">    find . -name \"*.py\" | xargs rm</span><br><span class=\"line\">    rm tests/report -rf</span><br><span class=\"line\">    # replace gunicorn.pyc with gunicorn.py</span><br><span class=\"line\">    rm $pyc_dir/conf/gunicorn.pyc</span><br><span class=\"line\">    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">    # pyc svn commit</span><br><span class=\"line\">    svn add . --no-ignore --force</span><br><span class=\"line\">    svn ci -m \"pyc commit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function main()&#123;</span><br><span class=\"line\">    echo \"========================== init env =============\"</span><br><span class=\"line\">    source /root/anaconda3/bin/activate py3</span><br><span class=\"line\">    release_dir=\"/home/pro/pro_release\"</span><br><span class=\"line\">    pyc_dir=\"/home/pro/pro_pyc\"</span><br><span class=\"line\">    release_svn_dir=\"http://*.*.*.*/\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # update tag:release code</span><br><span class=\"line\">    rm $release_dir -rf</span><br><span class=\"line\">    svn co $release_svn_dir</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== flake8 ===============\"</span><br><span class=\"line\">    cd $release_dir</span><br><span class=\"line\">    timeoutController \"flake8 --config=$&#123;release_dir&#125;/.config/flake8 $&#123;release_dir&#125;\" 60 \"flake8\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== pytest ===============\"</span><br><span class=\"line\">    cd $release_dir/tests</span><br><span class=\"line\">    timeoutController \"pytest .\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== code encrypt =============\"</span><br><span class=\"line\">    code_encrypt $release_dir $pyc_dir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ul>\n<li>以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密</li>\n<li>gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉</li>\n</ul></div>","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。</p></div>","more":"<h3 id=\"为什么转换为pyc？\"><a href=\"#为什么转换为pyc？\" class=\"headerlink\" title=\"为什么转换为pyc？\"></a>为什么转换为pyc？</h3><ul>\n<li>pyc官方的解释还请自行google</li>\n<li>简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同</li>\n<li>pyc文件运行效率高于py文件（少了解释器对源码的转换）</li>\n<li>pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的</li>\n</ul>\n<h3 id=\"如何转换为pyc？\"><a href=\"#如何转换为pyc？\" class=\"headerlink\" title=\"如何转换为pyc？\"></a>如何转换为pyc？</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m compileall (file or dir) -b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b 支持生成pyc文件于当前目录而非<code>__pycache__</code></li>\n</ul>\n<h3 id=\"配合jenkins进行自动集成发布\"><a href=\"#配合jenkins进行自动集成发布\" class=\"headerlink\" title=\"配合jenkins进行自动集成发布\"></a>配合jenkins进行自动集成发布</h3><ul>\n<li>基于flask开发目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app</span><br><span class=\"line\">/conf</span><br><span class=\"line\">/tests</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">function timeoutController()&#123;</span><br><span class=\"line\">    cmd=$1</span><br><span class=\"line\">    timeout=$2</span><br><span class=\"line\">    mod=$3</span><br><span class=\"line\">    count=1</span><br><span class=\"line\">    while [ $count -le 3 ]; do</span><br><span class=\"line\">        timeout $timeout $cmd</span><br><span class=\"line\">        exitCode=$?</span><br><span class=\"line\">        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        if [ $exitCode == 124 ]; then</span><br><span class=\"line\">            echo \"module: &#123;$mod&#125; timeout &#123;$timeout&#125; s and start to &#123;$count&#125; time retry\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        count=`expr $count + 1`</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $exitCode -ne 0 ]; then</span><br><span class=\"line\">        echo $mod \"=====================&gt;unittest failed\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function code_encrypt()&#123;</span><br><span class=\"line\">    release_dir=$1</span><br><span class=\"line\">    pyc_dir=$2</span><br><span class=\"line\"></span><br><span class=\"line\">    # release svn del .svn</span><br><span class=\"line\">    find $release_dir -name \".svn\" | xargs rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    # svn del pyc</span><br><span class=\"line\">    cd $pyc_dir</span><br><span class=\"line\">    svn rm * --force</span><br><span class=\"line\">    svn ci -m \"pyc delete\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # cp release code to pyc &amp;&amp; encrypt code</span><br><span class=\"line\">    cp $release_dir/* $pyc_dir -R</span><br><span class=\"line\">    python -m compileall . -b</span><br><span class=\"line\">    find . -name \"*.py\" | xargs rm</span><br><span class=\"line\">    rm tests/report -rf</span><br><span class=\"line\">    # replace gunicorn.pyc with gunicorn.py</span><br><span class=\"line\">    rm $pyc_dir/conf/gunicorn.pyc</span><br><span class=\"line\">    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">    # pyc svn commit</span><br><span class=\"line\">    svn add . --no-ignore --force</span><br><span class=\"line\">    svn ci -m \"pyc commit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function main()&#123;</span><br><span class=\"line\">    echo \"========================== init env =============\"</span><br><span class=\"line\">    source /root/anaconda3/bin/activate py3</span><br><span class=\"line\">    release_dir=\"/home/pro/pro_release\"</span><br><span class=\"line\">    pyc_dir=\"/home/pro/pro_pyc\"</span><br><span class=\"line\">    release_svn_dir=\"http://*.*.*.*/\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # update tag:release code</span><br><span class=\"line\">    rm $release_dir -rf</span><br><span class=\"line\">    svn co $release_svn_dir</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== flake8 ===============\"</span><br><span class=\"line\">    cd $release_dir</span><br><span class=\"line\">    timeoutController \"flake8 --config=$&#123;release_dir&#125;/.config/flake8 $&#123;release_dir&#125;\" 60 \"flake8\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== pytest ===============\"</span><br><span class=\"line\">    cd $release_dir/tests</span><br><span class=\"line\">    timeoutController \"pytest .\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== code encrypt =============\"</span><br><span class=\"line\">    code_encrypt $release_dir $pyc_dir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ul>\n<li>以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密</li>\n<li>gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉</li>\n</ul></div>"},{"title":"win10docker使用填坑","date":"2018-11-04T05:17:09.000Z","_content":"{%note info%}\n本文用以记录在`docker win10`环境使用中踩到的坑及解决方案。\n{%endnote%}\n\n<!--more-->\n\n## 问题一：docker修改配置或者镜像的存储位置后启动异常\n### *解决方案*：\n{%note warning%}\n- 移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑\n{%endnote%}\n***\n\n\n\n## 问题二：修改镜像存储位置\n### *解决方案*：\n{%note warning%}\n- 默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx\n- 修改：Hyper-V管理器**Hyper-v设置**虚拟硬盘修改路径\n{%endnote%}\n\n\n***\n\n## 问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\n### *解决方案*：\n{%note warning%}\n- 进入容器\ndocker exec -it mysql bash\n- 进入mysql\nmysql -u root -p\n- 创建root用户\n CREATE USER 'root'@'%' IDENTIFIED IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 设置root用户访问权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n- 重置密码\nALTER USER 'root'@'%' IDENTIFIED WITH `mysql_native_password` BY '123456';\nALTER USER 'root'@'localhost' IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 提交修改\nFLUSH PRIVILEGES;\n{%endnote%}","source":"_posts/2018-11-04-win10docker使用填坑.md","raw":"---\ntitle: win10docker使用填坑\ndate: 2018-11-04 13:17:09\ntags:\n- docker\n- wins10\ncategories:\n- docker\n---\n{%note info%}\n本文用以记录在`docker win10`环境使用中踩到的坑及解决方案。\n{%endnote%}\n\n<!--more-->\n\n## 问题一：docker修改配置或者镜像的存储位置后启动异常\n### *解决方案*：\n{%note warning%}\n- 移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑\n{%endnote%}\n***\n\n\n\n## 问题二：修改镜像存储位置\n### *解决方案*：\n{%note warning%}\n- 默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx\n- 修改：Hyper-V管理器**Hyper-v设置**虚拟硬盘修改路径\n{%endnote%}\n\n\n***\n\n## 问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\n### *解决方案*：\n{%note warning%}\n- 进入容器\ndocker exec -it mysql bash\n- 进入mysql\nmysql -u root -p\n- 创建root用户\n CREATE USER 'root'@'%' IDENTIFIED IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 设置root用户访问权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n- 重置密码\nALTER USER 'root'@'%' IDENTIFIED WITH `mysql_native_password` BY '123456';\nALTER USER 'root'@'localhost' IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 提交修改\nFLUSH PRIVILEGES;\n{%endnote%}","slug":"win10docker使用填坑","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6uz7000316p7xujqv6y3","content":"<div class=\"note info\"><p>本文用以记录在<code>docker win10</code>环境使用中踩到的坑及解决方案。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"><a href=\"#问题一：docker修改配置或者镜像的存储位置后启动异常\" class=\"headerlink\" title=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"></a>问题一：docker修改配置或者镜像的存储位置后启动异常</h2><h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑</li>\n</ul></div>\n<hr>\n<h2 id=\"问题二：修改镜像存储位置\"><a href=\"#问题二：修改镜像存储位置\" class=\"headerlink\" title=\"问题二：修改镜像存储位置\"></a>问题二：修改镜像存储位置</h2><h3 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx</li>\n<li>修改：Hyper-V管理器<strong>Hyper-v设置</strong>虚拟硬盘修改路径</li>\n</ul></div>\n<hr>\n<h2 id=\"问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\"><a href=\"#问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\" class=\"headerlink\" title=\"问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\"></a>问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client</h2><h3 id=\"解决方案：-2\"><a href=\"#解决方案：-2\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>进入容器<br>docker exec -it mysql bash</li>\n<li>进入mysql<br>mysql -u root -p</li>\n<li>创建root用户<br>CREATE USER ‘root‘@’%’ IDENTIFIED IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>设置root用户访问权限<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ WITH GRANT OPTION;</li>\n<li>重置密码<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>提交修改<br>FLUSH PRIVILEGES;</li>\n</ul></div>","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文用以记录在<code>docker win10</code>环境使用中踩到的坑及解决方案。</p></div>","more":"<h2 id=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"><a href=\"#问题一：docker修改配置或者镜像的存储位置后启动异常\" class=\"headerlink\" title=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"></a>问题一：docker修改配置或者镜像的存储位置后启动异常</h2><h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑</li>\n</ul></div>\n<hr>\n<h2 id=\"问题二：修改镜像存储位置\"><a href=\"#问题二：修改镜像存储位置\" class=\"headerlink\" title=\"问题二：修改镜像存储位置\"></a>问题二：修改镜像存储位置</h2><h3 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx</li>\n<li>修改：Hyper-V管理器<strong>Hyper-v设置</strong>虚拟硬盘修改路径</li>\n</ul></div>\n<hr>\n<h2 id=\"问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\"><a href=\"#问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\" class=\"headerlink\" title=\"问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\"></a>问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client</h2><h3 id=\"解决方案：-2\"><a href=\"#解决方案：-2\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>进入容器<br>docker exec -it mysql bash</li>\n<li>进入mysql<br>mysql -u root -p</li>\n<li>创建root用户<br>CREATE USER ‘root‘@’%’ IDENTIFIED IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>设置root用户访问权限<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ WITH GRANT OPTION;</li>\n<li>重置密码<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>提交修改<br>FLUSH PRIVILEGES;</li>\n</ul></div>"},{"title":"flask服务端推送","date":"2018-11-25T07:09:26.000Z","_content":"{%note info%}\n本文用以记录在`flask-sse`使用中踩到的坑及解决方案。\n{%endnote%}\n<!--more-->\n\n### 当前主流的服务端推送方案\n1. 客户端短连接轮询\n2. websocket\n3. Server Send Event（SSE）\n\n相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。\n在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。\n***\n\n### 使用过程中遇到的困难\n- **`flask-sse` redis连接释放问题**\n该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新`new EventSource`，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。\n唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生`GeneratorExit`异常\n因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：\n```python\n@stream_with_context\ndef generator():\n    for message in self.messages(channel=channel):\n        yield str(message)\n        self.redis.connection_pool.disconnect()\n```\n\t修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。\n\n\t`redis连接数查看`\n```\nredis-cli -a pwd -h *.*.*.* info | grep client\n```\n\n- **程序阻塞问题**\n由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。\n\n\t另外还有一点现象，当使用flask自带的http服务器进行多线程`threaded=True`调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次`最多`能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用`celery`。\n\n- **网关超时问题**\n网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。\n\t因此需要针对超时异常进行特殊处理。\n\t这里给出[nginx配置](https://github.com/BotBotMe/botbot-web/issues/2)\n```\t\nlocation /eventsource {\ninclude uwsgi_params;\nuwsgi_pass eventsource-botbot-backend;\nuwsgi_buffering off;\nchunked_transfer_encoding off;\nproxy_cache off;\naccess_log  /var/log/nginx/eventsource_botbot.access.log;\nerror_page 504 =200 @eventsource-close-graceful;\n}\n\nlocation @eventsource-close-graceful {\nadd_header Content-Type text/event-stream;\nreturn 200;\n}\n```\n\t`注意`每个nginx网关就需要配置\n\n***\n\n### 参考资料\n- [官方用例](https://github.com/singingwolfboy/flask-sse)","source":"_posts/2018-11-25-flask服务端推送.md","raw":"---\ntitle: flask服务端推送\ndate: 2018-11-25 15:09:26\ntags:\n- flask\n- sse\ncategories:\n- flask\n---\n{%note info%}\n本文用以记录在`flask-sse`使用中踩到的坑及解决方案。\n{%endnote%}\n<!--more-->\n\n### 当前主流的服务端推送方案\n1. 客户端短连接轮询\n2. websocket\n3. Server Send Event（SSE）\n\n相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。\n在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。\n***\n\n### 使用过程中遇到的困难\n- **`flask-sse` redis连接释放问题**\n该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新`new EventSource`，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。\n唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生`GeneratorExit`异常\n因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：\n```python\n@stream_with_context\ndef generator():\n    for message in self.messages(channel=channel):\n        yield str(message)\n        self.redis.connection_pool.disconnect()\n```\n\t修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。\n\n\t`redis连接数查看`\n```\nredis-cli -a pwd -h *.*.*.* info | grep client\n```\n\n- **程序阻塞问题**\n由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。\n\n\t另外还有一点现象，当使用flask自带的http服务器进行多线程`threaded=True`调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次`最多`能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用`celery`。\n\n- **网关超时问题**\n网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。\n\t因此需要针对超时异常进行特殊处理。\n\t这里给出[nginx配置](https://github.com/BotBotMe/botbot-web/issues/2)\n```\t\nlocation /eventsource {\ninclude uwsgi_params;\nuwsgi_pass eventsource-botbot-backend;\nuwsgi_buffering off;\nchunked_transfer_encoding off;\nproxy_cache off;\naccess_log  /var/log/nginx/eventsource_botbot.access.log;\nerror_page 504 =200 @eventsource-close-graceful;\n}\n\nlocation @eventsource-close-graceful {\nadd_header Content-Type text/event-stream;\nreturn 200;\n}\n```\n\t`注意`每个nginx网关就需要配置\n\n***\n\n### 参考资料\n- [官方用例](https://github.com/singingwolfboy/flask-sse)","slug":"flask服务端推送","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v1r000e16p71cqryryg","content":"<div class=\"note info\"><p>本文用以记录在<code>flask-sse</code>使用中踩到的坑及解决方案。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"当前主流的服务端推送方案\"><a href=\"#当前主流的服务端推送方案\" class=\"headerlink\" title=\"当前主流的服务端推送方案\"></a>当前主流的服务端推送方案</h3><ol>\n<li>客户端短连接轮询</li>\n<li>websocket</li>\n<li>Server Send Event（SSE）</li>\n</ol>\n<p>相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。<br>在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。</p>\n<hr>\n<h3 id=\"使用过程中遇到的困难\"><a href=\"#使用过程中遇到的困难\" class=\"headerlink\" title=\"使用过程中遇到的困难\"></a>使用过程中遇到的困难</h3><ul>\n<li><p><strong><code>flask-sse</code> redis连接释放问题</strong><br>该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新<code>new EventSource</code>，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。<br>唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生<code>GeneratorExit</code>异常<br>因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@stream_with_context</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> self.messages(channel=channel):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> str(message)</span><br><span class=\"line\">        self.redis.connection_pool.disconnect()</span><br></pre></td></tr></table></figure>\n<p>  修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。</p>\n<p>  <code>redis连接数查看</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -a pwd -h *.*.*.* info | grep client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>程序阻塞问题</strong><br>由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。</p>\n<p>  另外还有一点现象，当使用flask自带的http服务器进行多线程<code>threaded=True</code>调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次<code>最多</code>能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用<code>celery</code>。</p>\n</li>\n<li><p><strong>网关超时问题</strong><br>网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。<br>  因此需要针对超时异常进行特殊处理。<br>  这里给出<a href=\"https://github.com/BotBotMe/botbot-web/issues/2\" target=\"_blank\" rel=\"noopener\">nginx配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /eventsource &#123;</span><br><span class=\"line\">include uwsgi_params;</span><br><span class=\"line\">uwsgi_pass eventsource-botbot-backend;</span><br><span class=\"line\">uwsgi_buffering off;</span><br><span class=\"line\">chunked_transfer_encoding off;</span><br><span class=\"line\">proxy_cache off;</span><br><span class=\"line\">access_log  /var/log/nginx/eventsource_botbot.access.log;</span><br><span class=\"line\">error_page 504 =200 @eventsource-close-graceful;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location @eventsource-close-graceful &#123;</span><br><span class=\"line\">add_header Content-Type text/event-stream;</span><br><span class=\"line\">return 200;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <code>注意</code>每个nginx网关就需要配置</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/singingwolfboy/flask-sse\" target=\"_blank\" rel=\"noopener\">官方用例</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文用以记录在<code>flask-sse</code>使用中踩到的坑及解决方案。</p></div>","more":"<h3 id=\"当前主流的服务端推送方案\"><a href=\"#当前主流的服务端推送方案\" class=\"headerlink\" title=\"当前主流的服务端推送方案\"></a>当前主流的服务端推送方案</h3><ol>\n<li>客户端短连接轮询</li>\n<li>websocket</li>\n<li>Server Send Event（SSE）</li>\n</ol>\n<p>相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。<br>在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。</p>\n<hr>\n<h3 id=\"使用过程中遇到的困难\"><a href=\"#使用过程中遇到的困难\" class=\"headerlink\" title=\"使用过程中遇到的困难\"></a>使用过程中遇到的困难</h3><ul>\n<li><p><strong><code>flask-sse</code> redis连接释放问题</strong><br>该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新<code>new EventSource</code>，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。<br>唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生<code>GeneratorExit</code>异常<br>因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@stream_with_context</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> self.messages(channel=channel):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> str(message)</span><br><span class=\"line\">        self.redis.connection_pool.disconnect()</span><br></pre></td></tr></table></figure>\n<p>  修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。</p>\n<p>  <code>redis连接数查看</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -a pwd -h *.*.*.* info | grep client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>程序阻塞问题</strong><br>由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。</p>\n<p>  另外还有一点现象，当使用flask自带的http服务器进行多线程<code>threaded=True</code>调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次<code>最多</code>能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用<code>celery</code>。</p>\n</li>\n<li><p><strong>网关超时问题</strong><br>网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。<br>  因此需要针对超时异常进行特殊处理。<br>  这里给出<a href=\"https://github.com/BotBotMe/botbot-web/issues/2\" target=\"_blank\" rel=\"noopener\">nginx配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /eventsource &#123;</span><br><span class=\"line\">include uwsgi_params;</span><br><span class=\"line\">uwsgi_pass eventsource-botbot-backend;</span><br><span class=\"line\">uwsgi_buffering off;</span><br><span class=\"line\">chunked_transfer_encoding off;</span><br><span class=\"line\">proxy_cache off;</span><br><span class=\"line\">access_log  /var/log/nginx/eventsource_botbot.access.log;</span><br><span class=\"line\">error_page 504 =200 @eventsource-close-graceful;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location @eventsource-close-graceful &#123;</span><br><span class=\"line\">add_header Content-Type text/event-stream;</span><br><span class=\"line\">return 200;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <code>注意</code>每个nginx网关就需要配置</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/singingwolfboy/flask-sse\" target=\"_blank\" rel=\"noopener\">官方用例</a></li>\n</ul>"},{"title":"webserver异常-TooManyOpenFiles","date":"2019-03-10T09:32:36.000Z","_content":"\n\n### 问题现象：\n{%note warning%}\n- webserver服务不可用\n- 查询日志得知异常为\"... Too Many Open Files\"\n- 重启webserver后服务正常可用\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用nginx+gunicorn+flask搭建webserver的运行环境\n- 环境进程文件句柄使用数上线未设置过为1024\n- gunicorn max-connections=2048 workers=9\n{%endnote%}\n***\n\n### 问题分析：\n\n1. ulimit -n 设置过小\n  - 问题原因比较好定位，google一下大概就确定了\n  - 调大open files应该就可以了\n2. gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？\n\t- 找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，`gunicorn max-connections指单个workers`。\n\n***\n\n### 问题解决：\n- 根据性能测试调大open files，并对数据数值添加监控。\n\n***\n\n### 问题总结：\n- **linux open files**\n```\n\t1. 查看系统最大可打开文件数\n\t\tcat /proc/sys/fs/file-max\n\t2. 查看进程最大可打开文件数\n\t\tcat /etc/security/limits.conf\n\t3. 查看指定进程文件打开数\n\t\tlsof -p pid | wc -l \n\t4. 查看gunicorn fork出所有进程的文件打开数\n\t\tlsof -n|awk '{print $1}'|sort|uniq -c|sort -nr|grep gunicorn\n\t5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定\n```\n- **gunicorn**\n```\n\t1. work_connections指gunicorn单进程并发数\n\t2. 若gunicorn worker_connections < 当前并发数，请求至多会超时，而不会报连接文件句柄异常\n\t3、当worker_connections > 1 时 且程序可异步操作越久（sleep），gevent作用越明显\n```\n- **异常再次发生处理步骤**\n```\n\t1. ps -ef |grep gunicorn -> pid\n\t2. cat /proc/pid/limits.conf\n\t3. lsof -p pid |wc -l\n\t4. sudo vi  /etc/security/limits.conf\n\t\tasset soft nofile 10240\n\t\tasset hard nofile 10240\n\t5. restart program && cat /proc/pid/limits.conf\n```\n- **性能测试**\n\t1. 性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。","source":"_posts/2019-03-10-webserver异常-TooManyOpenFiles.md","raw":"---\ntitle: webserver异常-TooManyOpenFiles\ndate: 2019-03-10 17:32:36\ntags:\n- flask\n- 问题分析\n- linux\ncategories:\n- 问题分析\n---\n\n\n### 问题现象：\n{%note warning%}\n- webserver服务不可用\n- 查询日志得知异常为\"... Too Many Open Files\"\n- 重启webserver后服务正常可用\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用nginx+gunicorn+flask搭建webserver的运行环境\n- 环境进程文件句柄使用数上线未设置过为1024\n- gunicorn max-connections=2048 workers=9\n{%endnote%}\n***\n\n### 问题分析：\n\n1. ulimit -n 设置过小\n  - 问题原因比较好定位，google一下大概就确定了\n  - 调大open files应该就可以了\n2. gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？\n\t- 找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，`gunicorn max-connections指单个workers`。\n\n***\n\n### 问题解决：\n- 根据性能测试调大open files，并对数据数值添加监控。\n\n***\n\n### 问题总结：\n- **linux open files**\n```\n\t1. 查看系统最大可打开文件数\n\t\tcat /proc/sys/fs/file-max\n\t2. 查看进程最大可打开文件数\n\t\tcat /etc/security/limits.conf\n\t3. 查看指定进程文件打开数\n\t\tlsof -p pid | wc -l \n\t4. 查看gunicorn fork出所有进程的文件打开数\n\t\tlsof -n|awk '{print $1}'|sort|uniq -c|sort -nr|grep gunicorn\n\t5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定\n```\n- **gunicorn**\n```\n\t1. work_connections指gunicorn单进程并发数\n\t2. 若gunicorn worker_connections < 当前并发数，请求至多会超时，而不会报连接文件句柄异常\n\t3、当worker_connections > 1 时 且程序可异步操作越久（sleep），gevent作用越明显\n```\n- **异常再次发生处理步骤**\n```\n\t1. ps -ef |grep gunicorn -> pid\n\t2. cat /proc/pid/limits.conf\n\t3. lsof -p pid |wc -l\n\t4. sudo vi  /etc/security/limits.conf\n\t\tasset soft nofile 10240\n\t\tasset hard nofile 10240\n\t5. restart program && cat /proc/pid/limits.conf\n```\n- **性能测试**\n\t1. 性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。","slug":"webserver异常-TooManyOpenFiles","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v26000g16p7foddjk5r","content":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>webserver服务不可用</li>\n<li>查询日志得知异常为”… Too Many Open Files”</li>\n<li>重启webserver后服务正常可用</li>\n</ul></div>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用nginx+gunicorn+flask搭建webserver的运行环境</li>\n<li>环境进程文件句柄使用数上线未设置过为1024</li>\n<li>gunicorn max-connections=2048 workers=9</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li>ulimit -n 设置过小<ul>\n<li>问题原因比较好定位，google一下大概就确定了</li>\n<li>调大open files应该就可以了</li>\n</ul>\n</li>\n<li>gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？<ul>\n<li>找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，<code>gunicorn max-connections指单个workers</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>根据性能测试调大open files，并对数据数值添加监控。</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li><p><strong>linux open files</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统最大可打开文件数</span><br><span class=\"line\">\tcat /proc/sys/fs/file-max</span><br><span class=\"line\">2. 查看进程最大可打开文件数</span><br><span class=\"line\">\tcat /etc/security/limits.conf</span><br><span class=\"line\">3. 查看指定进程文件打开数</span><br><span class=\"line\">\tlsof -p pid | wc -l </span><br><span class=\"line\">4. 查看gunicorn fork出所有进程的文件打开数</span><br><span class=\"line\">\tlsof -n|awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -nr|grep gunicorn</span><br><span class=\"line\">5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>gunicorn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. work_connections指gunicorn单进程并发数</span><br><span class=\"line\">2. 若gunicorn worker_connections &lt; 当前并发数，请求至多会超时，而不会报连接文件句柄异常</span><br><span class=\"line\">3、当worker_connections &gt; 1 时 且程序可异步操作越久（sleep），gevent作用越明显</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异常再次发生处理步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ps -ef |grep gunicorn -&gt; pid</span><br><span class=\"line\">2. cat /proc/pid/limits.conf</span><br><span class=\"line\">3. lsof -p pid |wc -l</span><br><span class=\"line\">4. sudo vi  /etc/security/limits.conf</span><br><span class=\"line\">\tasset soft nofile 10240</span><br><span class=\"line\">\tasset hard nofile 10240</span><br><span class=\"line\">5. restart program &amp;&amp; cat /proc/pid/limits.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>性能测试</strong></p>\n<ol>\n<li>性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>webserver服务不可用</li>\n<li>查询日志得知异常为”… Too Many Open Files”</li>\n<li>重启webserver后服务正常可用</li>\n</ul></div>","more":"<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用nginx+gunicorn+flask搭建webserver的运行环境</li>\n<li>环境进程文件句柄使用数上线未设置过为1024</li>\n<li>gunicorn max-connections=2048 workers=9</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li>ulimit -n 设置过小<ul>\n<li>问题原因比较好定位，google一下大概就确定了</li>\n<li>调大open files应该就可以了</li>\n</ul>\n</li>\n<li>gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？<ul>\n<li>找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，<code>gunicorn max-connections指单个workers</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>根据性能测试调大open files，并对数据数值添加监控。</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li><p><strong>linux open files</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统最大可打开文件数</span><br><span class=\"line\">\tcat /proc/sys/fs/file-max</span><br><span class=\"line\">2. 查看进程最大可打开文件数</span><br><span class=\"line\">\tcat /etc/security/limits.conf</span><br><span class=\"line\">3. 查看指定进程文件打开数</span><br><span class=\"line\">\tlsof -p pid | wc -l </span><br><span class=\"line\">4. 查看gunicorn fork出所有进程的文件打开数</span><br><span class=\"line\">\tlsof -n|awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -nr|grep gunicorn</span><br><span class=\"line\">5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>gunicorn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. work_connections指gunicorn单进程并发数</span><br><span class=\"line\">2. 若gunicorn worker_connections &lt; 当前并发数，请求至多会超时，而不会报连接文件句柄异常</span><br><span class=\"line\">3、当worker_connections &gt; 1 时 且程序可异步操作越久（sleep），gevent作用越明显</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异常再次发生处理步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ps -ef |grep gunicorn -&gt; pid</span><br><span class=\"line\">2. cat /proc/pid/limits.conf</span><br><span class=\"line\">3. lsof -p pid |wc -l</span><br><span class=\"line\">4. sudo vi  /etc/security/limits.conf</span><br><span class=\"line\">\tasset soft nofile 10240</span><br><span class=\"line\">\tasset hard nofile 10240</span><br><span class=\"line\">5. restart program &amp;&amp; cat /proc/pid/limits.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>性能测试</strong></p>\n<ol>\n<li>性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。</li>\n</ol>\n</li>\n</ul>"},{"title":"flask-caching源码浅析","date":"2019-07-14T11:49:26.000Z","_content":"\n{%note info%}\nflask-caching源码浅析。\n{%endnote%}\n<!--more-->\n\n## 简介\n- flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。\n- flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：\n\t- simple 程序内部缓存\n\t- filesystem 系统文件缓存\n\t- redis\n\t- redissentinel\n\t- uwsgi\n\t- memcached\n\t- gaememcached\n\t- saslmemcached\n\t- spreadsaslmemcached\n\n## 简单使用\n```python\nfrom flask_caching import Cache\ncache = Cache()\n\nconfig = {\"CACHE_TYPE\": \"redis\", \"CACHE_REDIS_URL\": app.config[\"CACHE_REDIS_URL\"]}\n    cache.init_app(app, config=config)\n\n@app.route('/cache_test/<int:id>')\n@cache.cached(timeout=60 * 5)\ndef cache_test(id):\n    from flask import request\n    got_data = request.get_json()\n    import time\n\n    return f\"{got_data}.{id}.{time.time()}\"\n\n@cache.memoize(timeout=60 * 5)\ndef f_cache(a):\n    return a\n\n@app.route('/cache_test2/<int:id>')\ndef cache_test2(id):\n    return f\"{f_cache(id)}\"\n\n```\n\n\n## cache memoize源码解析\n### **cached**\n\n```python\n    def cached(\n        self,\n        timeout=None,\n        key_prefix=\"view/%s\",\n        unless=None,\n        forced_update=None,\n        response_filter=None,\n        query_string=False,\n        hash_method=hashlib.md5,\n    ):\n        \"\"\"...\"\"\"\n\n        def decorator(f):\n            @functools.wraps(f)\n            def decorated_function(*args, **kwargs):...\n\n                if not found:\n                    rv = f(*args, **kwargs)\n\n                    if response_filter is None or response_filter(rv):\n                        try:\n                            self.cache.set(\n                                cache_key,\n                                rv,\n                                timeout=decorated_function.cache_timeout,\n                            )\n                        except Exception:\n                            if self.app.debug:\n                                raise\n                            logger.exception(\n                                \"Exception possibly due to cache backend.\"\n                            )\n                return rv\n\n            def make_cache_key(*args, **kwargs):...\n\n            def _make_cache_key_query_string():...\n\n            def _make_cache_key(args, kwargs, use_request):...\n\n            decorated_function.uncached = f\n            decorated_function.cache_timeout = timeout\n            decorated_function.make_cache_key = make_cache_key\n\n            return decorated_function\n\n        return decorator\n```\n\n\n- cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：\n\t- timeout用于指定缓存失效的时间，设置0或-1则不失效\n\t- unless是一个函数，用于判断是否需要跳过缓存，可自定义实现\n\t\t\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n\n# ```\n\n- 默认情况下进入逻辑\"elif \"%s\" in key_prefix:\", 因此cached缓存只与requesturl相关，与视图函数的传参无关，`这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key`，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。\n\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n```\n- 另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。\n\n### **memoize**\n- memoize相较于cached的区别\n\t- cache_key实现不同，memoize对key进行了加密\n\t- 针对普通函数缓存结果使用\n\t- 支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现\n\n## 总结-如何写一个缓存框架\n从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：`判断是否跳过缓存，生成查询key，获取缓存数据`。\n我们如果要实现缓存框架，大体需要考虑一下几方面：\n- 支持使用不同的存储实例，**抽象缓存对象接口**，如`get，has，set`\n- 支持区分参数缓存\n- 支持缓存时效性\n- 支持缓存数据加密\n- 如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理\n\n\n## 使用缓存的注意事项（待补充）\n- 缓存穿透\n- 缓存雪崩\n- 缓存集群","source":"_posts/2019-07-14-flask-caching源码浅析.md","raw":"---\ntitle: flask-caching源码浅析\ndate: 2019-07-14 19:49:26\ntags:\n- flask\n- python\n- 源码浅析\ncategories:\n---\n\n{%note info%}\nflask-caching源码浅析。\n{%endnote%}\n<!--more-->\n\n## 简介\n- flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。\n- flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：\n\t- simple 程序内部缓存\n\t- filesystem 系统文件缓存\n\t- redis\n\t- redissentinel\n\t- uwsgi\n\t- memcached\n\t- gaememcached\n\t- saslmemcached\n\t- spreadsaslmemcached\n\n## 简单使用\n```python\nfrom flask_caching import Cache\ncache = Cache()\n\nconfig = {\"CACHE_TYPE\": \"redis\", \"CACHE_REDIS_URL\": app.config[\"CACHE_REDIS_URL\"]}\n    cache.init_app(app, config=config)\n\n@app.route('/cache_test/<int:id>')\n@cache.cached(timeout=60 * 5)\ndef cache_test(id):\n    from flask import request\n    got_data = request.get_json()\n    import time\n\n    return f\"{got_data}.{id}.{time.time()}\"\n\n@cache.memoize(timeout=60 * 5)\ndef f_cache(a):\n    return a\n\n@app.route('/cache_test2/<int:id>')\ndef cache_test2(id):\n    return f\"{f_cache(id)}\"\n\n```\n\n\n## cache memoize源码解析\n### **cached**\n\n```python\n    def cached(\n        self,\n        timeout=None,\n        key_prefix=\"view/%s\",\n        unless=None,\n        forced_update=None,\n        response_filter=None,\n        query_string=False,\n        hash_method=hashlib.md5,\n    ):\n        \"\"\"...\"\"\"\n\n        def decorator(f):\n            @functools.wraps(f)\n            def decorated_function(*args, **kwargs):...\n\n                if not found:\n                    rv = f(*args, **kwargs)\n\n                    if response_filter is None or response_filter(rv):\n                        try:\n                            self.cache.set(\n                                cache_key,\n                                rv,\n                                timeout=decorated_function.cache_timeout,\n                            )\n                        except Exception:\n                            if self.app.debug:\n                                raise\n                            logger.exception(\n                                \"Exception possibly due to cache backend.\"\n                            )\n                return rv\n\n            def make_cache_key(*args, **kwargs):...\n\n            def _make_cache_key_query_string():...\n\n            def _make_cache_key(args, kwargs, use_request):...\n\n            decorated_function.uncached = f\n            decorated_function.cache_timeout = timeout\n            decorated_function.make_cache_key = make_cache_key\n\n            return decorated_function\n\n        return decorator\n```\n\n\n- cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：\n\t- timeout用于指定缓存失效的时间，设置0或-1则不失效\n\t- unless是一个函数，用于判断是否需要跳过缓存，可自定义实现\n\t\t\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n\n# ```\n\n- 默认情况下进入逻辑\"elif \"%s\" in key_prefix:\", 因此cached缓存只与requesturl相关，与视图函数的传参无关，`这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key`，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。\n\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n```\n- 另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。\n\n### **memoize**\n- memoize相较于cached的区别\n\t- cache_key实现不同，memoize对key进行了加密\n\t- 针对普通函数缓存结果使用\n\t- 支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现\n\n## 总结-如何写一个缓存框架\n从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：`判断是否跳过缓存，生成查询key，获取缓存数据`。\n我们如果要实现缓存框架，大体需要考虑一下几方面：\n- 支持使用不同的存储实例，**抽象缓存对象接口**，如`get，has，set`\n- 支持区分参数缓存\n- 支持缓存时效性\n- 支持缓存数据加密\n- 如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理\n\n\n## 使用缓存的注意事项（待补充）\n- 缓存穿透\n- 缓存雪崩\n- 缓存集群","slug":"flask-caching源码浅析","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v2h000k16p7e7hj69si","content":"<div class=\"note info\"><p>flask-caching源码浅析。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。</li>\n<li>flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：<ul>\n<li>simple 程序内部缓存</li>\n<li>filesystem 系统文件缓存</li>\n<li>redis</li>\n<li>redissentinel</li>\n<li>uwsgi</li>\n<li>memcached</li>\n<li>gaememcached</li>\n<li>saslmemcached</li>\n<li>spreadsaslmemcached</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_caching <span class=\"keyword\">import</span> Cache</span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;<span class=\"string\">\"CACHE_TYPE\"</span>: <span class=\"string\">\"redis\"</span>, <span class=\"string\">\"CACHE_REDIS_URL\"</span>: app.config[<span class=\"string\">\"CACHE_REDIS_URL\"</span>]&#125;</span><br><span class=\"line\">    cache.init_app(app, config=config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"meta\">@cache.cached(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\">    got_data = request.get_json()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;got_data&#125;</span>.<span class=\"subst\">&#123;id&#125;</span>.<span class=\"subst\">&#123;time.time()&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cache.memoize(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_cache</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test2/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test2</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;f_cache(id)&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"cache-memoize源码解析\"><a href=\"#cache-memoize源码解析\" class=\"headerlink\" title=\"cache memoize源码解析\"></a>cache memoize源码解析</h2><h3 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a><strong>cached</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cached</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    timeout=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key_prefix=<span class=\"string\">\"view/%s\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    unless=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    forced_update=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    response_filter=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    query_string=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    hash_method=hashlib.md5,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"...\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(f)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated_function</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">                rv = f(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> response_filter <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> response_filter(rv):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        self.cache.set(</span><br><span class=\"line\">                            cache_key,</span><br><span class=\"line\">                            rv,</span><br><span class=\"line\">                            timeout=decorated_function.cache_timeout,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> self.app.debug:</span><br><span class=\"line\">                            <span class=\"keyword\">raise</span></span><br><span class=\"line\">                        logger.exception(</span><br><span class=\"line\">                            <span class=\"string\">\"Exception possibly due to cache backend.\"</span></span><br><span class=\"line\">                        )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_cache_key</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key_query_string</span><span class=\"params\">()</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        decorated_function.uncached = f</span><br><span class=\"line\">        decorated_function.cache_timeout = timeout</span><br><span class=\"line\">        decorated_function.make_cache_key = make_cache_key</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：<ul>\n<li>timeout用于指定缓存失效的时间，设置0或-1则不失效</li>\n<li>unless是一个函数，用于判断是否需要跳过缓存，可自定义实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下进入逻辑”elif “%s” in key_prefix:”, 因此cached缓存只与requesturl相关，与视图函数的传参无关，<code>这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key</code>，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。</li>\n</ul>\n<h3 id=\"memoize\"><a href=\"#memoize\" class=\"headerlink\" title=\"memoize\"></a><strong>memoize</strong></h3><ul>\n<li>memoize相较于cached的区别<ul>\n<li>cache_key实现不同，memoize对key进行了加密</li>\n<li>针对普通函数缓存结果使用</li>\n<li>支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结-如何写一个缓存框架\"><a href=\"#总结-如何写一个缓存框架\" class=\"headerlink\" title=\"总结-如何写一个缓存框架\"></a>总结-如何写一个缓存框架</h2><p>从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：<code>判断是否跳过缓存，生成查询key，获取缓存数据</code>。<br>我们如果要实现缓存框架，大体需要考虑一下几方面：</p>\n<ul>\n<li>支持使用不同的存储实例，<strong>抽象缓存对象接口</strong>，如<code>get，has，set</code></li>\n<li>支持区分参数缓存</li>\n<li>支持缓存时效性</li>\n<li>支持缓存数据加密</li>\n<li>如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理</li>\n</ul>\n<h2 id=\"使用缓存的注意事项（待补充）\"><a href=\"#使用缓存的注意事项（待补充）\" class=\"headerlink\" title=\"使用缓存的注意事项（待补充）\"></a>使用缓存的注意事项（待补充）</h2><ul>\n<li>缓存穿透</li>\n<li>缓存雪崩</li>\n<li>缓存集群</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>flask-caching源码浅析。</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。</li>\n<li>flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：<ul>\n<li>simple 程序内部缓存</li>\n<li>filesystem 系统文件缓存</li>\n<li>redis</li>\n<li>redissentinel</li>\n<li>uwsgi</li>\n<li>memcached</li>\n<li>gaememcached</li>\n<li>saslmemcached</li>\n<li>spreadsaslmemcached</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_caching <span class=\"keyword\">import</span> Cache</span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;<span class=\"string\">\"CACHE_TYPE\"</span>: <span class=\"string\">\"redis\"</span>, <span class=\"string\">\"CACHE_REDIS_URL\"</span>: app.config[<span class=\"string\">\"CACHE_REDIS_URL\"</span>]&#125;</span><br><span class=\"line\">    cache.init_app(app, config=config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"meta\">@cache.cached(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\">    got_data = request.get_json()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;got_data&#125;</span>.<span class=\"subst\">&#123;id&#125;</span>.<span class=\"subst\">&#123;time.time()&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cache.memoize(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_cache</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test2/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test2</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;f_cache(id)&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"cache-memoize源码解析\"><a href=\"#cache-memoize源码解析\" class=\"headerlink\" title=\"cache memoize源码解析\"></a>cache memoize源码解析</h2><h3 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a><strong>cached</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cached</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    timeout=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key_prefix=<span class=\"string\">\"view/%s\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    unless=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    forced_update=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    response_filter=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    query_string=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    hash_method=hashlib.md5,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"...\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(f)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated_function</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">                rv = f(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> response_filter <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> response_filter(rv):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        self.cache.set(</span><br><span class=\"line\">                            cache_key,</span><br><span class=\"line\">                            rv,</span><br><span class=\"line\">                            timeout=decorated_function.cache_timeout,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> self.app.debug:</span><br><span class=\"line\">                            <span class=\"keyword\">raise</span></span><br><span class=\"line\">                        logger.exception(</span><br><span class=\"line\">                            <span class=\"string\">\"Exception possibly due to cache backend.\"</span></span><br><span class=\"line\">                        )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_cache_key</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key_query_string</span><span class=\"params\">()</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        decorated_function.uncached = f</span><br><span class=\"line\">        decorated_function.cache_timeout = timeout</span><br><span class=\"line\">        decorated_function.make_cache_key = make_cache_key</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：<ul>\n<li>timeout用于指定缓存失效的时间，设置0或-1则不失效</li>\n<li>unless是一个函数，用于判断是否需要跳过缓存，可自定义实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下进入逻辑”elif “%s” in key_prefix:”, 因此cached缓存只与requesturl相关，与视图函数的传参无关，<code>这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key</code>，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。</li>\n</ul>\n<h3 id=\"memoize\"><a href=\"#memoize\" class=\"headerlink\" title=\"memoize\"></a><strong>memoize</strong></h3><ul>\n<li>memoize相较于cached的区别<ul>\n<li>cache_key实现不同，memoize对key进行了加密</li>\n<li>针对普通函数缓存结果使用</li>\n<li>支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结-如何写一个缓存框架\"><a href=\"#总结-如何写一个缓存框架\" class=\"headerlink\" title=\"总结-如何写一个缓存框架\"></a>总结-如何写一个缓存框架</h2><p>从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：<code>判断是否跳过缓存，生成查询key，获取缓存数据</code>。<br>我们如果要实现缓存框架，大体需要考虑一下几方面：</p>\n<ul>\n<li>支持使用不同的存储实例，<strong>抽象缓存对象接口</strong>，如<code>get，has，set</code></li>\n<li>支持区分参数缓存</li>\n<li>支持缓存时效性</li>\n<li>支持缓存数据加密</li>\n<li>如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理</li>\n</ul>\n<h2 id=\"使用缓存的注意事项（待补充）\"><a href=\"#使用缓存的注意事项（待补充）\" class=\"headerlink\" title=\"使用缓存的注意事项（待补充）\"></a>使用缓存的注意事项（待补充）</h2><ul>\n<li>缓存穿透</li>\n<li>缓存雪崩</li>\n<li>缓存集群</li>\n</ul>"},{"title":"兼职运维之ulimit","date":"2019-12-27T13:09:45.000Z","_content":"\n\n{%note info%}\n今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。\n{%endnote%}\n<!--more-->\n\n## 现象&定位\n- 部署完成后，收到测试人员反馈业务运行异常\n- 排查后，定位为livy向spark提交任务时执行失败\nlivy日志如下：\n![spark异常.jpg](https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg)\n\n- 初看有点懵，将关键字`spark`和`OpenBLAS blas_thread_init`提交google，结果大多匹配python运行时相关异常，\n![spark异常google.jpg](https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg)\n\n- 仔细看不难发现`RLIMIT_NPROC 4096 current, 514476 max`\n- 由此自然联想到`ulimit -u`，一查发现果然只有4096\n\n## 解决方案\n- 解决方案也简单，设置系统最大允许进程数\n\n**永久生效：**\n\n```\n/etc/security/limits.d/90-nproc.conf\n或\n/etc/security/limits.conf\n在末行加入\n* hard nproc 1000000\n* soft nproc 1000000\n\n```\n**当前session生效：**\n\n```\nulimit -u 1000000\n```\n- 重新测试，问题果然修复\n\n\n## 总结\n- 问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质\n- 该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧\n","source":"_posts/2019-12-27-兼职运维之ulimit-u.md","raw":"---\ntitle: 兼职运维之ulimit\ndate: 2019-12-27 21:09:45\ntags:\n- 兼职运维\ncategories:\n- linux\n---\n\n\n{%note info%}\n今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。\n{%endnote%}\n<!--more-->\n\n## 现象&定位\n- 部署完成后，收到测试人员反馈业务运行异常\n- 排查后，定位为livy向spark提交任务时执行失败\nlivy日志如下：\n![spark异常.jpg](https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg)\n\n- 初看有点懵，将关键字`spark`和`OpenBLAS blas_thread_init`提交google，结果大多匹配python运行时相关异常，\n![spark异常google.jpg](https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg)\n\n- 仔细看不难发现`RLIMIT_NPROC 4096 current, 514476 max`\n- 由此自然联想到`ulimit -u`，一查发现果然只有4096\n\n## 解决方案\n- 解决方案也简单，设置系统最大允许进程数\n\n**永久生效：**\n\n```\n/etc/security/limits.d/90-nproc.conf\n或\n/etc/security/limits.conf\n在末行加入\n* hard nproc 1000000\n* soft nproc 1000000\n\n```\n**当前session生效：**\n\n```\nulimit -u 1000000\n```\n- 重新测试，问题果然修复\n\n\n## 总结\n- 问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质\n- 该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧\n","slug":"兼职运维之ulimit-u","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v33000l16p72vtz83un","content":"<div class=\"note info\"><p>今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"现象-amp-定位\"><a href=\"#现象-amp-定位\" class=\"headerlink\" title=\"现象&amp;定位\"></a>现象&amp;定位</h2><ul>\n<li>部署完成后，收到测试人员反馈业务运行异常</li>\n<li><p>排查后，定位为livy向spark提交任务时执行失败<br>livy日志如下：<br><img src=\"https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg\" alt=\"spark异常.jpg\"></p>\n</li>\n<li><p>初看有点懵，将关键字<code>spark</code>和<code>OpenBLAS blas_thread_init</code>提交google，结果大多匹配python运行时相关异常，<br><img src=\"https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg\" alt=\"spark异常google.jpg\"></p>\n</li>\n<li><p>仔细看不难发现<code>RLIMIT_NPROC 4096 current, 514476 max</code></p>\n</li>\n<li>由此自然联想到<code>ulimit -u</code>，一查发现果然只有4096</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>解决方案也简单，设置系统最大允许进程数</li>\n</ul>\n<p><strong>永久生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">或</span><br><span class=\"line\">/etc/security/limits.conf</span><br><span class=\"line\">在末行加入</span><br><span class=\"line\">* hard nproc 1000000</span><br><span class=\"line\">* soft nproc 1000000</span><br></pre></td></tr></table></figure>\n<p><strong>当前session生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -u 1000000</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新测试，问题果然修复</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质</li>\n<li>该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。</p></div>","more":"<h2 id=\"现象-amp-定位\"><a href=\"#现象-amp-定位\" class=\"headerlink\" title=\"现象&amp;定位\"></a>现象&amp;定位</h2><ul>\n<li>部署完成后，收到测试人员反馈业务运行异常</li>\n<li><p>排查后，定位为livy向spark提交任务时执行失败<br>livy日志如下：<br><img src=\"https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg\" alt=\"spark异常.jpg\"></p>\n</li>\n<li><p>初看有点懵，将关键字<code>spark</code>和<code>OpenBLAS blas_thread_init</code>提交google，结果大多匹配python运行时相关异常，<br><img src=\"https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg\" alt=\"spark异常google.jpg\"></p>\n</li>\n<li><p>仔细看不难发现<code>RLIMIT_NPROC 4096 current, 514476 max</code></p>\n</li>\n<li>由此自然联想到<code>ulimit -u</code>，一查发现果然只有4096</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>解决方案也简单，设置系统最大允许进程数</li>\n</ul>\n<p><strong>永久生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">或</span><br><span class=\"line\">/etc/security/limits.conf</span><br><span class=\"line\">在末行加入</span><br><span class=\"line\">* hard nproc 1000000</span><br><span class=\"line\">* soft nproc 1000000</span><br></pre></td></tr></table></figure>\n<p><strong>当前session生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -u 1000000</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新测试，问题果然修复</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质</li>\n<li>该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧</li>\n</ul>"},{"title":"sqlalchemy数据库连接数异常","date":"2019-01-22T13:03:19.000Z","_content":"\n### 问题现象：\n{%note warning%}\n- web端调用flask接口阻塞，最终超时返回系统异常\n- 查询日志得知具体异常为超出数据库最大连接数\n- 重新flask webserver后数据库连接数正常释放\n- 持续使用系统一段时间后数据库连接数再次封顶\n- 环境操作用户寥寥无几\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用flask搭建webserver的运行环境\n- 使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30\n- mysql设置最大连接数200\n- 宿主机CPU 2核心\n- 通过进程数2*2+1 = 5\n{%endnote%}\n***\n\n### 问题分析：\n\n1. 怀疑对flask-sqlalchemy使用不当导致\n  - 问题原因明显是数据库连接使用后没有释放\n  - 数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放\n  - flask-sqlalchemy的连接释放由`teardown_appcontext`钩子统一处理\n  ```python\n\t@app.teardown_appcontext\n\tdef shutdown_session(response_or_exc):\n\t    if app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']:\n\t        if response_or_exc is None:\n\t            self.session.commit()\n\t\n\t    self.session.remove()\n\t    return response_or_exc\n\t```\n2. mysql数据库连接超出首因\n\t- (2\\*2+1) * 64 > 200 \n\t- 困惑连接数回收已经指定`SQLALCHEMY_POOL_RECYCLE=30`但未生效\n\t- 对`SQLALCHEMY_POOL_RECYCLE`理解错误，该项真实含义为queue_pool可用连接的回收时间\n\t- 当前问题为连接未释放，顾与`SQLALCHEMY_POOL_RECYCLE`无关\n3. 若(2\\*2+1) * 64 < 200 会不会好点？\n\t- 异常改为`QueuePool limit of size <x> overflow <y> reached, connection timed out, timeout <z>\n`\n\t- 达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”\n\t\n**分析到这里仍旧没有头绪...**\n\n***\n\n### 问题排查：\n- **查询数据库连接数** \n  ```shell\n\tSELECT * FROM INFORMATION_SCHEMA. PROCESSLIST\n\t```\n- **linux下查询连接端口对应的进程**\n\t```shell\n\tlsof -i:48057|grep celery|awk   '{print$2}'|xargs -I{} echo 'ps -ef|grep {}'|bash\n\t```\n- **windows下查询连接端口对应的进程**\n  ```shell\n\tnetstat -ano|findstr \"8080\"\n\ttasklist|findstr [进程号]\n\t```\n***\n\n### 问题解决：\n- 问题调试发现单接口调用连接数并未按预期增长\n- 通过页面使用操作连接数会不规则的增长\n- 逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1\n- 分析sse仅操作了redis，并未存在对mysql的相关操作\n- 调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库\n- 到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈\n***\n\n### 问题总结：\n- 最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题\n***\n","source":"_posts/2019-01-22-sqlalchemy数据库连接数异常.md","raw":"---\ntitle: sqlalchemy数据库连接数异常\ndate: 2019-01-22 21:03:19\ntags:\n- mysql\n- 问题分析\ncategories:\n- 问题分析\n---\n\n### 问题现象：\n{%note warning%}\n- web端调用flask接口阻塞，最终超时返回系统异常\n- 查询日志得知具体异常为超出数据库最大连接数\n- 重新flask webserver后数据库连接数正常释放\n- 持续使用系统一段时间后数据库连接数再次封顶\n- 环境操作用户寥寥无几\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用flask搭建webserver的运行环境\n- 使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30\n- mysql设置最大连接数200\n- 宿主机CPU 2核心\n- 通过进程数2*2+1 = 5\n{%endnote%}\n***\n\n### 问题分析：\n\n1. 怀疑对flask-sqlalchemy使用不当导致\n  - 问题原因明显是数据库连接使用后没有释放\n  - 数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放\n  - flask-sqlalchemy的连接释放由`teardown_appcontext`钩子统一处理\n  ```python\n\t@app.teardown_appcontext\n\tdef shutdown_session(response_or_exc):\n\t    if app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']:\n\t        if response_or_exc is None:\n\t            self.session.commit()\n\t\n\t    self.session.remove()\n\t    return response_or_exc\n\t```\n2. mysql数据库连接超出首因\n\t- (2\\*2+1) * 64 > 200 \n\t- 困惑连接数回收已经指定`SQLALCHEMY_POOL_RECYCLE=30`但未生效\n\t- 对`SQLALCHEMY_POOL_RECYCLE`理解错误，该项真实含义为queue_pool可用连接的回收时间\n\t- 当前问题为连接未释放，顾与`SQLALCHEMY_POOL_RECYCLE`无关\n3. 若(2\\*2+1) * 64 < 200 会不会好点？\n\t- 异常改为`QueuePool limit of size <x> overflow <y> reached, connection timed out, timeout <z>\n`\n\t- 达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”\n\t\n**分析到这里仍旧没有头绪...**\n\n***\n\n### 问题排查：\n- **查询数据库连接数** \n  ```shell\n\tSELECT * FROM INFORMATION_SCHEMA. PROCESSLIST\n\t```\n- **linux下查询连接端口对应的进程**\n\t```shell\n\tlsof -i:48057|grep celery|awk   '{print$2}'|xargs -I{} echo 'ps -ef|grep {}'|bash\n\t```\n- **windows下查询连接端口对应的进程**\n  ```shell\n\tnetstat -ano|findstr \"8080\"\n\ttasklist|findstr [进程号]\n\t```\n***\n\n### 问题解决：\n- 问题调试发现单接口调用连接数并未按预期增长\n- 通过页面使用操作连接数会不规则的增长\n- 逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1\n- 分析sse仅操作了redis，并未存在对mysql的相关操作\n- 调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库\n- 到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈\n***\n\n### 问题总结：\n- 最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题\n***\n","slug":"sqlalchemy数据库连接数异常","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v3k000m16p7nlp2pud0","content":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>web端调用flask接口阻塞，最终超时返回系统异常</li>\n<li>查询日志得知具体异常为超出数据库最大连接数</li>\n<li>重新flask webserver后数据库连接数正常释放</li>\n<li>持续使用系统一段时间后数据库连接数再次封顶</li>\n<li>环境操作用户寥寥无几</li>\n</ul></div>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用flask搭建webserver的运行环境</li>\n<li>使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30</li>\n<li>mysql设置最大连接数200</li>\n<li>宿主机CPU 2核心</li>\n<li>通过进程数2*2+1 = 5</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li><p>怀疑对flask-sqlalchemy使用不当导致</p>\n<ul>\n<li>问题原因明显是数据库连接使用后没有释放</li>\n<li>数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放</li>\n<li>flask-sqlalchemy的连接释放由<code>teardown_appcontext</code>钩子统一处理<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_appcontext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shutdown_session</span><span class=\"params\">(response_or_exc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> app.config[<span class=\"string\">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> response_or_exc <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    self.session.remove()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response_or_exc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mysql数据库连接超出首因</p>\n<ul>\n<li>(2*2+1) * 64 &gt; 200 </li>\n<li>困惑连接数回收已经指定<code>SQLALCHEMY_POOL_RECYCLE=30</code>但未生效</li>\n<li>对<code>SQLALCHEMY_POOL_RECYCLE</code>理解错误，该项真实含义为queue_pool可用连接的回收时间</li>\n<li>当前问题为连接未释放，顾与<code>SQLALCHEMY_POOL_RECYCLE</code>无关</li>\n</ul>\n</li>\n<li>若(2*2+1) * 64 &lt; 200 会不会好点？<ul>\n<li>异常改为<code>QueuePool limit of size &lt;x&gt; overflow &lt;y&gt; reached, connection timed out, timeout &lt;z&gt;</code></li>\n<li>达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”</li>\n</ul>\n</li>\n</ol>\n<p><strong>分析到这里仍旧没有头绪…</strong></p>\n<hr>\n<h3 id=\"问题排查：\"><a href=\"#问题排查：\" class=\"headerlink\" title=\"问题排查：\"></a>问题排查：</h3><ul>\n<li><p><strong>查询数据库连接数</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA. PROCESSLIST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>linux下查询连接端口对应的进程</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:48057|grep celery|awk   '&#123;print$2&#125;'|xargs -I&#123;&#125; echo 'ps -ef|grep &#123;&#125;'|bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>windows下查询连接端口对应的进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr \"8080\"</span><br><span class=\"line\">tasklist|findstr [进程号]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>问题调试发现单接口调用连接数并未按预期增长</li>\n<li>通过页面使用操作连接数会不规则的增长</li>\n<li>逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1</li>\n<li>分析sse仅操作了redis，并未存在对mysql的相关操作</li>\n<li>调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库</li>\n<li>到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li>最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>web端调用flask接口阻塞，最终超时返回系统异常</li>\n<li>查询日志得知具体异常为超出数据库最大连接数</li>\n<li>重新flask webserver后数据库连接数正常释放</li>\n<li>持续使用系统一段时间后数据库连接数再次封顶</li>\n<li>环境操作用户寥寥无几</li>\n</ul></div>","more":"<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用flask搭建webserver的运行环境</li>\n<li>使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30</li>\n<li>mysql设置最大连接数200</li>\n<li>宿主机CPU 2核心</li>\n<li>通过进程数2*2+1 = 5</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li><p>怀疑对flask-sqlalchemy使用不当导致</p>\n<ul>\n<li>问题原因明显是数据库连接使用后没有释放</li>\n<li>数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放</li>\n<li>flask-sqlalchemy的连接释放由<code>teardown_appcontext</code>钩子统一处理<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_appcontext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shutdown_session</span><span class=\"params\">(response_or_exc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> app.config[<span class=\"string\">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> response_or_exc <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    self.session.remove()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response_or_exc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mysql数据库连接超出首因</p>\n<ul>\n<li>(2*2+1) * 64 &gt; 200 </li>\n<li>困惑连接数回收已经指定<code>SQLALCHEMY_POOL_RECYCLE=30</code>但未生效</li>\n<li>对<code>SQLALCHEMY_POOL_RECYCLE</code>理解错误，该项真实含义为queue_pool可用连接的回收时间</li>\n<li>当前问题为连接未释放，顾与<code>SQLALCHEMY_POOL_RECYCLE</code>无关</li>\n</ul>\n</li>\n<li>若(2*2+1) * 64 &lt; 200 会不会好点？<ul>\n<li>异常改为<code>QueuePool limit of size &lt;x&gt; overflow &lt;y&gt; reached, connection timed out, timeout &lt;z&gt;</code></li>\n<li>达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”</li>\n</ul>\n</li>\n</ol>\n<p><strong>分析到这里仍旧没有头绪…</strong></p>\n<hr>\n<h3 id=\"问题排查：\"><a href=\"#问题排查：\" class=\"headerlink\" title=\"问题排查：\"></a>问题排查：</h3><ul>\n<li><p><strong>查询数据库连接数</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA. PROCESSLIST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>linux下查询连接端口对应的进程</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:48057|grep celery|awk   '&#123;print$2&#125;'|xargs -I&#123;&#125; echo 'ps -ef|grep &#123;&#125;'|bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>windows下查询连接端口对应的进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr \"8080\"</span><br><span class=\"line\">tasklist|findstr [进程号]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>问题调试发现单接口调用连接数并未按预期增长</li>\n<li>通过页面使用操作连接数会不规则的增长</li>\n<li>逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1</li>\n<li>分析sse仅操作了redis，并未存在对mysql的相关操作</li>\n<li>调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库</li>\n<li>到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li>最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题</li>\n</ul>\n<hr>"},{"title":"python程序员开发规范","date":"2019-06-09T07:12:51.000Z","_content":"\n\n{%note info%}\n本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。\n{%endnote%}\n<!--more-->\n\n## flake8\n- 基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。\n- 安装 `pip install flake8`\n- 指定文件检查 `flake8 path/code.py`\n- 指定目录检查 `flake8 path`\n- 忽略指定错误 `flake8 --ignore E24,W504 path`\n- 指定配置文件 `flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）`\n- 代码指定行忽略检查 `# noqa`\n- [异常快速定位](https://lintlyci.github.io/Flake8Rules/)\n\n**配置文件模版**：\n```\n[flake8]\nignore =\n    E203 # whitespace before ':'\n    E741 # ambiguous variable name 'l'\nfilename =\nexclude =\nmax-line-length = 89\nmax-complexity = 10  # 指定代码最高复杂度\n\n```\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.flake8.png](https://i.loli.net/2019/06/09/5cfcc0aac588786191.png)\n\n## black\n- flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑\n- 基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，\"产品来告诉你你真正想要的\"（产品决定需求）\n- 安装 `pip install black`\n- black --diff path/code.py `输出格式化差异`\n- black path/code.py `自动格式代码`（简单暴力）\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.black.png](https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png)\n\n\n## 配合使用pre-commit\n- 安装 `pip install pre_commit`\n- 创建配置文件 `touch .pre-commit-config.yaml`\n- 初始化 `pre-commit install`\n- 垃圾回收 `pre-commit gc`\n\n**配置模版**：\n```\nrepos:\n-   repo: https://github.com/ambv/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3.6\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.2.3\n    hooks:\n    - id: flake8\n\n```","source":"_posts/2019-06-09-python程序员开发规范.md","raw":"---\ntitle: python程序员开发规范\ndate: 2019-06-09 15:12:51\ntags:\n- python\ncategories:\n---\n\n\n{%note info%}\n本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。\n{%endnote%}\n<!--more-->\n\n## flake8\n- 基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。\n- 安装 `pip install flake8`\n- 指定文件检查 `flake8 path/code.py`\n- 指定目录检查 `flake8 path`\n- 忽略指定错误 `flake8 --ignore E24,W504 path`\n- 指定配置文件 `flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）`\n- 代码指定行忽略检查 `# noqa`\n- [异常快速定位](https://lintlyci.github.io/Flake8Rules/)\n\n**配置文件模版**：\n```\n[flake8]\nignore =\n    E203 # whitespace before ':'\n    E741 # ambiguous variable name 'l'\nfilename =\nexclude =\nmax-line-length = 89\nmax-complexity = 10  # 指定代码最高复杂度\n\n```\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.flake8.png](https://i.loli.net/2019/06/09/5cfcc0aac588786191.png)\n\n## black\n- flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑\n- 基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，\"产品来告诉你你真正想要的\"（产品决定需求）\n- 安装 `pip install black`\n- black --diff path/code.py `输出格式化差异`\n- black path/code.py `自动格式代码`（简单暴力）\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.black.png](https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png)\n\n\n## 配合使用pre-commit\n- 安装 `pip install pre_commit`\n- 创建配置文件 `touch .pre-commit-config.yaml`\n- 初始化 `pre-commit install`\n- 垃圾回收 `pre-commit gc`\n\n**配置模版**：\n```\nrepos:\n-   repo: https://github.com/ambv/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3.6\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.2.3\n    hooks:\n    - id: flake8\n\n```","slug":"python程序员开发规范","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v41000p16p7jyjmbmdm","content":"<div class=\"note info\"><p>本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"flake8\"><a href=\"#flake8\" class=\"headerlink\" title=\"flake8\"></a>flake8</h2><ul>\n<li>基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。</li>\n<li>安装 <code>pip install flake8</code></li>\n<li>指定文件检查 <code>flake8 path/code.py</code></li>\n<li>指定目录检查 <code>flake8 path</code></li>\n<li>忽略指定错误 <code>flake8 --ignore E24,W504 path</code></li>\n<li>指定配置文件 <code>flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）</code></li>\n<li>代码指定行忽略检查 <code># noqa</code></li>\n<li><a href=\"https://lintlyci.github.io/Flake8Rules/\" target=\"_blank\" rel=\"noopener\">异常快速定位</a></li>\n</ul>\n<p><strong>配置文件模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flake8]</span><br><span class=\"line\">ignore =</span><br><span class=\"line\">    E203 # whitespace before &apos;:&apos;</span><br><span class=\"line\">    E741 # ambiguous variable name &apos;l&apos;</span><br><span class=\"line\">filename =</span><br><span class=\"line\">exclude =</span><br><span class=\"line\">max-line-length = 89</span><br><span class=\"line\">max-complexity = 10  # 指定代码最高复杂度</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac588786191.png\" alt=\"pycharm.flake8.png\"></p>\n<h2 id=\"black\"><a href=\"#black\" class=\"headerlink\" title=\"black\"></a>black</h2><ul>\n<li>flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑</li>\n<li>基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，”产品来告诉你你真正想要的”（产品决定需求）</li>\n<li>安装 <code>pip install black</code></li>\n<li>black –diff path/code.py <code>输出格式化差异</code></li>\n<li>black path/code.py <code>自动格式代码</code>（简单暴力）</li>\n</ul>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png\" alt=\"pycharm.black.png\"></p>\n<h2 id=\"配合使用pre-commit\"><a href=\"#配合使用pre-commit\" class=\"headerlink\" title=\"配合使用pre-commit\"></a>配合使用pre-commit</h2><ul>\n<li>安装 <code>pip install pre_commit</code></li>\n<li>创建配置文件 <code>touch .pre-commit-config.yaml</code></li>\n<li>初始化 <code>pre-commit install</code></li>\n<li>垃圾回收 <code>pre-commit gc</code></li>\n</ul>\n<p><strong>配置模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repos:</span><br><span class=\"line\">-   repo: https://github.com/ambv/black</span><br><span class=\"line\">    rev: stable</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: black</span><br><span class=\"line\">      language_version: python3.6</span><br><span class=\"line\">-   repo: https://github.com/pre-commit/pre-commit-hooks</span><br><span class=\"line\">    rev: v2.2.3</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: flake8</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。</p></div>","more":"<h2 id=\"flake8\"><a href=\"#flake8\" class=\"headerlink\" title=\"flake8\"></a>flake8</h2><ul>\n<li>基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。</li>\n<li>安装 <code>pip install flake8</code></li>\n<li>指定文件检查 <code>flake8 path/code.py</code></li>\n<li>指定目录检查 <code>flake8 path</code></li>\n<li>忽略指定错误 <code>flake8 --ignore E24,W504 path</code></li>\n<li>指定配置文件 <code>flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）</code></li>\n<li>代码指定行忽略检查 <code># noqa</code></li>\n<li><a href=\"https://lintlyci.github.io/Flake8Rules/\" target=\"_blank\" rel=\"noopener\">异常快速定位</a></li>\n</ul>\n<p><strong>配置文件模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flake8]</span><br><span class=\"line\">ignore =</span><br><span class=\"line\">    E203 # whitespace before &apos;:&apos;</span><br><span class=\"line\">    E741 # ambiguous variable name &apos;l&apos;</span><br><span class=\"line\">filename =</span><br><span class=\"line\">exclude =</span><br><span class=\"line\">max-line-length = 89</span><br><span class=\"line\">max-complexity = 10  # 指定代码最高复杂度</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac588786191.png\" alt=\"pycharm.flake8.png\"></p>\n<h2 id=\"black\"><a href=\"#black\" class=\"headerlink\" title=\"black\"></a>black</h2><ul>\n<li>flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑</li>\n<li>基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，”产品来告诉你你真正想要的”（产品决定需求）</li>\n<li>安装 <code>pip install black</code></li>\n<li>black –diff path/code.py <code>输出格式化差异</code></li>\n<li>black path/code.py <code>自动格式代码</code>（简单暴力）</li>\n</ul>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png\" alt=\"pycharm.black.png\"></p>\n<h2 id=\"配合使用pre-commit\"><a href=\"#配合使用pre-commit\" class=\"headerlink\" title=\"配合使用pre-commit\"></a>配合使用pre-commit</h2><ul>\n<li>安装 <code>pip install pre_commit</code></li>\n<li>创建配置文件 <code>touch .pre-commit-config.yaml</code></li>\n<li>初始化 <code>pre-commit install</code></li>\n<li>垃圾回收 <code>pre-commit gc</code></li>\n</ul>\n<p><strong>配置模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repos:</span><br><span class=\"line\">-   repo: https://github.com/ambv/black</span><br><span class=\"line\">    rev: stable</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: black</span><br><span class=\"line\">      language_version: python3.6</span><br><span class=\"line\">-   repo: https://github.com/pre-commit/pre-commit-hooks</span><br><span class=\"line\">    rev: v2.2.3</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: flake8</span><br></pre></td></tr></table></figure></p>"},{"title":"pycharm远程调试","date":"2019-04-27T00:00:34.000Z","_content":"\n{%note info%}\npycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。\n请注意文中介绍的所有功能仅出现在pycharm专业版版中。\n{%endnote%}\n<!--more-->\n\n## 前置\n- `File`->`Settings`->`Project`->`Project Interpreter`->`add`\n- 配置mapping，本地代码与远程代码的映射，`此步骤是必须的`，方式可以通过挂载或者Tool->Configure->SFTP\n- Interpreter设置完后请确认`External Libraries`->`Remote Libraries`生成，若未出现，重启pycharm或许有奇迹\n\n## SSL Interpreter\n![pycharm.ssh.png](https://i.loli.net/2019/05/04/5ccd05b56616c.png)\n\n这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取`Remote Libraries`，从而无法远程debug\n## Docker\n- 开启docker守护进程的API调用\n- mapping需要另外挂载\n![pycharm.docker.png](https://i.loli.net/2019/05/04/5ccd06162dfdb.png)\n\n## Docker Compose（推荐）\n- mapping挂载可以直接在compose文件中指定\n- 镜像建议通过image，若为build将会每次都重新构建\n![pycharm.docker-compose.png](https://i.loli.net/2019/05/04/5ccd0605cbe19.png)\n\n```\nversion: \"3\"\nservices:\n\n  centos:\n    # build:\n    #   context: .\n    #   dockerfile: Dockerfile.centos\n    image: zipee/centos:latest\n    command: sh\n    volumes:\n      - E:\\code\\python3\\:/var/www/\n    ports:\n      - \"5000:5000\"\n    links:\n      - redis\n\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n\n```\n\n## celery remote-debug\n\n由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解\n\n简单的celery代码如下：\n```\nfrom celery import Celery\n\napp = Celery('simple', broker='redis://redis:6379/0')\n\n@app.task()\ndef add(x, y):\n    return x + y\n```\n\n配置celery的启动命令：\n![pycharm.celery.png](https://i.loli.net/2019/05/04/5ccd0ebb7816c.png)\n\n使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！","source":"_posts/2019-04-27-pycharm远程调试.md","raw":"---\ntitle: pycharm远程调试\ndate: 2019-04-27 08:00:34\ntags:\n- python \n- coding-tools\ncategories:\n- coding-tools\n---\n\n{%note info%}\npycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。\n请注意文中介绍的所有功能仅出现在pycharm专业版版中。\n{%endnote%}\n<!--more-->\n\n## 前置\n- `File`->`Settings`->`Project`->`Project Interpreter`->`add`\n- 配置mapping，本地代码与远程代码的映射，`此步骤是必须的`，方式可以通过挂载或者Tool->Configure->SFTP\n- Interpreter设置完后请确认`External Libraries`->`Remote Libraries`生成，若未出现，重启pycharm或许有奇迹\n\n## SSL Interpreter\n![pycharm.ssh.png](https://i.loli.net/2019/05/04/5ccd05b56616c.png)\n\n这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取`Remote Libraries`，从而无法远程debug\n## Docker\n- 开启docker守护进程的API调用\n- mapping需要另外挂载\n![pycharm.docker.png](https://i.loli.net/2019/05/04/5ccd06162dfdb.png)\n\n## Docker Compose（推荐）\n- mapping挂载可以直接在compose文件中指定\n- 镜像建议通过image，若为build将会每次都重新构建\n![pycharm.docker-compose.png](https://i.loli.net/2019/05/04/5ccd0605cbe19.png)\n\n```\nversion: \"3\"\nservices:\n\n  centos:\n    # build:\n    #   context: .\n    #   dockerfile: Dockerfile.centos\n    image: zipee/centos:latest\n    command: sh\n    volumes:\n      - E:\\code\\python3\\:/var/www/\n    ports:\n      - \"5000:5000\"\n    links:\n      - redis\n\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n\n```\n\n## celery remote-debug\n\n由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解\n\n简单的celery代码如下：\n```\nfrom celery import Celery\n\napp = Celery('simple', broker='redis://redis:6379/0')\n\n@app.task()\ndef add(x, y):\n    return x + y\n```\n\n配置celery的启动命令：\n![pycharm.celery.png](https://i.loli.net/2019/05/04/5ccd0ebb7816c.png)\n\n使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！","slug":"pycharm远程调试","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v4j000q16p7o9s4gd3i","content":"<div class=\"note info\"><p>pycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。<br>请注意文中介绍的所有功能仅出现在pycharm专业版版中。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><ul>\n<li><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Project</code>-&gt;<code>Project Interpreter</code>-&gt;<code>add</code></li>\n<li>配置mapping，本地代码与远程代码的映射，<code>此步骤是必须的</code>，方式可以通过挂载或者Tool-&gt;Configure-&gt;SFTP</li>\n<li>Interpreter设置完后请确认<code>External Libraries</code>-&gt;<code>Remote Libraries</code>生成，若未出现，重启pycharm或许有奇迹</li>\n</ul>\n<h2 id=\"SSL-Interpreter\"><a href=\"#SSL-Interpreter\" class=\"headerlink\" title=\"SSL Interpreter\"></a>SSL Interpreter</h2><p><img src=\"https://i.loli.net/2019/05/04/5ccd05b56616c.png\" alt=\"pycharm.ssh.png\"></p>\n<p>这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取<code>Remote Libraries</code>，从而无法远程debug</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>开启docker守护进程的API调用</li>\n<li>mapping需要另外挂载<br><img src=\"https://i.loli.net/2019/05/04/5ccd06162dfdb.png\" alt=\"pycharm.docker.png\"></li>\n</ul>\n<h2 id=\"Docker-Compose（推荐）\"><a href=\"#Docker-Compose（推荐）\" class=\"headerlink\" title=\"Docker Compose（推荐）\"></a>Docker Compose（推荐）</h2><ul>\n<li>mapping挂载可以直接在compose文件中指定</li>\n<li>镜像建议通过image，若为build将会每次都重新构建<br><img src=\"https://i.loli.net/2019/05/04/5ccd0605cbe19.png\" alt=\"pycharm.docker-compose.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  centos:</span><br><span class=\"line\">    # build:</span><br><span class=\"line\">    #   context: .</span><br><span class=\"line\">    #   dockerfile: Dockerfile.centos</span><br><span class=\"line\">    image: zipee/centos:latest</span><br><span class=\"line\">    command: sh</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - E:\\code\\python3\\:/var/www/</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5000:5000&quot;</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - redis</span><br><span class=\"line\"></span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    image: &quot;redis:alpine&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6379:6379&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"celery-remote-debug\"><a href=\"#celery-remote-debug\" class=\"headerlink\" title=\"celery remote-debug\"></a>celery remote-debug</h2><p>由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解</p>\n<p>简单的celery代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery import Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&apos;simple&apos;, broker=&apos;redis://redis:6379/0&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task()</span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    return x + y</span><br></pre></td></tr></table></figure></p>\n<p>配置celery的启动命令：<br><img src=\"https://i.loli.net/2019/05/04/5ccd0ebb7816c.png\" alt=\"pycharm.celery.png\"></p>\n<p>使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>pycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。<br>请注意文中介绍的所有功能仅出现在pycharm专业版版中。</p></div>","more":"<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><ul>\n<li><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Project</code>-&gt;<code>Project Interpreter</code>-&gt;<code>add</code></li>\n<li>配置mapping，本地代码与远程代码的映射，<code>此步骤是必须的</code>，方式可以通过挂载或者Tool-&gt;Configure-&gt;SFTP</li>\n<li>Interpreter设置完后请确认<code>External Libraries</code>-&gt;<code>Remote Libraries</code>生成，若未出现，重启pycharm或许有奇迹</li>\n</ul>\n<h2 id=\"SSL-Interpreter\"><a href=\"#SSL-Interpreter\" class=\"headerlink\" title=\"SSL Interpreter\"></a>SSL Interpreter</h2><p><img src=\"https://i.loli.net/2019/05/04/5ccd05b56616c.png\" alt=\"pycharm.ssh.png\"></p>\n<p>这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取<code>Remote Libraries</code>，从而无法远程debug</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>开启docker守护进程的API调用</li>\n<li>mapping需要另外挂载<br><img src=\"https://i.loli.net/2019/05/04/5ccd06162dfdb.png\" alt=\"pycharm.docker.png\"></li>\n</ul>\n<h2 id=\"Docker-Compose（推荐）\"><a href=\"#Docker-Compose（推荐）\" class=\"headerlink\" title=\"Docker Compose（推荐）\"></a>Docker Compose（推荐）</h2><ul>\n<li>mapping挂载可以直接在compose文件中指定</li>\n<li>镜像建议通过image，若为build将会每次都重新构建<br><img src=\"https://i.loli.net/2019/05/04/5ccd0605cbe19.png\" alt=\"pycharm.docker-compose.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  centos:</span><br><span class=\"line\">    # build:</span><br><span class=\"line\">    #   context: .</span><br><span class=\"line\">    #   dockerfile: Dockerfile.centos</span><br><span class=\"line\">    image: zipee/centos:latest</span><br><span class=\"line\">    command: sh</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - E:\\code\\python3\\:/var/www/</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5000:5000&quot;</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - redis</span><br><span class=\"line\"></span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    image: &quot;redis:alpine&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6379:6379&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"celery-remote-debug\"><a href=\"#celery-remote-debug\" class=\"headerlink\" title=\"celery remote-debug\"></a>celery remote-debug</h2><p>由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解</p>\n<p>简单的celery代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery import Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&apos;simple&apos;, broker=&apos;redis://redis:6379/0&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task()</span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    return x + y</span><br></pre></td></tr></table></figure></p>\n<p>配置celery的启动命令：<br><img src=\"https://i.loli.net/2019/05/04/5ccd0ebb7816c.png\" alt=\"pycharm.celery.png\"></p>\n<p>使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！</p>"},{"title":"flask分布式部署及flask-session","date":"2019-03-25T13:12:52.000Z","_content":"\n{%note info%}\n随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。\n{%endnote%}\n<!--more-->\n\n### flask默认的session做了什么\nflask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。\n但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：\n```python\nclass SecureCookieSession(CallbackDict, SessionMixin):\n\t...\nclass SecureCookieSessionInterface(SessionInterface):\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n以上是flask.sessions.py实现的主要框架：\n- SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。\n- SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。\n\n### 常见的分布式部署session解决方案\n\n- 服务器间session复制\nsession复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。\n像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，`缺点`是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。\n- session与服务器绑定\n通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。\n`优点`：无需修改业务代码\n`缺点`：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器\n- 客户端session存储\n即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。\n`优点`：无需改造，flask默认支持\n`缺点`：\n\t- session数据存储在客户端，即使加密也还是一件存在泄露风险的事情\n\t- session数据占用外网带宽\n\t- 受cookie的大小限制，session能记录的数据有限\n- 服务端session统一存储\n对session进行统一的存储，所有服务器共享该存储服务上的数据\n`优点`：服务水平扩展性良好，服务端存储，安全\n`缺点`：\n\t- 每次请求至少需要一次内部网络请求，占用网络带宽\n\t- 需要侵入业务代码\n\n### flask-session服务端session存储\n通过比较不难发现，服务端session统一存储是最合适的解决方案。\n那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包`flask-session`，我们一起看看它的实现：\n代码大概500+行，但我们实际用到的可能就几十行。\n- 首先我们需要选择session寄存的服务，flask-session支持`redis`,`memcached`,`filesystem`,`mongodb`,`sqlalchemy`作为存储介质\n- 以redis举例，再看代码：\n```python\nclass RedisSessionInterface(SessionInterface):\n    serializer = pickle\n    session_class = RedisSession\n\n    def __init__(self, redis, key_prefix, use_signer=False, permanent=True):\n        if redis is None:\n            from redis import Redis\n            redis = Redis()\n        self.redis = redis\n        self.key_prefix = key_prefix\n        self.use_signer = use_signer\n        self.permanent = permanent\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n重写`open_session，save_session`，将session（dict）存储在redis并将session_id（key）返回给客户端\n\n\n### flask http请求-应答完整的数据流\n客户端http请求 \n-> 服务端负载均衡至随机服务器 \n-> 应用上下文入栈(app_ctx) \n-> 请求上下文入栈(request_ctx),同时生成session \n-> 通过request_ctx中的路由信息找到视图函数(view_func) \n-> view_func进行业务处理 \n-> 应用上下文出栈(app_ctx)\n-> 请求上下文出栈(request_ctx) \n-> 保存session或sessino_id进cookie \n-> 返回应答 \n-> 数据写入对应的文件描述符并刷新\n其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。","source":"_posts/2019-03-25-flask分布式部署及flask-session.md","raw":"---\ntitle: flask分布式部署及flask-session\ndate: 2019-03-25 21:12:52\ntags:\n- flask \n- session\n- 分布式\ncategories:\n- flask\n---\n\n{%note info%}\n随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。\n{%endnote%}\n<!--more-->\n\n### flask默认的session做了什么\nflask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。\n但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：\n```python\nclass SecureCookieSession(CallbackDict, SessionMixin):\n\t...\nclass SecureCookieSessionInterface(SessionInterface):\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n以上是flask.sessions.py实现的主要框架：\n- SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。\n- SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。\n\n### 常见的分布式部署session解决方案\n\n- 服务器间session复制\nsession复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。\n像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，`缺点`是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。\n- session与服务器绑定\n通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。\n`优点`：无需修改业务代码\n`缺点`：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器\n- 客户端session存储\n即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。\n`优点`：无需改造，flask默认支持\n`缺点`：\n\t- session数据存储在客户端，即使加密也还是一件存在泄露风险的事情\n\t- session数据占用外网带宽\n\t- 受cookie的大小限制，session能记录的数据有限\n- 服务端session统一存储\n对session进行统一的存储，所有服务器共享该存储服务上的数据\n`优点`：服务水平扩展性良好，服务端存储，安全\n`缺点`：\n\t- 每次请求至少需要一次内部网络请求，占用网络带宽\n\t- 需要侵入业务代码\n\n### flask-session服务端session存储\n通过比较不难发现，服务端session统一存储是最合适的解决方案。\n那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包`flask-session`，我们一起看看它的实现：\n代码大概500+行，但我们实际用到的可能就几十行。\n- 首先我们需要选择session寄存的服务，flask-session支持`redis`,`memcached`,`filesystem`,`mongodb`,`sqlalchemy`作为存储介质\n- 以redis举例，再看代码：\n```python\nclass RedisSessionInterface(SessionInterface):\n    serializer = pickle\n    session_class = RedisSession\n\n    def __init__(self, redis, key_prefix, use_signer=False, permanent=True):\n        if redis is None:\n            from redis import Redis\n            redis = Redis()\n        self.redis = redis\n        self.key_prefix = key_prefix\n        self.use_signer = use_signer\n        self.permanent = permanent\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n重写`open_session，save_session`，将session（dict）存储在redis并将session_id（key）返回给客户端\n\n\n### flask http请求-应答完整的数据流\n客户端http请求 \n-> 服务端负载均衡至随机服务器 \n-> 应用上下文入栈(app_ctx) \n-> 请求上下文入栈(request_ctx),同时生成session \n-> 通过request_ctx中的路由信息找到视图函数(view_func) \n-> view_func进行业务处理 \n-> 应用上下文出栈(app_ctx)\n-> 请求上下文出栈(request_ctx) \n-> 保存session或sessino_id进cookie \n-> 返回应答 \n-> 数据写入对应的文件描述符并刷新\n其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。","slug":"flask分布式部署及flask-session","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v51000v16p720l061qk","content":"<div class=\"note info\"><p>随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"flask默认的session做了什么\"><a href=\"#flask默认的session做了什么\" class=\"headerlink\" title=\"flask默认的session做了什么\"></a>flask默认的session做了什么</h3><p>flask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。<br>但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSession</span><span class=\"params\">(CallbackDict, SessionMixin)</span>:</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure></p>\n<p>以上是flask.sessions.py实现的主要框架：</p>\n<ul>\n<li>SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。</li>\n<li>SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。</li>\n</ul>\n<h3 id=\"常见的分布式部署session解决方案\"><a href=\"#常见的分布式部署session解决方案\" class=\"headerlink\" title=\"常见的分布式部署session解决方案\"></a>常见的分布式部署session解决方案</h3><ul>\n<li>服务器间session复制<br>session复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。<br>像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，<code>缺点</code>是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。</li>\n<li>session与服务器绑定<br>通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。<br><code>优点</code>：无需修改业务代码<br><code>缺点</code>：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器</li>\n<li>客户端session存储<br>即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。<br><code>优点</code>：无需改造，flask默认支持<br><code>缺点</code>：<ul>\n<li>session数据存储在客户端，即使加密也还是一件存在泄露风险的事情</li>\n<li>session数据占用外网带宽</li>\n<li>受cookie的大小限制，session能记录的数据有限</li>\n</ul>\n</li>\n<li>服务端session统一存储<br>对session进行统一的存储，所有服务器共享该存储服务上的数据<br><code>优点</code>：服务水平扩展性良好，服务端存储，安全<br><code>缺点</code>：<ul>\n<li>每次请求至少需要一次内部网络请求，占用网络带宽</li>\n<li>需要侵入业务代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"flask-session服务端session存储\"><a href=\"#flask-session服务端session存储\" class=\"headerlink\" title=\"flask-session服务端session存储\"></a>flask-session服务端session存储</h3><p>通过比较不难发现，服务端session统一存储是最合适的解决方案。<br>那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包<code>flask-session</code>，我们一起看看它的实现：<br>代码大概500+行，但我们实际用到的可能就几十行。</p>\n<ul>\n<li>首先我们需要选择session寄存的服务，flask-session支持<code>redis</code>,<code>memcached</code>,<code>filesystem</code>,<code>mongodb</code>,<code>sqlalchemy</code>作为存储介质</li>\n<li>以redis举例，再看代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">    serializer = pickle</span><br><span class=\"line\">    session_class = RedisSession</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, redis, key_prefix, use_signer=False, permanent=True)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> redis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\">            redis = Redis()</span><br><span class=\"line\">        self.redis = redis</span><br><span class=\"line\">        self.key_prefix = key_prefix</span><br><span class=\"line\">        self.use_signer = use_signer</span><br><span class=\"line\">        self.permanent = permanent</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>重写<code>open_session，save_session</code>，将session（dict）存储在redis并将session_id（key）返回给客户端</p>\n<h3 id=\"flask-http请求-应答完整的数据流\"><a href=\"#flask-http请求-应答完整的数据流\" class=\"headerlink\" title=\"flask http请求-应答完整的数据流\"></a>flask http请求-应答完整的数据流</h3><p>客户端http请求<br>-&gt; 服务端负载均衡至随机服务器<br>-&gt; 应用上下文入栈(app_ctx)<br>-&gt; 请求上下文入栈(request_ctx),同时生成session<br>-&gt; 通过request_ctx中的路由信息找到视图函数(view_func)<br>-&gt; view_func进行业务处理<br>-&gt; 应用上下文出栈(app_ctx)<br>-&gt; 请求上下文出栈(request_ctx)<br>-&gt; 保存session或sessino_id进cookie<br>-&gt; 返回应答<br>-&gt; 数据写入对应的文件描述符并刷新<br>其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。</p></div>","more":"<h3 id=\"flask默认的session做了什么\"><a href=\"#flask默认的session做了什么\" class=\"headerlink\" title=\"flask默认的session做了什么\"></a>flask默认的session做了什么</h3><p>flask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。<br>但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSession</span><span class=\"params\">(CallbackDict, SessionMixin)</span>:</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure></p>\n<p>以上是flask.sessions.py实现的主要框架：</p>\n<ul>\n<li>SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。</li>\n<li>SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。</li>\n</ul>\n<h3 id=\"常见的分布式部署session解决方案\"><a href=\"#常见的分布式部署session解决方案\" class=\"headerlink\" title=\"常见的分布式部署session解决方案\"></a>常见的分布式部署session解决方案</h3><ul>\n<li>服务器间session复制<br>session复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。<br>像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，<code>缺点</code>是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。</li>\n<li>session与服务器绑定<br>通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。<br><code>优点</code>：无需修改业务代码<br><code>缺点</code>：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器</li>\n<li>客户端session存储<br>即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。<br><code>优点</code>：无需改造，flask默认支持<br><code>缺点</code>：<ul>\n<li>session数据存储在客户端，即使加密也还是一件存在泄露风险的事情</li>\n<li>session数据占用外网带宽</li>\n<li>受cookie的大小限制，session能记录的数据有限</li>\n</ul>\n</li>\n<li>服务端session统一存储<br>对session进行统一的存储，所有服务器共享该存储服务上的数据<br><code>优点</code>：服务水平扩展性良好，服务端存储，安全<br><code>缺点</code>：<ul>\n<li>每次请求至少需要一次内部网络请求，占用网络带宽</li>\n<li>需要侵入业务代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"flask-session服务端session存储\"><a href=\"#flask-session服务端session存储\" class=\"headerlink\" title=\"flask-session服务端session存储\"></a>flask-session服务端session存储</h3><p>通过比较不难发现，服务端session统一存储是最合适的解决方案。<br>那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包<code>flask-session</code>，我们一起看看它的实现：<br>代码大概500+行，但我们实际用到的可能就几十行。</p>\n<ul>\n<li>首先我们需要选择session寄存的服务，flask-session支持<code>redis</code>,<code>memcached</code>,<code>filesystem</code>,<code>mongodb</code>,<code>sqlalchemy</code>作为存储介质</li>\n<li>以redis举例，再看代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">    serializer = pickle</span><br><span class=\"line\">    session_class = RedisSession</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, redis, key_prefix, use_signer=False, permanent=True)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> redis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\">            redis = Redis()</span><br><span class=\"line\">        self.redis = redis</span><br><span class=\"line\">        self.key_prefix = key_prefix</span><br><span class=\"line\">        self.use_signer = use_signer</span><br><span class=\"line\">        self.permanent = permanent</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>重写<code>open_session，save_session</code>，将session（dict）存储在redis并将session_id（key）返回给客户端</p>\n<h3 id=\"flask-http请求-应答完整的数据流\"><a href=\"#flask-http请求-应答完整的数据流\" class=\"headerlink\" title=\"flask http请求-应答完整的数据流\"></a>flask http请求-应答完整的数据流</h3><p>客户端http请求<br>-&gt; 服务端负载均衡至随机服务器<br>-&gt; 应用上下文入栈(app_ctx)<br>-&gt; 请求上下文入栈(request_ctx),同时生成session<br>-&gt; 通过request_ctx中的路由信息找到视图函数(view_func)<br>-&gt; view_func进行业务处理<br>-&gt; 应用上下文出栈(app_ctx)<br>-&gt; 请求上下文出栈(request_ctx)<br>-&gt; 保存session或sessino_id进cookie<br>-&gt; 返回应答<br>-&gt; 数据写入对应的文件描述符并刷新<br>其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。</p>"},{"title":"数据结构与算法总结","date":"2019-06-16T08:02:18.000Z","_content":"\n{%note info%}\n总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。\n{%endnote%}\n<!--more-->\n\n## 图例\n![优劣示意图.png](https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png)\n\n## 数据结构\n![数据结构复杂度.png](https://i.loli.net/2019/06/16/5d05fac1e674389225.png)\n\n## 排序算法\n![排序复杂度.png](https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png)\n\n## 堆操作\n![堆.png](https://i.loli.net/2019/06/16/5d05fac19111547738.png)","source":"_posts/2019-06-16-数据结构与算法总结.md","raw":"---\ntitle: 数据结构与算法总结\ndate: 2019-06-16 16:02:18\ntags:\n- algorithm\n- datastructure\ncategories:\n- algorithm&datastructure\n---\n\n{%note info%}\n总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。\n{%endnote%}\n<!--more-->\n\n## 图例\n![优劣示意图.png](https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png)\n\n## 数据结构\n![数据结构复杂度.png](https://i.loli.net/2019/06/16/5d05fac1e674389225.png)\n\n## 排序算法\n![排序复杂度.png](https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png)\n\n## 堆操作\n![堆.png](https://i.loli.net/2019/06/16/5d05fac19111547738.png)","slug":"数据结构与算法总结","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v5d000x16p7svj2cqho","content":"<div class=\"note info\"><p>总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png\" alt=\"优劣示意图.png\"></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1e674389225.png\" alt=\"数据结构复杂度.png\"></p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png\" alt=\"排序复杂度.png\"></p>\n<h2 id=\"堆操作\"><a href=\"#堆操作\" class=\"headerlink\" title=\"堆操作\"></a>堆操作</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac19111547738.png\" alt=\"堆.png\"></p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。</p></div>","more":"<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png\" alt=\"优劣示意图.png\"></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1e674389225.png\" alt=\"数据结构复杂度.png\"></p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png\" alt=\"排序复杂度.png\"></p>\n<h2 id=\"堆操作\"><a href=\"#堆操作\" class=\"headerlink\" title=\"堆操作\"></a>堆操作</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac19111547738.png\" alt=\"堆.png\"></p>"},{"title":"shell编码整理","date":"2020-01-13T13:54:44.000Z","_content":"\n{%note info%}\n从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。\n{%endnote%}\n<!--more-->\n\n## 常用语法\n### test\n- 用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试\n```shell\nif test  -e startup.sh ;then \n等价于\nif [[ -e startup.sh ]];then\n```\n- 注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&&、||、<和> 等操作符\n\n### 数组\n- 定义数组\n```shell\nmodules=(bond-web bifrost model-engine gaeaproxy) \n```\n- 获取数组所有元素，@可被*替换\n```shell\n${modules[@]}\n```\n- 遍历数组\n```shell\nfor module in \"${modules[@]}\"; do\necho $module\ndone\n```\n- 读取数组指定元素\n```shell\n${modules[index]} \n```\n- 数组长度\n```shell\n@可被*替换|${#my_array[@]}\n```\n\n### 变量\n- 全局变量\n```shell\n# 全局变量的作用域是当前的进程，而不是前端的shell脚本文件\na=1\n```\n- 局部变量\n```shell\nlocal a=1\n```\n- 环境变量\n```shell\nexport a=1\n作用域为当前shell进程和其子进程\n```\n- 特殊变量\n\n|示例|变量含义|\n|:---:|:---|\n|$@|所有入参，可以通过set设置 set 11 22 33 44|\n|$#|参数个数|\n|$?|上个命令的退出状态|函数的返回值|\n|$$|当前shell进程的ID|\n|$!|Shell最后运行的后台Process的PID|\n|total=$#｜action=${!total}|获取最后一个参数，也可通过eval action=\\$$#|\n｜\\` \\`｜指令定义，相较于''，``会预执行，在指令嵌套时经常用到｜\n｜echo $aa | echo ${aa}｜读取变量｜\t\t\n｜$((2+3)) ｜进行整数运算｜\n\n### eval\n- 该命令对变量进行两次扫描\n```shell\na=`echo hello`\nb='echo $a' \n等价于\na='echo hello'\nb=eval 'echo $a'\n```\n### 引号\n|示例|含义|\n|:---:|:---|\n|' ' 单引号|剥夺所有字符的特殊含义，如 n=3；echo '$n' -> $n|\n|\" \" 双引号|引号内可参数替换，$和反引号 ``|\n|``反引号|用命令替换，即先执行``内命令，将输出结果暂存，在适当的地方输出|\n\t\n### 重定向\n```shell\nehco 'haha' > /tmp/tmp.log 2>&1\n```\n\t \n## 常见的服务启动脚本\n```shell\n#!/bin/bash\n\neval action=\\$$#\n\nmain() {\n    case \"$module\" in\n        module1)\n            start_cmd=\"cmd1\"\n            ;;\n        module2)\n            start_cmd=\"cmd2\"\n            ;;\n        *)\n            echo \"usage: $module {module1|module2}\"\n            exit -1\n    esac\n}\n\nall() {\n\t  for module in \"${modules[@]}\"; do\n\t      main\n\t      echo\n        echo \"[INFO] $module:\"\n            echo \"[INFO] processing: ${module} ${action}\"\n            echo \"==================\"\n            action\n            echo \"--------------\"\n    done\n}\n\naction() {\n\tcase \"$action\" in\n\t\tstart)\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\tstop)\n\t\t\tstop\n\t\t\t;;\n\t\tstatus)\n\t\t\tstatus\n\t\t\t;;\n\t\trestart)\n\t\t\tstop\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\t*)\n\t\t\techo \"usage: $action {start|stop|status|restart}\"\n\t\t\texit -1\n\tesac\n}\n\nusage() {\n    echo \"usage: $0 {all|[module1, ...]} {start|stop|status|restart}\"\n}\n\nmultiple() {\n    total=$#\n    action=${!total}\n    for (( i=1; i<total; i++)); do\n        module=${!i//\\//}\n        main\n\t     echo \"[INFO] $module:${start_cmd}\"\n        echo \"[INFO] processing: ${module} ${action}\"\n        echo \"==================\"\n        action\n        echo \"--------------\"\n    done\n}\n\ngetpid() {\n    if [ ! -d \"pids\" ]; then\n        mkdir pids\n    fi\n    if [ ! -f \"pids/${module}_pid\" ];then\n        echo \"\" > pids/${module}_pid\n    fi\n    module_pid=`cat pids/${module}_pid`\n\n    pid=`ps aux | grep ${module_pid} | grep -v grep | grep -v $0 | awk '{print $2}'`\n\n    if [[ -n ${pid} ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nstatus() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"status:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        return 0\n    else\n        echo \"service not running\"\n        return 1\n    fi\n}\n\nstart() {\n    getpid\n    if [[ $? -eq 1 ]]; then\n        eval $start_cmd\n        echo $!>pids/${module}_pid\n        getpid\n        if [[ $? -eq 0 ]]; then\n            echo \"service start sucessfully. pid: ${pid}\"\n        else\n            echo \"service start failed\"\n        fi\n    else\n        echo \"service already started. pid: ${pid}\"\n    fi\n}\n\nstop() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"killing:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        kill -9 ${pid} && sleep 0.01\n\t\t    getpid\n        if [[ $? -eq 1 ]]; then\n            echo \"killed\"\n        else\n            echo \"kill error\"\n        fi\n    else\n        echo \"service not running\"\n    fi\n}\n\ncase \"$1\" in\n    all)\n        all $@\n        ;;\n    usage)\n        usage\n        ;;\n    *)\n        multiple $@\n        ;;\nesac\n```\n- 注意服务启动间隔如果不加`sleep 0.01`，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间\n\n## 开机启动\n- 将启动指令配置进/etc/rc.d/rc.local\n- 注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败","source":"_posts/2020-01-13-shell编码整理.md","raw":"---\ntitle: shell编码整理\ndate: 2020-01-13 21:54:44\ntags: \n- shell\n- 部署\n- 运维\ncategories: \n- shell\n---\n\n{%note info%}\n从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。\n{%endnote%}\n<!--more-->\n\n## 常用语法\n### test\n- 用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试\n```shell\nif test  -e startup.sh ;then \n等价于\nif [[ -e startup.sh ]];then\n```\n- 注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&&、||、<和> 等操作符\n\n### 数组\n- 定义数组\n```shell\nmodules=(bond-web bifrost model-engine gaeaproxy) \n```\n- 获取数组所有元素，@可被*替换\n```shell\n${modules[@]}\n```\n- 遍历数组\n```shell\nfor module in \"${modules[@]}\"; do\necho $module\ndone\n```\n- 读取数组指定元素\n```shell\n${modules[index]} \n```\n- 数组长度\n```shell\n@可被*替换|${#my_array[@]}\n```\n\n### 变量\n- 全局变量\n```shell\n# 全局变量的作用域是当前的进程，而不是前端的shell脚本文件\na=1\n```\n- 局部变量\n```shell\nlocal a=1\n```\n- 环境变量\n```shell\nexport a=1\n作用域为当前shell进程和其子进程\n```\n- 特殊变量\n\n|示例|变量含义|\n|:---:|:---|\n|$@|所有入参，可以通过set设置 set 11 22 33 44|\n|$#|参数个数|\n|$?|上个命令的退出状态|函数的返回值|\n|$$|当前shell进程的ID|\n|$!|Shell最后运行的后台Process的PID|\n|total=$#｜action=${!total}|获取最后一个参数，也可通过eval action=\\$$#|\n｜\\` \\`｜指令定义，相较于''，``会预执行，在指令嵌套时经常用到｜\n｜echo $aa | echo ${aa}｜读取变量｜\t\t\n｜$((2+3)) ｜进行整数运算｜\n\n### eval\n- 该命令对变量进行两次扫描\n```shell\na=`echo hello`\nb='echo $a' \n等价于\na='echo hello'\nb=eval 'echo $a'\n```\n### 引号\n|示例|含义|\n|:---:|:---|\n|' ' 单引号|剥夺所有字符的特殊含义，如 n=3；echo '$n' -> $n|\n|\" \" 双引号|引号内可参数替换，$和反引号 ``|\n|``反引号|用命令替换，即先执行``内命令，将输出结果暂存，在适当的地方输出|\n\t\n### 重定向\n```shell\nehco 'haha' > /tmp/tmp.log 2>&1\n```\n\t \n## 常见的服务启动脚本\n```shell\n#!/bin/bash\n\neval action=\\$$#\n\nmain() {\n    case \"$module\" in\n        module1)\n            start_cmd=\"cmd1\"\n            ;;\n        module2)\n            start_cmd=\"cmd2\"\n            ;;\n        *)\n            echo \"usage: $module {module1|module2}\"\n            exit -1\n    esac\n}\n\nall() {\n\t  for module in \"${modules[@]}\"; do\n\t      main\n\t      echo\n        echo \"[INFO] $module:\"\n            echo \"[INFO] processing: ${module} ${action}\"\n            echo \"==================\"\n            action\n            echo \"--------------\"\n    done\n}\n\naction() {\n\tcase \"$action\" in\n\t\tstart)\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\tstop)\n\t\t\tstop\n\t\t\t;;\n\t\tstatus)\n\t\t\tstatus\n\t\t\t;;\n\t\trestart)\n\t\t\tstop\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\t*)\n\t\t\techo \"usage: $action {start|stop|status|restart}\"\n\t\t\texit -1\n\tesac\n}\n\nusage() {\n    echo \"usage: $0 {all|[module1, ...]} {start|stop|status|restart}\"\n}\n\nmultiple() {\n    total=$#\n    action=${!total}\n    for (( i=1; i<total; i++)); do\n        module=${!i//\\//}\n        main\n\t     echo \"[INFO] $module:${start_cmd}\"\n        echo \"[INFO] processing: ${module} ${action}\"\n        echo \"==================\"\n        action\n        echo \"--------------\"\n    done\n}\n\ngetpid() {\n    if [ ! -d \"pids\" ]; then\n        mkdir pids\n    fi\n    if [ ! -f \"pids/${module}_pid\" ];then\n        echo \"\" > pids/${module}_pid\n    fi\n    module_pid=`cat pids/${module}_pid`\n\n    pid=`ps aux | grep ${module_pid} | grep -v grep | grep -v $0 | awk '{print $2}'`\n\n    if [[ -n ${pid} ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nstatus() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"status:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        return 0\n    else\n        echo \"service not running\"\n        return 1\n    fi\n}\n\nstart() {\n    getpid\n    if [[ $? -eq 1 ]]; then\n        eval $start_cmd\n        echo $!>pids/${module}_pid\n        getpid\n        if [[ $? -eq 0 ]]; then\n            echo \"service start sucessfully. pid: ${pid}\"\n        else\n            echo \"service start failed\"\n        fi\n    else\n        echo \"service already started. pid: ${pid}\"\n    fi\n}\n\nstop() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"killing:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        kill -9 ${pid} && sleep 0.01\n\t\t    getpid\n        if [[ $? -eq 1 ]]; then\n            echo \"killed\"\n        else\n            echo \"kill error\"\n        fi\n    else\n        echo \"service not running\"\n    fi\n}\n\ncase \"$1\" in\n    all)\n        all $@\n        ;;\n    usage)\n        usage\n        ;;\n    *)\n        multiple $@\n        ;;\nesac\n```\n- 注意服务启动间隔如果不加`sleep 0.01`，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间\n\n## 开机启动\n- 将启动指令配置进/etc/rc.d/rc.local\n- 注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败","slug":"shell编码整理","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v5s001216p7qky7jgmi","content":"<div class=\"note info\"><p>从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h2><h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><ul>\n<li><p>用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test  -e startup.sh ;then </span><br><span class=\"line\">等价于</span><br><span class=\"line\">if [[ -e startup.sh ]];then</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&amp;&amp;、||、&lt;和&gt; 等操作符</p>\n</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li><p>定义数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules=(bond-web bifrost model-engine gaeaproxy)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组所有元素，@可被*替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">echo $module</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组指定元素</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[index]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组长度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@可被*替换|$&#123;#my_array[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li><p>全局变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 全局变量的作用域是当前的进程，而不是前端的shell脚本文件</span><br><span class=\"line\">a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>局部变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export a=1</span><br><span class=\"line\">作用域为当前shell进程和其子进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊变量</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">变量含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$@</td>\n<td style=\"text-align:left\">所有入参，可以通过set设置 set 11 22 33 44</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$#</td>\n<td style=\"text-align:left\">参数个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$?</td>\n<td style=\"text-align:left\">上个命令的退出状态</td>\n<td>函数的返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$$</td>\n<td style=\"text-align:left\">当前shell进程的ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$!</td>\n<td style=\"text-align:left\">Shell最后运行的后台Process的PID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">total=$#｜action=${!total}</td>\n<td style=\"text-align:left\">获取最后一个参数，也可通过eval action=\\$$#</td>\n</tr>\n</tbody>\n</table>\n<p>｜` `｜指令定义，相较于’’，<code></code>会预执行，在指令嵌套时经常用到｜<br>｜echo $aa | echo ${aa}｜读取变量｜<br>｜$((2+3)) ｜进行整数运算｜</p>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h3><ul>\n<li>该命令对变量进行两次扫描<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=`echo hello`</span><br><span class=\"line\">b='echo $a' </span><br><span class=\"line\">等价于</span><br><span class=\"line\">a='echo hello'</span><br><span class=\"line\">b=eval 'echo $a'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘ ‘ 单引号</td>\n<td style=\"text-align:left\">剥夺所有字符的特殊含义，如 n=3；echo ‘$n’ -&gt; $n</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“ “ 双引号</td>\n<td style=\"text-align:left\">引号内可参数替换，$和反引号 <code></code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code></code>反引号</td>\n<td style=\"text-align:left\">用命令替换，即先执行<code></code>内命令，将输出结果暂存，在适当的地方输出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ehco 'haha' &gt; /tmp/tmp.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的服务启动脚本\"><a href=\"#常见的服务启动脚本\" class=\"headerlink\" title=\"常见的服务启动脚本\"></a>常见的服务启动脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">eval action=\\$$#</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    case \"$module\" in</span><br><span class=\"line\">        module1)</span><br><span class=\"line\">            start_cmd=\"cmd1\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        module2)</span><br><span class=\"line\">            start_cmd=\"cmd2\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo \"usage: $module &#123;module1|module2&#125;\"</span><br><span class=\"line\">            exit -1</span><br><span class=\"line\">    esac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">all() &#123;</span><br><span class=\"line\">\t  for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">\t      main</span><br><span class=\"line\">\t      echo</span><br><span class=\"line\">        echo \"[INFO] $module:\"</span><br><span class=\"line\">            echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">            echo \"==================\"</span><br><span class=\"line\">            action</span><br><span class=\"line\">            echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">action() &#123;</span><br><span class=\"line\">\tcase \"$action\" in</span><br><span class=\"line\">\t\tstart)</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstop)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstatus)</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\trestart)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\techo \"usage: $action &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">\t\t\texit -1</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">usage() &#123;</span><br><span class=\"line\">    echo \"usage: $0 &#123;all|[module1, ...]&#125; &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">multiple() &#123;</span><br><span class=\"line\">    total=$#</span><br><span class=\"line\">    action=$&#123;!total&#125;</span><br><span class=\"line\">    for (( i=1; i&lt;total; i++)); do</span><br><span class=\"line\">        module=$&#123;!i//\\//&#125;</span><br><span class=\"line\">        main</span><br><span class=\"line\">\t     echo \"[INFO] $module:$&#123;start_cmd&#125;\"</span><br><span class=\"line\">        echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">        echo \"==================\"</span><br><span class=\"line\">        action</span><br><span class=\"line\">        echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getpid() &#123;</span><br><span class=\"line\">    if [ ! -d \"pids\" ]; then</span><br><span class=\"line\">        mkdir pids</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    if [ ! -f \"pids/$&#123;module&#125;_pid\" ];then</span><br><span class=\"line\">        echo \"\" &gt; pids/$&#123;module&#125;_pid</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    module_pid=`cat pids/$&#123;module&#125;_pid`</span><br><span class=\"line\"></span><br><span class=\"line\">    pid=`ps aux | grep $&#123;module_pid&#125; | grep -v grep | grep -v $0 | awk '&#123;print $2&#125;'`</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">status() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"status:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">        eval $start_cmd</span><br><span class=\"line\">        echo $!&gt;pids/$&#123;module&#125;_pid</span><br><span class=\"line\">        getpid</span><br><span class=\"line\">        if [[ $? -eq 0 ]]; then</span><br><span class=\"line\">            echo \"service start sucessfully. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"service start failed\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service already started. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"killing:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        kill -9 $&#123;pid&#125; &amp;&amp; sleep 0.01</span><br><span class=\"line\">\t\t    getpid</span><br><span class=\"line\">        if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">            echo \"killed\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"kill error\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case \"$1\" in</span><br><span class=\"line\">    all)</span><br><span class=\"line\">        all $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    usage)</span><br><span class=\"line\">        usage</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        multiple $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意服务启动间隔如果不加<code>sleep 0.01</code>，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间</li>\n</ul>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><ul>\n<li>将启动指令配置进/etc/rc.d/rc.local</li>\n<li>注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。</p></div>","more":"<h2 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h2><h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><ul>\n<li><p>用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test  -e startup.sh ;then </span><br><span class=\"line\">等价于</span><br><span class=\"line\">if [[ -e startup.sh ]];then</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&amp;&amp;、||、&lt;和&gt; 等操作符</p>\n</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li><p>定义数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules=(bond-web bifrost model-engine gaeaproxy)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组所有元素，@可被*替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">echo $module</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组指定元素</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[index]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组长度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@可被*替换|$&#123;#my_array[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li><p>全局变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 全局变量的作用域是当前的进程，而不是前端的shell脚本文件</span><br><span class=\"line\">a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>局部变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export a=1</span><br><span class=\"line\">作用域为当前shell进程和其子进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊变量</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">变量含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$@</td>\n<td style=\"text-align:left\">所有入参，可以通过set设置 set 11 22 33 44</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$#</td>\n<td style=\"text-align:left\">参数个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$?</td>\n<td style=\"text-align:left\">上个命令的退出状态</td>\n<td>函数的返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$$</td>\n<td style=\"text-align:left\">当前shell进程的ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$!</td>\n<td style=\"text-align:left\">Shell最后运行的后台Process的PID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">total=$#｜action=${!total}</td>\n<td style=\"text-align:left\">获取最后一个参数，也可通过eval action=\\$$#</td>\n</tr>\n</tbody>\n</table>\n<p>｜` `｜指令定义，相较于’’，<code></code>会预执行，在指令嵌套时经常用到｜<br>｜echo $aa | echo ${aa}｜读取变量｜<br>｜$((2+3)) ｜进行整数运算｜</p>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h3><ul>\n<li>该命令对变量进行两次扫描<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=`echo hello`</span><br><span class=\"line\">b='echo $a' </span><br><span class=\"line\">等价于</span><br><span class=\"line\">a='echo hello'</span><br><span class=\"line\">b=eval 'echo $a'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘ ‘ 单引号</td>\n<td style=\"text-align:left\">剥夺所有字符的特殊含义，如 n=3；echo ‘$n’ -&gt; $n</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“ “ 双引号</td>\n<td style=\"text-align:left\">引号内可参数替换，$和反引号 <code></code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code></code>反引号</td>\n<td style=\"text-align:left\">用命令替换，即先执行<code></code>内命令，将输出结果暂存，在适当的地方输出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ehco 'haha' &gt; /tmp/tmp.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的服务启动脚本\"><a href=\"#常见的服务启动脚本\" class=\"headerlink\" title=\"常见的服务启动脚本\"></a>常见的服务启动脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">eval action=\\$$#</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    case \"$module\" in</span><br><span class=\"line\">        module1)</span><br><span class=\"line\">            start_cmd=\"cmd1\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        module2)</span><br><span class=\"line\">            start_cmd=\"cmd2\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo \"usage: $module &#123;module1|module2&#125;\"</span><br><span class=\"line\">            exit -1</span><br><span class=\"line\">    esac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">all() &#123;</span><br><span class=\"line\">\t  for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">\t      main</span><br><span class=\"line\">\t      echo</span><br><span class=\"line\">        echo \"[INFO] $module:\"</span><br><span class=\"line\">            echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">            echo \"==================\"</span><br><span class=\"line\">            action</span><br><span class=\"line\">            echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">action() &#123;</span><br><span class=\"line\">\tcase \"$action\" in</span><br><span class=\"line\">\t\tstart)</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstop)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstatus)</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\trestart)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\techo \"usage: $action &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">\t\t\texit -1</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">usage() &#123;</span><br><span class=\"line\">    echo \"usage: $0 &#123;all|[module1, ...]&#125; &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">multiple() &#123;</span><br><span class=\"line\">    total=$#</span><br><span class=\"line\">    action=$&#123;!total&#125;</span><br><span class=\"line\">    for (( i=1; i&lt;total; i++)); do</span><br><span class=\"line\">        module=$&#123;!i//\\//&#125;</span><br><span class=\"line\">        main</span><br><span class=\"line\">\t     echo \"[INFO] $module:$&#123;start_cmd&#125;\"</span><br><span class=\"line\">        echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">        echo \"==================\"</span><br><span class=\"line\">        action</span><br><span class=\"line\">        echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getpid() &#123;</span><br><span class=\"line\">    if [ ! -d \"pids\" ]; then</span><br><span class=\"line\">        mkdir pids</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    if [ ! -f \"pids/$&#123;module&#125;_pid\" ];then</span><br><span class=\"line\">        echo \"\" &gt; pids/$&#123;module&#125;_pid</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    module_pid=`cat pids/$&#123;module&#125;_pid`</span><br><span class=\"line\"></span><br><span class=\"line\">    pid=`ps aux | grep $&#123;module_pid&#125; | grep -v grep | grep -v $0 | awk '&#123;print $2&#125;'`</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">status() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"status:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">        eval $start_cmd</span><br><span class=\"line\">        echo $!&gt;pids/$&#123;module&#125;_pid</span><br><span class=\"line\">        getpid</span><br><span class=\"line\">        if [[ $? -eq 0 ]]; then</span><br><span class=\"line\">            echo \"service start sucessfully. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"service start failed\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service already started. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"killing:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        kill -9 $&#123;pid&#125; &amp;&amp; sleep 0.01</span><br><span class=\"line\">\t\t    getpid</span><br><span class=\"line\">        if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">            echo \"killed\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"kill error\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case \"$1\" in</span><br><span class=\"line\">    all)</span><br><span class=\"line\">        all $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    usage)</span><br><span class=\"line\">        usage</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        multiple $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意服务启动间隔如果不加<code>sleep 0.01</code>，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间</li>\n</ul>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><ul>\n<li>将启动指令配置进/etc/rc.d/rc.local</li>\n<li>注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败</li>\n</ul>"},{"title":"fabric使用总结","date":"2019-12-23T13:16:44.000Z","_content":"\n{%note info%}\nfabric可谓部署神器，在小规模集群环境部署方面简直就是`屠龙刀`的存在\n{%endnote%}\n<!--more-->\n\n## 简介\n\n- fabric目前存在两个版本，分别对应python2和python3\n- 本文主要介绍fabric两个版本的常用方法\n\n## fabric（python2）\n### 安装（python2环境）\n\n```python\npip install fabric\n```\n### 若要实现ssh跳转，需另外安装fexpect\n\n```python\npip install fexpect\n```\n### fabric2的API对应部署的对象定义比较明了\n- env（定义部署主机的ip，密码，节点属性，全局变量等）\n\t\n```python\ndef dev():\n    env.roledefs = {\n        \"manager\": [\"user@x.x.x.x:22\"],\n        \"worker\": [\"user@x.x.x.x:22\"],\n    }\n    env.passwords = {\"user@x.x.x.x:22\": \"123456\", \"user@x.x.x.x:22\": \"123456\"}\n    global ENV_PARAM\n    ENV_PARAM = \"dev\"\n```\n\n- roles\n    \n```python\n@roles(\"manager\")\ndef start_swarm(tag, compose_file=\"docker-compose.yml\"):\n    with cd(SRC_PATH):\n        with shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):\n            run(\n                \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n                    compose_file, PREFIX\n                )\n            )   \n```\n    \n   \n- run\n\n执行shell指令\n    \n- hide, settings \n\n配合使用，隐藏输出内容等\n        \n```python\nwith settings(hide(\"warnings\", \"running\", \"stdout\", \"stderr\"), warn_only=True):\n    \n```\n    \n    \n- cd，sudo\n\n同shell指令\n    \n- execute\n\n在本地任务中执行其他任务函数，提高代码复用率\n    \n- shell_env\n\n设置环境变量\n        \n```python\nwith shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):\n    run(\n        \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n            compose_file, PREFIX\n        )\n    )\n```\n    \n- 配合fexpect使用\n\n贴了段之前用过的代码，可用于修饰任务函数\n        \n```python\ndef env_init(f):\n    # 代码目录\n    global SRC_PATH\n    SRC_PATH = \"\"\n    # 私有镜像仓库\n    global REGISTRY_HOST\n    REGISTRY_HOST = \"\"\n    global REGISTRY_USER\n    REGISTRY_USER = \"\"\n    global REGISTRY_PWD\n    REGISTRY_PWD = \"\"\n    # 项目前缀\n    global PREFIX\n    PREFIX = \"asset\"\n    # 主节点ip\n    global MANAGER_IP, MANAGER_SSL, MANAGER_PWD\n    \n    def _get_manager_ip():\n        return env.roledefs[\"manager\"][0][6:-3]\n    \n    def _get_manager_ssl():\n        return env.roledefs[\"manager\"][0][:-3]\n    \n    # EXPECT\n    global PROMPTS\n    \n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        global MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS\n        MANAGER_IP = _get_manager_ip()\n        MANAGER_SSL = _get_manager_ssl()\n        MANAGER_PWD = env.passwords[env.roledefs[\"manager\"][0]]\n        PROMPTS = expect(\n            \"Are you sure you want to continue connecting (yes/no)?\", \"yes\"\n        )\n        return f(*args, **kwargs)\n    \n    return wrapper  \n```\n---\n## fabric（python3）\n### 安装（python3环境）\n\n```python\npip install fabric\n```\n\n### fabirc3的API相较而言显的抽象简单\n- Connection 作为连接通道抽象\n\n```python\n# 连接本地\nlocal_conn = Connection('localhost')\n\n# 远程连接\n# 没了envAPI只能自己手动定义连接环境\nenvs = {\n    'remote': {\n        'host_name': 'xx',\n        'host': 'user@x.x.x.x:22',\n        'password': '123456',\n    },\n}\nconn = Connection(\n    env.get('host'),\n    connect_kwargs={'password': env.get('password')}\n)\n```\n\n- task 定义任务\n\n```python\n@task\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n通过`fab deploy`执行该任务，值得注意的是ctx这个变量必须要写\n指定传参`fab start-server --jar-timestamp=20191203-1637 debug=True`(让人琢磨尝试了半天)\n\n\n- 其他注意点\n\n对task任务函数使用装饰器，需要注意ctx的传入\n\n```python\ndef timeit(start_msg=None, end_msg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(ctx, *args, **kwargs):\n            if start_msg:\n                print(start_msg)\n            start = time.time()\n            res = func(ctx, *args, **kwargs)\n            if end_msg:\n                print(f'{end_msg}： {round((time.time() - start), 2)}s')\n            return res\n        return wrapper\n    return decorator\n```\n\n然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效\n\n```python\n# 此时debug的将无法被解析\n@task\n@timeit(end_msg='发布完成')\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n\n究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败\n\n```python\ndef argspec(self, body):\n    func = body if isinstance(body, types.FunctionType) else body.__call__\n    spec = inspect.getargspec(func)\n    arg_names = spec.args[:]\n    matched_args = [reversed(x) for x in [spec.args, spec.defaults or []]]\n    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))\n    # Pop context argument\n    try:\n        context_arg = arg_names.pop(0)\n    except IndexError:\n        # TODO: see TODO under __call__, this should be same type\n        raise TypeError(\"Tasks must have an initial Context argument!\")\n    del spec_dict[context_arg]\n    return arg_names, spec_dict\n```\n\n## 总结\n- 综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用\n- fabric3是面向程序编程而非面向human编程\n- 无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧\n","source":"_posts/2019-12-23-fabric使用总结.md","raw":"---\ntitle: fabric使用总结\ndate: 2019-12-23 21:16:44\ntags: \n- 部署\ncategories:\n---\n\n{%note info%}\nfabric可谓部署神器，在小规模集群环境部署方面简直就是`屠龙刀`的存在\n{%endnote%}\n<!--more-->\n\n## 简介\n\n- fabric目前存在两个版本，分别对应python2和python3\n- 本文主要介绍fabric两个版本的常用方法\n\n## fabric（python2）\n### 安装（python2环境）\n\n```python\npip install fabric\n```\n### 若要实现ssh跳转，需另外安装fexpect\n\n```python\npip install fexpect\n```\n### fabric2的API对应部署的对象定义比较明了\n- env（定义部署主机的ip，密码，节点属性，全局变量等）\n\t\n```python\ndef dev():\n    env.roledefs = {\n        \"manager\": [\"user@x.x.x.x:22\"],\n        \"worker\": [\"user@x.x.x.x:22\"],\n    }\n    env.passwords = {\"user@x.x.x.x:22\": \"123456\", \"user@x.x.x.x:22\": \"123456\"}\n    global ENV_PARAM\n    ENV_PARAM = \"dev\"\n```\n\n- roles\n    \n```python\n@roles(\"manager\")\ndef start_swarm(tag, compose_file=\"docker-compose.yml\"):\n    with cd(SRC_PATH):\n        with shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):\n            run(\n                \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n                    compose_file, PREFIX\n                )\n            )   \n```\n    \n   \n- run\n\n执行shell指令\n    \n- hide, settings \n\n配合使用，隐藏输出内容等\n        \n```python\nwith settings(hide(\"warnings\", \"running\", \"stdout\", \"stderr\"), warn_only=True):\n    \n```\n    \n    \n- cd，sudo\n\n同shell指令\n    \n- execute\n\n在本地任务中执行其他任务函数，提高代码复用率\n    \n- shell_env\n\n设置环境变量\n        \n```python\nwith shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):\n    run(\n        \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n            compose_file, PREFIX\n        )\n    )\n```\n    \n- 配合fexpect使用\n\n贴了段之前用过的代码，可用于修饰任务函数\n        \n```python\ndef env_init(f):\n    # 代码目录\n    global SRC_PATH\n    SRC_PATH = \"\"\n    # 私有镜像仓库\n    global REGISTRY_HOST\n    REGISTRY_HOST = \"\"\n    global REGISTRY_USER\n    REGISTRY_USER = \"\"\n    global REGISTRY_PWD\n    REGISTRY_PWD = \"\"\n    # 项目前缀\n    global PREFIX\n    PREFIX = \"asset\"\n    # 主节点ip\n    global MANAGER_IP, MANAGER_SSL, MANAGER_PWD\n    \n    def _get_manager_ip():\n        return env.roledefs[\"manager\"][0][6:-3]\n    \n    def _get_manager_ssl():\n        return env.roledefs[\"manager\"][0][:-3]\n    \n    # EXPECT\n    global PROMPTS\n    \n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        global MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS\n        MANAGER_IP = _get_manager_ip()\n        MANAGER_SSL = _get_manager_ssl()\n        MANAGER_PWD = env.passwords[env.roledefs[\"manager\"][0]]\n        PROMPTS = expect(\n            \"Are you sure you want to continue connecting (yes/no)?\", \"yes\"\n        )\n        return f(*args, **kwargs)\n    \n    return wrapper  \n```\n---\n## fabric（python3）\n### 安装（python3环境）\n\n```python\npip install fabric\n```\n\n### fabirc3的API相较而言显的抽象简单\n- Connection 作为连接通道抽象\n\n```python\n# 连接本地\nlocal_conn = Connection('localhost')\n\n# 远程连接\n# 没了envAPI只能自己手动定义连接环境\nenvs = {\n    'remote': {\n        'host_name': 'xx',\n        'host': 'user@x.x.x.x:22',\n        'password': '123456',\n    },\n}\nconn = Connection(\n    env.get('host'),\n    connect_kwargs={'password': env.get('password')}\n)\n```\n\n- task 定义任务\n\n```python\n@task\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n通过`fab deploy`执行该任务，值得注意的是ctx这个变量必须要写\n指定传参`fab start-server --jar-timestamp=20191203-1637 debug=True`(让人琢磨尝试了半天)\n\n\n- 其他注意点\n\n对task任务函数使用装饰器，需要注意ctx的传入\n\n```python\ndef timeit(start_msg=None, end_msg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(ctx, *args, **kwargs):\n            if start_msg:\n                print(start_msg)\n            start = time.time()\n            res = func(ctx, *args, **kwargs)\n            if end_msg:\n                print(f'{end_msg}： {round((time.time() - start), 2)}s')\n            return res\n        return wrapper\n    return decorator\n```\n\n然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效\n\n```python\n# 此时debug的将无法被解析\n@task\n@timeit(end_msg='发布完成')\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n\n究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败\n\n```python\ndef argspec(self, body):\n    func = body if isinstance(body, types.FunctionType) else body.__call__\n    spec = inspect.getargspec(func)\n    arg_names = spec.args[:]\n    matched_args = [reversed(x) for x in [spec.args, spec.defaults or []]]\n    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))\n    # Pop context argument\n    try:\n        context_arg = arg_names.pop(0)\n    except IndexError:\n        # TODO: see TODO under __call__, this should be same type\n        raise TypeError(\"Tasks must have an initial Context argument!\")\n    del spec_dict[context_arg]\n    return arg_names, spec_dict\n```\n\n## 总结\n- 综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用\n- fabric3是面向程序编程而非面向human编程\n- 无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧\n","slug":"fabric使用总结","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v67001316p7zh2eky0s","content":"<div class=\"note info\"><p>fabric可谓部署神器，在小规模集群环境部署方面简直就是<code>屠龙刀</code>的存在</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>fabric目前存在两个版本，分别对应python2和python3</li>\n<li>本文主要介绍fabric两个版本的常用方法</li>\n</ul>\n<h2 id=\"fabric（python2）\"><a href=\"#fabric（python2）\" class=\"headerlink\" title=\"fabric（python2）\"></a>fabric（python2）</h2><h3 id=\"安装（python2环境）\"><a href=\"#安装（python2环境）\" class=\"headerlink\" title=\"安装（python2环境）\"></a>安装（python2环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"若要实现ssh跳转，需另外安装fexpect\"><a href=\"#若要实现ssh跳转，需另外安装fexpect\" class=\"headerlink\" title=\"若要实现ssh跳转，需另外安装fexpect\"></a>若要实现ssh跳转，需另外安装fexpect</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fexpect</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabric2的API对应部署的对象定义比较明了\"><a href=\"#fabric2的API对应部署的对象定义比较明了\" class=\"headerlink\" title=\"fabric2的API对应部署的对象定义比较明了\"></a>fabric2的API对应部署的对象定义比较明了</h3><ul>\n<li>env（定义部署主机的ip，密码，节点属性，全局变量等）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dev</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    env.roledefs = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"manager\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"worker\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    env.passwords = &#123;<span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>, <span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> ENV_PARAM</span><br><span class=\"line\">    ENV_PARAM = <span class=\"string\">\"dev\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>roles</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@roles(\"manager\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_swarm</span><span class=\"params\">(tag, compose_file=<span class=\"string\">\"docker-compose.yml\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> cd(SRC_PATH):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):</span><br><span class=\"line\">            run(</span><br><span class=\"line\">                <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">                    compose_file, PREFIX</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>run</li>\n</ul>\n<p>执行shell指令</p>\n<ul>\n<li>hide, settings </li>\n</ul>\n<p>配合使用，隐藏输出内容等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> settings(hide(<span class=\"string\">\"warnings\"</span>, <span class=\"string\">\"running\"</span>, <span class=\"string\">\"stdout\"</span>, <span class=\"string\">\"stderr\"</span>), warn_only=<span class=\"keyword\">True</span>):</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd，sudo</li>\n</ul>\n<p>同shell指令</p>\n<ul>\n<li>execute</li>\n</ul>\n<p>在本地任务中执行其他任务函数，提高代码复用率</p>\n<ul>\n<li>shell_env</li>\n</ul>\n<p>设置环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):</span><br><span class=\"line\">    run(</span><br><span class=\"line\">        <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">            compose_file, PREFIX</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配合fexpect使用</li>\n</ul>\n<p>贴了段之前用过的代码，可用于修饰任务函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">env_init</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码目录</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SRC_PATH</span><br><span class=\"line\">    SRC_PATH = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 私有镜像仓库</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_HOST</span><br><span class=\"line\">    REGISTRY_HOST = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_USER</span><br><span class=\"line\">    REGISTRY_USER = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_PWD</span><br><span class=\"line\">    REGISTRY_PWD = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PREFIX</span><br><span class=\"line\">    PREFIX = <span class=\"string\">\"asset\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 主节点ip</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ip</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][<span class=\"number\">6</span>:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ssl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># EXPECT</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PROMPTS</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @wraps(f)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS</span><br><span class=\"line\">        MANAGER_IP = _get_manager_ip()</span><br><span class=\"line\">        MANAGER_SSL = _get_manager_ssl()</span><br><span class=\"line\">        MANAGER_PWD = env.passwords[env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>]]</span><br><span class=\"line\">        PROMPTS = expect(</span><br><span class=\"line\">            <span class=\"string\">\"Are you sure you want to continue connecting (yes/no)?\"</span>, <span class=\"string\">\"yes\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fabric（python3）\"><a href=\"#fabric（python3）\" class=\"headerlink\" title=\"fabric（python3）\"></a>fabric（python3）</h2><h3 id=\"安装（python3环境）\"><a href=\"#安装（python3环境）\" class=\"headerlink\" title=\"安装（python3环境）\"></a>安装（python3环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabirc3的API相较而言显的抽象简单\"><a href=\"#fabirc3的API相较而言显的抽象简单\" class=\"headerlink\" title=\"fabirc3的API相较而言显的抽象简单\"></a>fabirc3的API相较而言显的抽象简单</h3><ul>\n<li>Connection 作为连接通道抽象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接本地</span></span><br><span class=\"line\">local_conn = Connection(<span class=\"string\">'localhost'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程连接</span></span><br><span class=\"line\"><span class=\"comment\"># 没了envAPI只能自己手动定义连接环境</span></span><br><span class=\"line\">envs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'remote'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'host_name'</span>: <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'host'</span>: <span class=\"string\">'user@x.x.x.x:22'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = Connection(</span><br><span class=\"line\">    env.get(<span class=\"string\">'host'</span>),</span><br><span class=\"line\">    connect_kwargs=&#123;<span class=\"string\">'password'</span>: env.get(<span class=\"string\">'password'</span>)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>task 定义任务</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>通过<code>fab deploy</code>执行该任务，值得注意的是ctx这个变量必须要写<br>指定传参<code>fab start-server --jar-timestamp=20191203-1637 debug=True</code>(让人琢磨尝试了半天)</p>\n<ul>\n<li>其他注意点</li>\n</ul>\n<p>对task任务函数使用装饰器，需要注意ctx的传入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timeit</span><span class=\"params\">(start_msg=None, end_msg=None)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(ctx, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> start_msg:</span><br><span class=\"line\">                print(start_msg)</span><br><span class=\"line\">            start = time.time()</span><br><span class=\"line\">            res = func(ctx, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_msg:</span><br><span class=\"line\">                print(<span class=\"string\">f'<span class=\"subst\">&#123;end_msg&#125;</span>： <span class=\"subst\">&#123;round((time.time() - start), <span class=\"number\">2</span>)&#125;</span>s'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时debug的将无法被解析</span></span><br><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"meta\">@timeit(end_msg='发布完成')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">argspec</span><span class=\"params\">(self, body)</span>:</span></span><br><span class=\"line\">    func = body <span class=\"keyword\">if</span> isinstance(body, types.FunctionType) <span class=\"keyword\">else</span> body.__call__</span><br><span class=\"line\">    spec = inspect.getargspec(func)</span><br><span class=\"line\">    arg_names = spec.args[:]</span><br><span class=\"line\">    matched_args = [reversed(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [spec.args, spec.defaults <span class=\"keyword\">or</span> []]]</span><br><span class=\"line\">    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))</span><br><span class=\"line\">    <span class=\"comment\"># Pop context argument</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        context_arg = arg_names.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> see TODO under __call__, this should be same type</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">\"Tasks must have an initial Context argument!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> spec_dict[context_arg]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg_names, spec_dict</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用</li>\n<li>fabric3是面向程序编程而非面向human编程</li>\n<li>无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>fabric可谓部署神器，在小规模集群环境部署方面简直就是<code>屠龙刀</code>的存在</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>fabric目前存在两个版本，分别对应python2和python3</li>\n<li>本文主要介绍fabric两个版本的常用方法</li>\n</ul>\n<h2 id=\"fabric（python2）\"><a href=\"#fabric（python2）\" class=\"headerlink\" title=\"fabric（python2）\"></a>fabric（python2）</h2><h3 id=\"安装（python2环境）\"><a href=\"#安装（python2环境）\" class=\"headerlink\" title=\"安装（python2环境）\"></a>安装（python2环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"若要实现ssh跳转，需另外安装fexpect\"><a href=\"#若要实现ssh跳转，需另外安装fexpect\" class=\"headerlink\" title=\"若要实现ssh跳转，需另外安装fexpect\"></a>若要实现ssh跳转，需另外安装fexpect</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fexpect</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabric2的API对应部署的对象定义比较明了\"><a href=\"#fabric2的API对应部署的对象定义比较明了\" class=\"headerlink\" title=\"fabric2的API对应部署的对象定义比较明了\"></a>fabric2的API对应部署的对象定义比较明了</h3><ul>\n<li>env（定义部署主机的ip，密码，节点属性，全局变量等）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dev</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    env.roledefs = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"manager\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"worker\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    env.passwords = &#123;<span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>, <span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> ENV_PARAM</span><br><span class=\"line\">    ENV_PARAM = <span class=\"string\">\"dev\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>roles</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@roles(\"manager\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_swarm</span><span class=\"params\">(tag, compose_file=<span class=\"string\">\"docker-compose.yml\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> cd(SRC_PATH):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):</span><br><span class=\"line\">            run(</span><br><span class=\"line\">                <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">                    compose_file, PREFIX</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>run</li>\n</ul>\n<p>执行shell指令</p>\n<ul>\n<li>hide, settings </li>\n</ul>\n<p>配合使用，隐藏输出内容等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> settings(hide(<span class=\"string\">\"warnings\"</span>, <span class=\"string\">\"running\"</span>, <span class=\"string\">\"stdout\"</span>, <span class=\"string\">\"stderr\"</span>), warn_only=<span class=\"keyword\">True</span>):</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd，sudo</li>\n</ul>\n<p>同shell指令</p>\n<ul>\n<li>execute</li>\n</ul>\n<p>在本地任务中执行其他任务函数，提高代码复用率</p>\n<ul>\n<li>shell_env</li>\n</ul>\n<p>设置环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):</span><br><span class=\"line\">    run(</span><br><span class=\"line\">        <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">            compose_file, PREFIX</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配合fexpect使用</li>\n</ul>\n<p>贴了段之前用过的代码，可用于修饰任务函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">env_init</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码目录</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SRC_PATH</span><br><span class=\"line\">    SRC_PATH = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 私有镜像仓库</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_HOST</span><br><span class=\"line\">    REGISTRY_HOST = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_USER</span><br><span class=\"line\">    REGISTRY_USER = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_PWD</span><br><span class=\"line\">    REGISTRY_PWD = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PREFIX</span><br><span class=\"line\">    PREFIX = <span class=\"string\">\"asset\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 主节点ip</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ip</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][<span class=\"number\">6</span>:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ssl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># EXPECT</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PROMPTS</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @wraps(f)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS</span><br><span class=\"line\">        MANAGER_IP = _get_manager_ip()</span><br><span class=\"line\">        MANAGER_SSL = _get_manager_ssl()</span><br><span class=\"line\">        MANAGER_PWD = env.passwords[env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>]]</span><br><span class=\"line\">        PROMPTS = expect(</span><br><span class=\"line\">            <span class=\"string\">\"Are you sure you want to continue connecting (yes/no)?\"</span>, <span class=\"string\">\"yes\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fabric（python3）\"><a href=\"#fabric（python3）\" class=\"headerlink\" title=\"fabric（python3）\"></a>fabric（python3）</h2><h3 id=\"安装（python3环境）\"><a href=\"#安装（python3环境）\" class=\"headerlink\" title=\"安装（python3环境）\"></a>安装（python3环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabirc3的API相较而言显的抽象简单\"><a href=\"#fabirc3的API相较而言显的抽象简单\" class=\"headerlink\" title=\"fabirc3的API相较而言显的抽象简单\"></a>fabirc3的API相较而言显的抽象简单</h3><ul>\n<li>Connection 作为连接通道抽象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接本地</span></span><br><span class=\"line\">local_conn = Connection(<span class=\"string\">'localhost'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程连接</span></span><br><span class=\"line\"><span class=\"comment\"># 没了envAPI只能自己手动定义连接环境</span></span><br><span class=\"line\">envs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'remote'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'host_name'</span>: <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'host'</span>: <span class=\"string\">'user@x.x.x.x:22'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = Connection(</span><br><span class=\"line\">    env.get(<span class=\"string\">'host'</span>),</span><br><span class=\"line\">    connect_kwargs=&#123;<span class=\"string\">'password'</span>: env.get(<span class=\"string\">'password'</span>)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>task 定义任务</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>通过<code>fab deploy</code>执行该任务，值得注意的是ctx这个变量必须要写<br>指定传参<code>fab start-server --jar-timestamp=20191203-1637 debug=True</code>(让人琢磨尝试了半天)</p>\n<ul>\n<li>其他注意点</li>\n</ul>\n<p>对task任务函数使用装饰器，需要注意ctx的传入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timeit</span><span class=\"params\">(start_msg=None, end_msg=None)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(ctx, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> start_msg:</span><br><span class=\"line\">                print(start_msg)</span><br><span class=\"line\">            start = time.time()</span><br><span class=\"line\">            res = func(ctx, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_msg:</span><br><span class=\"line\">                print(<span class=\"string\">f'<span class=\"subst\">&#123;end_msg&#125;</span>： <span class=\"subst\">&#123;round((time.time() - start), <span class=\"number\">2</span>)&#125;</span>s'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时debug的将无法被解析</span></span><br><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"meta\">@timeit(end_msg='发布完成')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">argspec</span><span class=\"params\">(self, body)</span>:</span></span><br><span class=\"line\">    func = body <span class=\"keyword\">if</span> isinstance(body, types.FunctionType) <span class=\"keyword\">else</span> body.__call__</span><br><span class=\"line\">    spec = inspect.getargspec(func)</span><br><span class=\"line\">    arg_names = spec.args[:]</span><br><span class=\"line\">    matched_args = [reversed(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [spec.args, spec.defaults <span class=\"keyword\">or</span> []]]</span><br><span class=\"line\">    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))</span><br><span class=\"line\">    <span class=\"comment\"># Pop context argument</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        context_arg = arg_names.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> see TODO under __call__, this should be same type</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">\"Tasks must have an initial Context argument!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> spec_dict[context_arg]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg_names, spec_dict</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用</li>\n<li>fabric3是面向程序编程而非面向human编程</li>\n<li>无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧</li>\n</ul>"},{"title":"关于pyspark-dataframe与pandas-dataframe的那些事","date":"2020-03-27T13:31:17.000Z","_content":"{%note info%}\npyspark.dataframe与pandas.dataframe大概目前机器学习算子中最长用到的数据结构了，本文来讲讲各自的常用操作和两者间相互转换。\n{%endnote%}\n<!--more-->\n\n## pyspark\n- 创建spark-session\n\n```python\nfrom pyspark.sql import SparkSession\nsession = (\n    SparkSession.builder.appName(\"spark_pyspark\")\n        .config(\"hive.metastore.uris\", \"thrift://ip:9083\")\n        .config(\"spark.sql.warehouse.dir\", \"/user/hive/warehouse\")\n        .enableHiveSupport()\n        .getOrCreate()\n)\n```\n\n- 通过pyspark-sql进行数据查询、聚合、统计\n\n```python\ndf = session.sql(\"select * from table_name\")\n```\n\n- dataframe数据落地保存\n\n```python\n// 类似的常用的方法还有saveAsPickleFile\ndf.rdd.saveAsTextFile('/tmp/text_file')\n\n// 通过spark-sql\ndf.write.saveAsTable(output_table, None, \"overwrite\", None)\n```\n\n- 重新读取落地的文件\n\t   \n```python\n// p类型为list\np = session.sparkContext.pickleFile('/tmp/pickle_file/part-00000').collect()\n```\n\n- 重新回到dataframe\n\n```python\ndf = session.createDataFrame(p)\n```\n\n- datafram实例化\n\n```python\n// csv to dataframe\n// schema数据类型为 `from pyspark.sql.types import *`\ndf = (\n    self.session.read.format(\"com.databricks.spark.csv\")\n    .options(\n        header=True,\n        schema=schema,\n        encoding=encoding,\n        delimiter=col_delimiter,\n    )\n    .load(uri) // uri 可以指定hdfs文件或者本地文件\n)\n\n// mysql to dataframe\ndf = (\n    self.session.read.format(\"jdbc\")\n    .options(\n        url=url,\n        driver=\"com.mysql.jdbc.Driver\",\n        dbtable=db_table_name,\n        user=user_name,\n        password=password,\n    )\n    .load()\n)\n```\n\n- pyspark.dataframe to pandas.dataframe\n\n```python\npdf = df.toPandas()\n```\n\n## pandas\n- pandas.dataframe 实例化\n\n```python\nimport pandas as pd\n\n// csv to pdf\npdf = pd.read_csv(file_path)\n```\n\n- dataframe to csv\n\n```python\npdf.to_csv(file_path, index=False)\n```\n\n- pandas.dataframe to pyspark.dataframe\n\n```python\n// session的声明方式见上文\ndf = session.createDataFrame(pdf)\n```\n\n- pdf to string\n\n```python\ns = pdf.to_string()\n```\n\n## 复杂问题\n\n### spark.dataframe如何实现多机同步\n\n正常情况下通过`df.write`落hdfs(上层可能基于hive或者spark-sql)实现共享。\n但若要跨集群共享就要另想办法了。\n解决方案就是将落地数据单独传输：\n\n1、df -> hdfs -> local file -> internet\n2、df -> pdf -> byte or string -> internet\n显然第二种方法只需要落地一次，更优\n\n```python\n# spark df to pandas df\npdf = df.toPandas()\n\n# pandas df to string\ns = pdf.to_string()\n\n# string to bytes\nb = str.encode(s)\n\n# send\n\n# bytes to pandas df\nfrom io import StringIO\ns = str(bytes_data,'utf-8')\n// sep 必须要指定，非则将结构混乱\ndf = pd.read_csv(StringIO(s), sep=\"\\s+\")\n```\n\n### pandas.dataframe数据精度问题\n当pandas.dataframe to_csv或者转为pysprk.dataframe时，会默认进行精度转换，\nto_csv中提供了指定精度的参数，然而每列特征的精度本就可能不一致，所以最好还是完整保留当前的数据内容。\n解决方案：\n1、通过float_format指定最长有效数字，`g`不补零，`f`补零\n\n```python\npdf.to_csv(file_path, index=False, float_format=\"%.10g\")\n```\n2、使用`pdf.to_string`的方式，保存数据快照，然后手动进行数据转换为csv。","source":"_posts/2020-03-27-关于pyspark-dataframe与pandas-dataframe的那些事.md","raw":"---\ntitle: 关于pyspark-dataframe与pandas-dataframe的那些事\ndate: 2020-03-27 21:31:17\ntags:\n- pysqark\n- pandas\ncategories:\n- python\n---\n{%note info%}\npyspark.dataframe与pandas.dataframe大概目前机器学习算子中最长用到的数据结构了，本文来讲讲各自的常用操作和两者间相互转换。\n{%endnote%}\n<!--more-->\n\n## pyspark\n- 创建spark-session\n\n```python\nfrom pyspark.sql import SparkSession\nsession = (\n    SparkSession.builder.appName(\"spark_pyspark\")\n        .config(\"hive.metastore.uris\", \"thrift://ip:9083\")\n        .config(\"spark.sql.warehouse.dir\", \"/user/hive/warehouse\")\n        .enableHiveSupport()\n        .getOrCreate()\n)\n```\n\n- 通过pyspark-sql进行数据查询、聚合、统计\n\n```python\ndf = session.sql(\"select * from table_name\")\n```\n\n- dataframe数据落地保存\n\n```python\n// 类似的常用的方法还有saveAsPickleFile\ndf.rdd.saveAsTextFile('/tmp/text_file')\n\n// 通过spark-sql\ndf.write.saveAsTable(output_table, None, \"overwrite\", None)\n```\n\n- 重新读取落地的文件\n\t   \n```python\n// p类型为list\np = session.sparkContext.pickleFile('/tmp/pickle_file/part-00000').collect()\n```\n\n- 重新回到dataframe\n\n```python\ndf = session.createDataFrame(p)\n```\n\n- datafram实例化\n\n```python\n// csv to dataframe\n// schema数据类型为 `from pyspark.sql.types import *`\ndf = (\n    self.session.read.format(\"com.databricks.spark.csv\")\n    .options(\n        header=True,\n        schema=schema,\n        encoding=encoding,\n        delimiter=col_delimiter,\n    )\n    .load(uri) // uri 可以指定hdfs文件或者本地文件\n)\n\n// mysql to dataframe\ndf = (\n    self.session.read.format(\"jdbc\")\n    .options(\n        url=url,\n        driver=\"com.mysql.jdbc.Driver\",\n        dbtable=db_table_name,\n        user=user_name,\n        password=password,\n    )\n    .load()\n)\n```\n\n- pyspark.dataframe to pandas.dataframe\n\n```python\npdf = df.toPandas()\n```\n\n## pandas\n- pandas.dataframe 实例化\n\n```python\nimport pandas as pd\n\n// csv to pdf\npdf = pd.read_csv(file_path)\n```\n\n- dataframe to csv\n\n```python\npdf.to_csv(file_path, index=False)\n```\n\n- pandas.dataframe to pyspark.dataframe\n\n```python\n// session的声明方式见上文\ndf = session.createDataFrame(pdf)\n```\n\n- pdf to string\n\n```python\ns = pdf.to_string()\n```\n\n## 复杂问题\n\n### spark.dataframe如何实现多机同步\n\n正常情况下通过`df.write`落hdfs(上层可能基于hive或者spark-sql)实现共享。\n但若要跨集群共享就要另想办法了。\n解决方案就是将落地数据单独传输：\n\n1、df -> hdfs -> local file -> internet\n2、df -> pdf -> byte or string -> internet\n显然第二种方法只需要落地一次，更优\n\n```python\n# spark df to pandas df\npdf = df.toPandas()\n\n# pandas df to string\ns = pdf.to_string()\n\n# string to bytes\nb = str.encode(s)\n\n# send\n\n# bytes to pandas df\nfrom io import StringIO\ns = str(bytes_data,'utf-8')\n// sep 必须要指定，非则将结构混乱\ndf = pd.read_csv(StringIO(s), sep=\"\\s+\")\n```\n\n### pandas.dataframe数据精度问题\n当pandas.dataframe to_csv或者转为pysprk.dataframe时，会默认进行精度转换，\nto_csv中提供了指定精度的参数，然而每列特征的精度本就可能不一致，所以最好还是完整保留当前的数据内容。\n解决方案：\n1、通过float_format指定最长有效数字，`g`不补零，`f`补零\n\n```python\npdf.to_csv(file_path, index=False, float_format=\"%.10g\")\n```\n2、使用`pdf.to_string`的方式，保存数据快照，然后手动进行数据转换为csv。","slug":"关于pyspark-dataframe与pandas-dataframe的那些事","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v6m001716p763vcugjd","content":"<div class=\"note info\"><p>pyspark.dataframe与pandas.dataframe大概目前机器学习算子中最长用到的数据结构了，本文来讲讲各自的常用操作和两者间相互转换。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"pyspark\"><a href=\"#pyspark\" class=\"headerlink\" title=\"pyspark\"></a>pyspark</h2><ul>\n<li>创建spark-session</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SparkSession</span><br><span class=\"line\">session = (</span><br><span class=\"line\">    SparkSession.builder.appName(<span class=\"string\">\"spark_pyspark\"</span>)</span><br><span class=\"line\">        .config(<span class=\"string\">\"hive.metastore.uris\"</span>, <span class=\"string\">\"thrift://ip:9083\"</span>)</span><br><span class=\"line\">        .config(<span class=\"string\">\"spark.sql.warehouse.dir\"</span>, <span class=\"string\">\"/user/hive/warehouse\"</span>)</span><br><span class=\"line\">        .enableHiveSupport()</span><br><span class=\"line\">        .getOrCreate()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过pyspark-sql进行数据查询、聚合、统计</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = session.sql(<span class=\"string\">\"select * from table_name\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dataframe数据落地保存</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类似的常用的方法还有saveAsPickleFile</span><br><span class=\"line\">df.rdd.saveAsTextFile(<span class=\"string\">'/tmp/text_file'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过spark-sql</span><br><span class=\"line\">df.write.saveAsTable(output_table, <span class=\"keyword\">None</span>, <span class=\"string\">\"overwrite\"</span>, <span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新读取落地的文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// p类型为list</span><br><span class=\"line\">p = session.sparkContext.pickleFile(<span class=\"string\">'/tmp/pickle_file/part-00000'</span>).collect()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新回到dataframe</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = session.createDataFrame(p)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>datafram实例化</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// csv to dataframe</span><br><span class=\"line\">// schema数据类型为 `<span class=\"keyword\">from</span> pyspark.sql.types <span class=\"keyword\">import</span> *`</span><br><span class=\"line\">df = (</span><br><span class=\"line\">    self.session.read.format(<span class=\"string\">\"com.databricks.spark.csv\"</span>)</span><br><span class=\"line\">    .options(</span><br><span class=\"line\">        header=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">        schema=schema,</span><br><span class=\"line\">        encoding=encoding,</span><br><span class=\"line\">        delimiter=col_delimiter,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .load(uri) // uri 可以指定hdfs文件或者本地文件</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// mysql to dataframe</span><br><span class=\"line\">df = (</span><br><span class=\"line\">    self.session.read.format(<span class=\"string\">\"jdbc\"</span>)</span><br><span class=\"line\">    .options(</span><br><span class=\"line\">        url=url,</span><br><span class=\"line\">        driver=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>,</span><br><span class=\"line\">        dbtable=db_table_name,</span><br><span class=\"line\">        user=user_name,</span><br><span class=\"line\">        password=password,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .load()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pyspark.dataframe to pandas.dataframe</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf = df.toPandas()</span><br></pre></td></tr></table></figure>\n<h2 id=\"pandas\"><a href=\"#pandas\" class=\"headerlink\" title=\"pandas\"></a>pandas</h2><ul>\n<li>pandas.dataframe 实例化</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">// csv to pdf</span><br><span class=\"line\">pdf = pd.read_csv(file_path)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dataframe to csv</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf.to_csv(file_path, index=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pandas.dataframe to pyspark.dataframe</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// session的声明方式见上文</span><br><span class=\"line\">df = session.createDataFrame(pdf)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pdf to string</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = pdf.to_string()</span><br></pre></td></tr></table></figure>\n<h2 id=\"复杂问题\"><a href=\"#复杂问题\" class=\"headerlink\" title=\"复杂问题\"></a>复杂问题</h2><h3 id=\"spark-dataframe如何实现多机同步\"><a href=\"#spark-dataframe如何实现多机同步\" class=\"headerlink\" title=\"spark.dataframe如何实现多机同步\"></a>spark.dataframe如何实现多机同步</h3><p>正常情况下通过<code>df.write</code>落hdfs(上层可能基于hive或者spark-sql)实现共享。<br>但若要跨集群共享就要另想办法了。<br>解决方案就是将落地数据单独传输：</p>\n<p>1、df -&gt; hdfs -&gt; local file -&gt; internet<br>2、df -&gt; pdf -&gt; byte or string -&gt; internet<br>显然第二种方法只需要落地一次，更优</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># spark df to pandas df</span></span><br><span class=\"line\">pdf = df.toPandas()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pandas df to string</span></span><br><span class=\"line\">s = pdf.to_string()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># string to bytes</span></span><br><span class=\"line\">b = str.encode(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># send</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bytes to pandas df</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\">s = str(bytes_data,<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">// sep 必须要指定，非则将结构混乱</span><br><span class=\"line\">df = pd.read_csv(StringIO(s), sep=<span class=\"string\">\"\\s+\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"pandas-dataframe数据精度问题\"><a href=\"#pandas-dataframe数据精度问题\" class=\"headerlink\" title=\"pandas.dataframe数据精度问题\"></a>pandas.dataframe数据精度问题</h3><p>当pandas.dataframe to_csv或者转为pysprk.dataframe时，会默认进行精度转换，<br>to_csv中提供了指定精度的参数，然而每列特征的精度本就可能不一致，所以最好还是完整保留当前的数据内容。<br>解决方案：<br>1、通过float_format指定最长有效数字，<code>g</code>不补零，<code>f</code>补零</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf.to_csv(file_path, index=<span class=\"keyword\">False</span>, float_format=<span class=\"string\">\"%.10g\"</span>)</span><br></pre></td></tr></table></figure>\n<p>2、使用<code>pdf.to_string</code>的方式，保存数据快照，然后手动进行数据转换为csv。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>pyspark.dataframe与pandas.dataframe大概目前机器学习算子中最长用到的数据结构了，本文来讲讲各自的常用操作和两者间相互转换。</p></div>","more":"<h2 id=\"pyspark\"><a href=\"#pyspark\" class=\"headerlink\" title=\"pyspark\"></a>pyspark</h2><ul>\n<li>创建spark-session</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SparkSession</span><br><span class=\"line\">session = (</span><br><span class=\"line\">    SparkSession.builder.appName(<span class=\"string\">\"spark_pyspark\"</span>)</span><br><span class=\"line\">        .config(<span class=\"string\">\"hive.metastore.uris\"</span>, <span class=\"string\">\"thrift://ip:9083\"</span>)</span><br><span class=\"line\">        .config(<span class=\"string\">\"spark.sql.warehouse.dir\"</span>, <span class=\"string\">\"/user/hive/warehouse\"</span>)</span><br><span class=\"line\">        .enableHiveSupport()</span><br><span class=\"line\">        .getOrCreate()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过pyspark-sql进行数据查询、聚合、统计</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = session.sql(<span class=\"string\">\"select * from table_name\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dataframe数据落地保存</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类似的常用的方法还有saveAsPickleFile</span><br><span class=\"line\">df.rdd.saveAsTextFile(<span class=\"string\">'/tmp/text_file'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过spark-sql</span><br><span class=\"line\">df.write.saveAsTable(output_table, <span class=\"keyword\">None</span>, <span class=\"string\">\"overwrite\"</span>, <span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新读取落地的文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// p类型为list</span><br><span class=\"line\">p = session.sparkContext.pickleFile(<span class=\"string\">'/tmp/pickle_file/part-00000'</span>).collect()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新回到dataframe</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = session.createDataFrame(p)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>datafram实例化</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// csv to dataframe</span><br><span class=\"line\">// schema数据类型为 `<span class=\"keyword\">from</span> pyspark.sql.types <span class=\"keyword\">import</span> *`</span><br><span class=\"line\">df = (</span><br><span class=\"line\">    self.session.read.format(<span class=\"string\">\"com.databricks.spark.csv\"</span>)</span><br><span class=\"line\">    .options(</span><br><span class=\"line\">        header=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">        schema=schema,</span><br><span class=\"line\">        encoding=encoding,</span><br><span class=\"line\">        delimiter=col_delimiter,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .load(uri) // uri 可以指定hdfs文件或者本地文件</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// mysql to dataframe</span><br><span class=\"line\">df = (</span><br><span class=\"line\">    self.session.read.format(<span class=\"string\">\"jdbc\"</span>)</span><br><span class=\"line\">    .options(</span><br><span class=\"line\">        url=url,</span><br><span class=\"line\">        driver=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>,</span><br><span class=\"line\">        dbtable=db_table_name,</span><br><span class=\"line\">        user=user_name,</span><br><span class=\"line\">        password=password,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .load()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pyspark.dataframe to pandas.dataframe</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf = df.toPandas()</span><br></pre></td></tr></table></figure>\n<h2 id=\"pandas\"><a href=\"#pandas\" class=\"headerlink\" title=\"pandas\"></a>pandas</h2><ul>\n<li>pandas.dataframe 实例化</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">// csv to pdf</span><br><span class=\"line\">pdf = pd.read_csv(file_path)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dataframe to csv</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf.to_csv(file_path, index=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pandas.dataframe to pyspark.dataframe</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// session的声明方式见上文</span><br><span class=\"line\">df = session.createDataFrame(pdf)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pdf to string</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = pdf.to_string()</span><br></pre></td></tr></table></figure>\n<h2 id=\"复杂问题\"><a href=\"#复杂问题\" class=\"headerlink\" title=\"复杂问题\"></a>复杂问题</h2><h3 id=\"spark-dataframe如何实现多机同步\"><a href=\"#spark-dataframe如何实现多机同步\" class=\"headerlink\" title=\"spark.dataframe如何实现多机同步\"></a>spark.dataframe如何实现多机同步</h3><p>正常情况下通过<code>df.write</code>落hdfs(上层可能基于hive或者spark-sql)实现共享。<br>但若要跨集群共享就要另想办法了。<br>解决方案就是将落地数据单独传输：</p>\n<p>1、df -&gt; hdfs -&gt; local file -&gt; internet<br>2、df -&gt; pdf -&gt; byte or string -&gt; internet<br>显然第二种方法只需要落地一次，更优</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># spark df to pandas df</span></span><br><span class=\"line\">pdf = df.toPandas()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pandas df to string</span></span><br><span class=\"line\">s = pdf.to_string()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># string to bytes</span></span><br><span class=\"line\">b = str.encode(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># send</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bytes to pandas df</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\">s = str(bytes_data,<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">// sep 必须要指定，非则将结构混乱</span><br><span class=\"line\">df = pd.read_csv(StringIO(s), sep=<span class=\"string\">\"\\s+\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"pandas-dataframe数据精度问题\"><a href=\"#pandas-dataframe数据精度问题\" class=\"headerlink\" title=\"pandas.dataframe数据精度问题\"></a>pandas.dataframe数据精度问题</h3><p>当pandas.dataframe to_csv或者转为pysprk.dataframe时，会默认进行精度转换，<br>to_csv中提供了指定精度的参数，然而每列特征的精度本就可能不一致，所以最好还是完整保留当前的数据内容。<br>解决方案：<br>1、通过float_format指定最长有效数字，<code>g</code>不补零，<code>f</code>补零</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf.to_csv(file_path, index=<span class=\"keyword\">False</span>, float_format=<span class=\"string\">\"%.10g\"</span>)</span><br></pre></td></tr></table></figure>\n<p>2、使用<code>pdf.to_string</code>的方式，保存数据快照，然后手动进行数据转换为csv。</p>"},{"title":"hexo容器化部署","date":"2019-12-22T14:09:24.000Z","_content":"\n{%note info%}\nhexo容器化部署，从此再无系统环境迁移的烦恼。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 本文介绍从hexo windows环境改造为docker容器化运行环境。\n\n## 改造过程\nhexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。\n- 本着一切从简原则，直接搜了[dockerhub](https://hub.docker.com/search?q=hexo&type=image)，选了个最多下载的[ipple1986/hexo\n](https://hub.docker.com/r/ipple1986/hexo/dockerfile)，发现直接拉取镜像是可以用的：\n\n```bash\ndocker pull ipple1986/hexo\n```\n- 但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性\n- 于是拿着对方的dockerfile尝试重新构建镜像\n\n```\nFROM centos:7\nENV LANG C.UTF-8\nLABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn\nWORKDIR /opt/hexo\nRUN yum install -y  epel-release && \\\nyum install -y nodejs && npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo-cli -g  && hexo init ipple1986 && cd ipple1986 && npm install\nWORKDIR ipple1986\nEXPOSE 4000\nENTRYPOINT [\"hexo\",\"server\"]\n\n```\n- 结果hexo使用直接报错\n\n![nodejs版本过低异常.png](https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png)\n- google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可\n\n```\ncurl --location https://rpm.nodesource.com/setup_10.x | bash\n```\n- 于是，最终的dockerfile为：\n\n```\nFROM centos:7\nENV LC_ALL en_US.UTF-8\nENV TZ=Asia/Shanghai\n\nLABEL maintainer=\"liwei <839728919@qq.com>\"\n\nWORKDIR /opt/hexo\nRUN curl --location https://rpm.nodesource.com/setup_10.x | bash && \\\nyum install -y epel-release nodejs git && \\\nnpm config set registry https://registry.npm.taobao.org && \\\nnpm install hexo-cli -g\n\nEXPOSE 4000\nCMD [\"hexo\", \"server\"]\n```\n\n- 使用指令如下：\n\n```bash\n# 编译镜像\ndocker build -t blog .\n\n# 运行容器\ndocker run -it -v your-code-path:/opt/hexo --name blog blog:latest\n\n# 进入容器\ndocker exec -it blog bash\n\n# hexo部署\nhexo d # 注意需要配置git，亦可手动输入账号密码\n```\n\n## 其他问题\n- hexo在其他主机上的docker容器中`hexo d`部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并`hexo g -d`，成功修复\n","source":"_posts/2019-12-22-hexo容器化部署.md","raw":"---\ntitle: hexo容器化部署\ndate: 2019-12-22 22:09:24\ntags:\n- hexo\ncategories:\n---\n\n{%note info%}\nhexo容器化部署，从此再无系统环境迁移的烦恼。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 本文介绍从hexo windows环境改造为docker容器化运行环境。\n\n## 改造过程\nhexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。\n- 本着一切从简原则，直接搜了[dockerhub](https://hub.docker.com/search?q=hexo&type=image)，选了个最多下载的[ipple1986/hexo\n](https://hub.docker.com/r/ipple1986/hexo/dockerfile)，发现直接拉取镜像是可以用的：\n\n```bash\ndocker pull ipple1986/hexo\n```\n- 但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性\n- 于是拿着对方的dockerfile尝试重新构建镜像\n\n```\nFROM centos:7\nENV LANG C.UTF-8\nLABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn\nWORKDIR /opt/hexo\nRUN yum install -y  epel-release && \\\nyum install -y nodejs && npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo-cli -g  && hexo init ipple1986 && cd ipple1986 && npm install\nWORKDIR ipple1986\nEXPOSE 4000\nENTRYPOINT [\"hexo\",\"server\"]\n\n```\n- 结果hexo使用直接报错\n\n![nodejs版本过低异常.png](https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png)\n- google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可\n\n```\ncurl --location https://rpm.nodesource.com/setup_10.x | bash\n```\n- 于是，最终的dockerfile为：\n\n```\nFROM centos:7\nENV LC_ALL en_US.UTF-8\nENV TZ=Asia/Shanghai\n\nLABEL maintainer=\"liwei <839728919@qq.com>\"\n\nWORKDIR /opt/hexo\nRUN curl --location https://rpm.nodesource.com/setup_10.x | bash && \\\nyum install -y epel-release nodejs git && \\\nnpm config set registry https://registry.npm.taobao.org && \\\nnpm install hexo-cli -g\n\nEXPOSE 4000\nCMD [\"hexo\", \"server\"]\n```\n\n- 使用指令如下：\n\n```bash\n# 编译镜像\ndocker build -t blog .\n\n# 运行容器\ndocker run -it -v your-code-path:/opt/hexo --name blog blog:latest\n\n# 进入容器\ndocker exec -it blog bash\n\n# hexo部署\nhexo d # 注意需要配置git，亦可手动输入账号密码\n```\n\n## 其他问题\n- hexo在其他主机上的docker容器中`hexo d`部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并`hexo g -d`，成功修复\n","slug":"hexo容器化部署","published":1,"updated":"2020-03-28T14:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v6t001916p7loh87fwq","content":"<div class=\"note info\"><p>hexo容器化部署，从此再无系统环境迁移的烦恼。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>本文介绍从hexo windows环境改造为docker容器化运行环境。</li>\n</ul>\n<h2 id=\"改造过程\"><a href=\"#改造过程\" class=\"headerlink\" title=\"改造过程\"></a>改造过程</h2><p>hexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。</p>\n<ul>\n<li>本着一切从简原则，直接搜了<a href=\"https://hub.docker.com/search?q=hexo&amp;type=image\" target=\"_blank\" rel=\"noopener\">dockerhub</a>，选了个最多下载的<a href=\"https://hub.docker.com/r/ipple1986/hexo/dockerfile\" target=\"_blank\" rel=\"noopener\">ipple1986/hexo\n</a>，发现直接拉取镜像是可以用的：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ipple1986/hexo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性</li>\n<li>于是拿着对方的dockerfile尝试重新构建镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">LABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn</span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN yum install -y  epel-release &amp;&amp; \\</span><br><span class=\"line\">yum install -y nodejs &amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-cli -g  &amp;&amp; hexo init ipple1986 &amp;&amp; cd ipple1986 &amp;&amp; npm install</span><br><span class=\"line\">WORKDIR ipple1986</span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">ENTRYPOINT [&quot;hexo&quot;,&quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果hexo使用直接报错</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png\" alt=\"nodejs版本过低异常.png\"></p>\n<ul>\n<li>google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location https://rpm.nodesource.com/setup_10.x | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>于是，最终的dockerfile为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LC_ALL en_US.UTF-8</span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;liwei &lt;839728919@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN curl --location https://rpm.nodesource.com/setup_10.x | bash &amp;&amp; \\</span><br><span class=\"line\">yum install -y epel-release nodejs git &amp;&amp; \\</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org &amp;&amp; \\</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">CMD [&quot;hexo&quot;, &quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用指令如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译镜像</span></span><br><span class=\"line\">docker build -t blog .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">docker run -it -v your-code-path:/opt/hexo --name blog blog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it blog bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo部署</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 注意需要配置git，亦可手动输入账号密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>hexo在其他主机上的docker容器中<code>hexo d</code>部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并<code>hexo g -d</code>，成功修复</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>hexo容器化部署，从此再无系统环境迁移的烦恼。</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>本文介绍从hexo windows环境改造为docker容器化运行环境。</li>\n</ul>\n<h2 id=\"改造过程\"><a href=\"#改造过程\" class=\"headerlink\" title=\"改造过程\"></a>改造过程</h2><p>hexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。</p>\n<ul>\n<li>本着一切从简原则，直接搜了<a href=\"https://hub.docker.com/search?q=hexo&amp;type=image\" target=\"_blank\" rel=\"noopener\">dockerhub</a>，选了个最多下载的<a href=\"https://hub.docker.com/r/ipple1986/hexo/dockerfile\" target=\"_blank\" rel=\"noopener\">ipple1986/hexo\n</a>，发现直接拉取镜像是可以用的：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ipple1986/hexo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性</li>\n<li>于是拿着对方的dockerfile尝试重新构建镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">LABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn</span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN yum install -y  epel-release &amp;&amp; \\</span><br><span class=\"line\">yum install -y nodejs &amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-cli -g  &amp;&amp; hexo init ipple1986 &amp;&amp; cd ipple1986 &amp;&amp; npm install</span><br><span class=\"line\">WORKDIR ipple1986</span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">ENTRYPOINT [&quot;hexo&quot;,&quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果hexo使用直接报错</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png\" alt=\"nodejs版本过低异常.png\"></p>\n<ul>\n<li>google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location https://rpm.nodesource.com/setup_10.x | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>于是，最终的dockerfile为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LC_ALL en_US.UTF-8</span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;liwei &lt;839728919@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN curl --location https://rpm.nodesource.com/setup_10.x | bash &amp;&amp; \\</span><br><span class=\"line\">yum install -y epel-release nodejs git &amp;&amp; \\</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org &amp;&amp; \\</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">CMD [&quot;hexo&quot;, &quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用指令如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译镜像</span></span><br><span class=\"line\">docker build -t blog .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">docker run -it -v your-code-path:/opt/hexo --name blog blog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it blog bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo部署</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 注意需要配置git，亦可手动输入账号密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>hexo在其他主机上的docker容器中<code>hexo d</code>部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并<code>hexo g -d</code>，成功修复</li>\n</ul>"},{"title":"python-pandas.to_csv的使用记录","date":"2020-03-31T11:46:42.000Z","_content":"{%note info%}\n记录下pandas.to_csv函数使用的坑。\n{%endnote%}\n<!--more-->\n\n- 本想聊聊事情起因，经过，结果，奈何手懒，直接记录下结果吧\n- 问题：\n    - 1、pandas读取csv，再to_string，再转回pandas.dataframe，再保存为csv\n    - 2、pandas读取csv，再保存为csv\n    - 1，2保存的数据结果不一致\n- 样本数据：\n\n```\n# sample.csv\na,b,c,d,e,f\n11.0,22.0,1.0,2.0,3.0,4.0\n22.0,33.0,1.0,2.0,3.0,4.0\n33.0,33.0,1.0,2.0,3.0,4.0\n44.0,33.0,1.0,2.0,3.0,4.0\n55.0,33.0,1.0,2.0,3.0,4.0\n66.0,33.0,1.0,2.0,3.0,4.0\n77.0,33.0,1.0,2.0,3.0,4.0\n88.0,33.0,1.0,2.0,3.0,4.0\n```\n- 涉及的代码也简单，如下：\n\n```python\nfrom io import StringIO\n\nimport pandas as pd\n\n\n# 1\npdf = pd.read_csv('sample.csv', sep='\\s+')\npdf.to_csv('/tmp/sample2.csv', index=0, float_format='%.10g')\n\n# 2\npdf2 = pd.read_csv(StringIO(pdf.to_string()), sep='\\s+')\npdf2.to_csv('/tmp/sample2.csv', index=0, float_format='%.10g')\n\n```\n\n- 1的保存结果：\n\n```\n11.0,22.0,1.0,2.0,3.0,4.0\n22.0,33.0,1.0,2.0,3.0,4.0\n33.0,33.0,1.0,2.0,3.0,4.0\n44.0,33.0,1.0,2.0,3.0,4.0\n55.0,33.0,1.0,2.0,3.0,4.0\n66.0,33.0,1.0,2.0,3.0,4.0\n77.0,33.0,1.0,2.0,3.0,4.0\n88.0,33.0,1.0,2.0,3.0,4.0\n```\n\n- 2的保存结果：\n\n```\n11,22,1,2,3,4\n22,33,1,2,3,4\n33,33,1,2,3,4\n44,33,1,2,3,4\n55,33,1,2,3,4\n66,33,1,2,3,4\n77,33,1,2,3,4\n88,33,1,2,3,4\n```\n\n- 解决方案：\n```python\n# 去除float_format='%.10g'\npdf2.to_csv('/tmp/sample2.csv', index=0)\n```","source":"_posts/2020-03-31-python-pandas-to-csv的使用记录.md","raw":"---\ntitle: python-pandas.to_csv的使用记录\ndate: 2020-03-31 19:46:42\ntags:\n- pandas\ncategories:\n- python\n---\n{%note info%}\n记录下pandas.to_csv函数使用的坑。\n{%endnote%}\n<!--more-->\n\n- 本想聊聊事情起因，经过，结果，奈何手懒，直接记录下结果吧\n- 问题：\n    - 1、pandas读取csv，再to_string，再转回pandas.dataframe，再保存为csv\n    - 2、pandas读取csv，再保存为csv\n    - 1，2保存的数据结果不一致\n- 样本数据：\n\n```\n# sample.csv\na,b,c,d,e,f\n11.0,22.0,1.0,2.0,3.0,4.0\n22.0,33.0,1.0,2.0,3.0,4.0\n33.0,33.0,1.0,2.0,3.0,4.0\n44.0,33.0,1.0,2.0,3.0,4.0\n55.0,33.0,1.0,2.0,3.0,4.0\n66.0,33.0,1.0,2.0,3.0,4.0\n77.0,33.0,1.0,2.0,3.0,4.0\n88.0,33.0,1.0,2.0,3.0,4.0\n```\n- 涉及的代码也简单，如下：\n\n```python\nfrom io import StringIO\n\nimport pandas as pd\n\n\n# 1\npdf = pd.read_csv('sample.csv', sep='\\s+')\npdf.to_csv('/tmp/sample2.csv', index=0, float_format='%.10g')\n\n# 2\npdf2 = pd.read_csv(StringIO(pdf.to_string()), sep='\\s+')\npdf2.to_csv('/tmp/sample2.csv', index=0, float_format='%.10g')\n\n```\n\n- 1的保存结果：\n\n```\n11.0,22.0,1.0,2.0,3.0,4.0\n22.0,33.0,1.0,2.0,3.0,4.0\n33.0,33.0,1.0,2.0,3.0,4.0\n44.0,33.0,1.0,2.0,3.0,4.0\n55.0,33.0,1.0,2.0,3.0,4.0\n66.0,33.0,1.0,2.0,3.0,4.0\n77.0,33.0,1.0,2.0,3.0,4.0\n88.0,33.0,1.0,2.0,3.0,4.0\n```\n\n- 2的保存结果：\n\n```\n11,22,1,2,3,4\n22,33,1,2,3,4\n33,33,1,2,3,4\n44,33,1,2,3,4\n55,33,1,2,3,4\n66,33,1,2,3,4\n77,33,1,2,3,4\n88,33,1,2,3,4\n```\n\n- 解决方案：\n```python\n# 去除float_format='%.10g'\npdf2.to_csv('/tmp/sample2.csv', index=0)\n```","slug":"python-pandas-to-csv的使用记录","published":1,"updated":"2020-03-31T12:41:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v76001d16p7yhsg7xyq","content":"<div class=\"note info\"><p>记录下pandas.to_csv函数使用的坑。</p></div>\n<a id=\"more\"></a>\n<ul>\n<li>本想聊聊事情起因，经过，结果，奈何手懒，直接记录下结果吧</li>\n<li>问题：<ul>\n<li>1、pandas读取csv，再to_string，再转回pandas.dataframe，再保存为csv</li>\n<li>2、pandas读取csv，再保存为csv</li>\n<li>1，2保存的数据结果不一致</li>\n</ul>\n</li>\n<li>样本数据：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sample.csv</span><br><span class=\"line\">a,b,c,d,e,f</span><br><span class=\"line\">11.0,22.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">22.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">33.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">44.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">55.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">66.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">77.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">88.0,33.0,1.0,2.0,3.0,4.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>涉及的代码也简单，如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">pdf = pd.read_csv(<span class=\"string\">'sample.csv'</span>, sep=<span class=\"string\">'\\s+'</span>)</span><br><span class=\"line\">pdf.to_csv(<span class=\"string\">'/tmp/sample2.csv'</span>, index=<span class=\"number\">0</span>, float_format=<span class=\"string\">'%.10g'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\">pdf2 = pd.read_csv(StringIO(pdf.to_string()), sep=<span class=\"string\">'\\s+'</span>)</span><br><span class=\"line\">pdf2.to_csv(<span class=\"string\">'/tmp/sample2.csv'</span>, index=<span class=\"number\">0</span>, float_format=<span class=\"string\">'%.10g'</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1的保存结果：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11.0,22.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">22.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">33.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">44.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">55.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">66.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">77.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">88.0,33.0,1.0,2.0,3.0,4.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2的保存结果：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11,22,1,2,3,4</span><br><span class=\"line\">22,33,1,2,3,4</span><br><span class=\"line\">33,33,1,2,3,4</span><br><span class=\"line\">44,33,1,2,3,4</span><br><span class=\"line\">55,33,1,2,3,4</span><br><span class=\"line\">66,33,1,2,3,4</span><br><span class=\"line\">77,33,1,2,3,4</span><br><span class=\"line\">88,33,1,2,3,4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解决方案：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 去除float_format='%.10g'</span></span><br><span class=\"line\">pdf2.to_csv(<span class=\"string\">'/tmp/sample2.csv'</span>, index=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>记录下pandas.to_csv函数使用的坑。</p></div>","more":"<ul>\n<li>本想聊聊事情起因，经过，结果，奈何手懒，直接记录下结果吧</li>\n<li>问题：<ul>\n<li>1、pandas读取csv，再to_string，再转回pandas.dataframe，再保存为csv</li>\n<li>2、pandas读取csv，再保存为csv</li>\n<li>1，2保存的数据结果不一致</li>\n</ul>\n</li>\n<li>样本数据：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sample.csv</span><br><span class=\"line\">a,b,c,d,e,f</span><br><span class=\"line\">11.0,22.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">22.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">33.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">44.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">55.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">66.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">77.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">88.0,33.0,1.0,2.0,3.0,4.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>涉及的代码也简单，如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">pdf = pd.read_csv(<span class=\"string\">'sample.csv'</span>, sep=<span class=\"string\">'\\s+'</span>)</span><br><span class=\"line\">pdf.to_csv(<span class=\"string\">'/tmp/sample2.csv'</span>, index=<span class=\"number\">0</span>, float_format=<span class=\"string\">'%.10g'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\">pdf2 = pd.read_csv(StringIO(pdf.to_string()), sep=<span class=\"string\">'\\s+'</span>)</span><br><span class=\"line\">pdf2.to_csv(<span class=\"string\">'/tmp/sample2.csv'</span>, index=<span class=\"number\">0</span>, float_format=<span class=\"string\">'%.10g'</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1的保存结果：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11.0,22.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">22.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">33.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">44.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">55.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">66.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">77.0,33.0,1.0,2.0,3.0,4.0</span><br><span class=\"line\">88.0,33.0,1.0,2.0,3.0,4.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2的保存结果：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11,22,1,2,3,4</span><br><span class=\"line\">22,33,1,2,3,4</span><br><span class=\"line\">33,33,1,2,3,4</span><br><span class=\"line\">44,33,1,2,3,4</span><br><span class=\"line\">55,33,1,2,3,4</span><br><span class=\"line\">66,33,1,2,3,4</span><br><span class=\"line\">77,33,1,2,3,4</span><br><span class=\"line\">88,33,1,2,3,4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解决方案：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 去除float_format='%.10g'</span></span><br><span class=\"line\">pdf2.to_csv(<span class=\"string\">'/tmp/sample2.csv'</span>, index=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"jenkins前后端分离部署","date":"2020-04-09T12:24:23.000Z","_content":"{%note info%}\n解放手动挡部署，丰衣足食。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 大名鼎鼎jenkins，CI/CD的概念咱就不赘述了，打舌。\n\n## Jenkins的安装及配置\n### Docker环境下的安装\n- 下载Jenkins的Docker镜像：\n\n```bash\ndocker pull jenkins/jenkins:lts\n```\n- 在Docker容器中运行Jenkins：\n\n```bash\ndocker run -p 8080:8080 -p 50000:5000 --name jenkins \\\n-u root \\\n-v /var/jenkins_home:/var/jenkins_home \\\n-d jenkins/jenkins:lts\n```\n- `这点很重要`，配置都在jenkins_home,若需重新挂载,拷贝jenkins_home即可\n\n```\n# 重新封装镜像\ndocker commit 8ba98fd637f6 registry.xx.me/jenkins:latest\n```\n### Jenkins的配置\n运行成功后访问该地址登录Jenkins，第一次登录需要输入管理员密码：http://x.x.x.x:8080/\n![第一次登陆jenkins.jpg](https://i.loli.net/2020/04/10/1XdODQlbnmyTvzr.jpg)\n- 使用管理员密码进行登录，可以使用以下命令从容器启动日志中获取管理密码：\n\n```bash\ndocker logs jenkins\n```\n- 选择安装插件方式，这里我们直接安装推荐的插件：\n选择`安装推荐插件`即可\n- 根据引导提示进行配置，确保插件`Publish Over SSH`，`git`已被安装\n- 在系统管理->系统配置中添加全局ssh的配置，这样Jenkins使用ssh就可以执行远程的linux脚本了：\n![系统全局ssh配置.jpg](https://i.loli.net/2020/04/10/B4KIDoxwch5zpr9.jpg)\n`Homename`为ip\n可以通过ssh公钥的方式在`Key`中填写\n也可以使用账号密码，在`高级`中填写\n注意这里的`Remote Directory\t`会成功后续job中指定脚本环境的初始目录\n\n## 前端部署\n### 环境准备\n- 部署主机需要安装npm，nodejs\n\n```bash\nyum install nodejs npm\n```\n\n### 执行脚本准备\n```bash\n#!/bin/bash\ncd /home/user/deploy/web-front\nnpm run build\n```\n### 在Jenkins中创建执行任务\n- 首先我们需要新建一个任务：\n![新建任务.jpg](https://i.loli.net/2020/04/10/y2tqSXwnorHRsBf.jpg)\n- 指定`自由风格软件`\n![自由风格软件.jpg](https://i.loli.net/2020/04/10/B9YsoD6AbOqckiM.jpg)\n- 设置源代码管理\n![添加源代码管理.jpg](https://i.loli.net/2020/04/10/v1proYaW8VUSTlq.jpg)\n- 之后添加一个执行远程shell脚本的构建，用于编译前端代码\n![设置构建脚本.png](https://i.loli.net/2020/04/10/pmdsiUYu2teTBG8.png)\n\n## 后端部署\n### 环境准备\n- 可以选择在部署主机编译源代码，将编译好的包传入容器\n- 也可以在容器内编译，省去宿主机的环境搭建\n\n### 执行脚本准备\n```bash\n#!/bin/bash\nWORKSPACE=/home/tdops/jenkins_home/workspace\nENV=$1 # 可以指定对应环境的配置文件\nAPP_NAME=web\nCODE_DIR=/home/user/jenkins/${APP_NAME}\nDOCKER_BUILD_DIR=${CODE_DIR}/web\nCORE_DIR=${DOCKER_BUILD_DIR}/core\nWORK_DIR=/home/tdops/deploy/${APP_NAME}\nIMAGE_NAME=registry.xx.me/${APP_NAME}\nLATEST_IMAGE=${IMAGE_NAME}:latest\nDATE_TAG=`date +%Y%m%d`\nEXPOSE_PORT=8089\nEXPOSE_PORT_GRPC=5555\n\nbuild_image_and_push() {\n  # make package\n  cd ${CORE_DIR} && mvn clean install -U\n\n  if [[ $? -ne 0 ]]; then\n      echo \"maven打包失败\" && exit 1\n  fi\n\n  # build docker image\n  cd ${DOCKER_BUILD_DIR} && docker build -t ${LATEST_IMAGE} .\n  echo '----build image----'\n\n  # docker tag\n  docker tag ${LATEST_IMAGE} ${IMAGE_NAME}:${DATE_TAG}\n  echo '----tag image----'\n\n  # docker push\n  docker push ${LATEST_IMAGE}\n  docker push ${IMAGE_NAME}:${DATE_TAG}\n  echo '----push image----'\n}\n\npull_image() {\n  docker pull ${LATEST_IMAGE}\n  echo '----pull image----'\n}\n\nrestart_server() {\n  # docker stop\n  echo '----stop container----'\n  docker stop ${APP_NAME}\n\n  # docker rm\n  echo '----rm container----'\n  docker rm ${APP_NAME}\n\n  # docker run\n  echo '----start container----'\n  docker run -d -it -p ${EXPOSE_PORT}:8089 -p ${EXPOSE_PORT_GRPC}:5555 -e DEPLOY_ENV=${ENV} -v ${WORK_DIR}:/home/admin/${APP_NAME}/log --name ${APP_NAME} ${LATEST_IMAGE} bash\n}\n\nif [[ ! ${ENV} ]]; then\n  build_image_and_push\nelse\n  pull_image\n  restart_server\nfi\n```\n\n\n### 在Jenkins中创建执行任务\n\n- 任务的设置和前端的部署任务类似\n\n## 网关\n- 一般前后端分离项目会使用nginx做静态资源的服务方，并对后端服务做反向代理\n- 简单的提供个配置文件做为例子：\n\n```\nuser admin;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n    client_max_body_size 2g;\n\n    include               /etc/nginx/mime.types;\n    default_type          application/octet-stream;\n    client_body_temp_path /usr/share/nginx/html/nginx_file;\n\n    server {\n        listen 8080;\n        server_name mydomain.com;\n        root /usr/share/nginx/html; \n        location / {\n            try_files $uri /index.html;\n        }\n\n        location ^~ /api {\n            proxy_set_header X-Forwarded-For $remote_addr;\n            proxy_pass http://web-server:8089/api;\n        }\n   }\n}\n```\n\n- docker 运行命令为：\n\n```\ndocker run \\\n  --name nginx \\\n  -it -d -p 8080:8080 \\\n  -v /home/user/deploy/web-front/dist:/usr/share/nginx/html \\\n  -v /home/user/deploy/nginx/nginx.conf:/etc/nginx/nginx.conf \\\n  -v /home/user/deploy/nginx/conf.d:/etc/nginx/conf.d \\\n  -v /home/user/deploy/nginx/log:/var/log/nginx \\\n  --link web-server \\\n  nginx:latest\n```\n\n## 问题记录\n1. No valid crumb was included in the request\n*解决方案*：\n  - 在jenkins 的Configure Global Security下 , 取消“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits）”的勾选\n2. 插件下载过慢，失败\n*解决方案*：\n  - 修改下载源,jenkins_home/updates/default.json\n```\nsed -i 's/http:\\/\\/updates.jenkins-ci.org\\/download/https:\\/\\/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g' default.json && sed -i 's/http:\\/\\/www.google.com/https:\\/\\/www.baidu.com/g' default.json\n```\n3. mvn 未找到命令\n*解决方案*：\n  - 设置环境变量：\n```\nsource /etc/profile\nsource ~/.bash_profile\n```\n  - 或者 在/usr/bin下创建软链接\n```\nln –s /opt/maven/bin/mvn /usr/bin/mvn\n```\n","source":"_posts/2020-04-09-jenkins前后端分离部署.md","raw":"---\ntitle: jenkins前后端分离部署\ndate: 2020-04-09 20:24:23\ntags: jenkins\ncategories: 部署\n---\n{%note info%}\n解放手动挡部署，丰衣足食。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 大名鼎鼎jenkins，CI/CD的概念咱就不赘述了，打舌。\n\n## Jenkins的安装及配置\n### Docker环境下的安装\n- 下载Jenkins的Docker镜像：\n\n```bash\ndocker pull jenkins/jenkins:lts\n```\n- 在Docker容器中运行Jenkins：\n\n```bash\ndocker run -p 8080:8080 -p 50000:5000 --name jenkins \\\n-u root \\\n-v /var/jenkins_home:/var/jenkins_home \\\n-d jenkins/jenkins:lts\n```\n- `这点很重要`，配置都在jenkins_home,若需重新挂载,拷贝jenkins_home即可\n\n```\n# 重新封装镜像\ndocker commit 8ba98fd637f6 registry.xx.me/jenkins:latest\n```\n### Jenkins的配置\n运行成功后访问该地址登录Jenkins，第一次登录需要输入管理员密码：http://x.x.x.x:8080/\n![第一次登陆jenkins.jpg](https://i.loli.net/2020/04/10/1XdODQlbnmyTvzr.jpg)\n- 使用管理员密码进行登录，可以使用以下命令从容器启动日志中获取管理密码：\n\n```bash\ndocker logs jenkins\n```\n- 选择安装插件方式，这里我们直接安装推荐的插件：\n选择`安装推荐插件`即可\n- 根据引导提示进行配置，确保插件`Publish Over SSH`，`git`已被安装\n- 在系统管理->系统配置中添加全局ssh的配置，这样Jenkins使用ssh就可以执行远程的linux脚本了：\n![系统全局ssh配置.jpg](https://i.loli.net/2020/04/10/B4KIDoxwch5zpr9.jpg)\n`Homename`为ip\n可以通过ssh公钥的方式在`Key`中填写\n也可以使用账号密码，在`高级`中填写\n注意这里的`Remote Directory\t`会成功后续job中指定脚本环境的初始目录\n\n## 前端部署\n### 环境准备\n- 部署主机需要安装npm，nodejs\n\n```bash\nyum install nodejs npm\n```\n\n### 执行脚本准备\n```bash\n#!/bin/bash\ncd /home/user/deploy/web-front\nnpm run build\n```\n### 在Jenkins中创建执行任务\n- 首先我们需要新建一个任务：\n![新建任务.jpg](https://i.loli.net/2020/04/10/y2tqSXwnorHRsBf.jpg)\n- 指定`自由风格软件`\n![自由风格软件.jpg](https://i.loli.net/2020/04/10/B9YsoD6AbOqckiM.jpg)\n- 设置源代码管理\n![添加源代码管理.jpg](https://i.loli.net/2020/04/10/v1proYaW8VUSTlq.jpg)\n- 之后添加一个执行远程shell脚本的构建，用于编译前端代码\n![设置构建脚本.png](https://i.loli.net/2020/04/10/pmdsiUYu2teTBG8.png)\n\n## 后端部署\n### 环境准备\n- 可以选择在部署主机编译源代码，将编译好的包传入容器\n- 也可以在容器内编译，省去宿主机的环境搭建\n\n### 执行脚本准备\n```bash\n#!/bin/bash\nWORKSPACE=/home/tdops/jenkins_home/workspace\nENV=$1 # 可以指定对应环境的配置文件\nAPP_NAME=web\nCODE_DIR=/home/user/jenkins/${APP_NAME}\nDOCKER_BUILD_DIR=${CODE_DIR}/web\nCORE_DIR=${DOCKER_BUILD_DIR}/core\nWORK_DIR=/home/tdops/deploy/${APP_NAME}\nIMAGE_NAME=registry.xx.me/${APP_NAME}\nLATEST_IMAGE=${IMAGE_NAME}:latest\nDATE_TAG=`date +%Y%m%d`\nEXPOSE_PORT=8089\nEXPOSE_PORT_GRPC=5555\n\nbuild_image_and_push() {\n  # make package\n  cd ${CORE_DIR} && mvn clean install -U\n\n  if [[ $? -ne 0 ]]; then\n      echo \"maven打包失败\" && exit 1\n  fi\n\n  # build docker image\n  cd ${DOCKER_BUILD_DIR} && docker build -t ${LATEST_IMAGE} .\n  echo '----build image----'\n\n  # docker tag\n  docker tag ${LATEST_IMAGE} ${IMAGE_NAME}:${DATE_TAG}\n  echo '----tag image----'\n\n  # docker push\n  docker push ${LATEST_IMAGE}\n  docker push ${IMAGE_NAME}:${DATE_TAG}\n  echo '----push image----'\n}\n\npull_image() {\n  docker pull ${LATEST_IMAGE}\n  echo '----pull image----'\n}\n\nrestart_server() {\n  # docker stop\n  echo '----stop container----'\n  docker stop ${APP_NAME}\n\n  # docker rm\n  echo '----rm container----'\n  docker rm ${APP_NAME}\n\n  # docker run\n  echo '----start container----'\n  docker run -d -it -p ${EXPOSE_PORT}:8089 -p ${EXPOSE_PORT_GRPC}:5555 -e DEPLOY_ENV=${ENV} -v ${WORK_DIR}:/home/admin/${APP_NAME}/log --name ${APP_NAME} ${LATEST_IMAGE} bash\n}\n\nif [[ ! ${ENV} ]]; then\n  build_image_and_push\nelse\n  pull_image\n  restart_server\nfi\n```\n\n\n### 在Jenkins中创建执行任务\n\n- 任务的设置和前端的部署任务类似\n\n## 网关\n- 一般前后端分离项目会使用nginx做静态资源的服务方，并对后端服务做反向代理\n- 简单的提供个配置文件做为例子：\n\n```\nuser admin;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n    client_max_body_size 2g;\n\n    include               /etc/nginx/mime.types;\n    default_type          application/octet-stream;\n    client_body_temp_path /usr/share/nginx/html/nginx_file;\n\n    server {\n        listen 8080;\n        server_name mydomain.com;\n        root /usr/share/nginx/html; \n        location / {\n            try_files $uri /index.html;\n        }\n\n        location ^~ /api {\n            proxy_set_header X-Forwarded-For $remote_addr;\n            proxy_pass http://web-server:8089/api;\n        }\n   }\n}\n```\n\n- docker 运行命令为：\n\n```\ndocker run \\\n  --name nginx \\\n  -it -d -p 8080:8080 \\\n  -v /home/user/deploy/web-front/dist:/usr/share/nginx/html \\\n  -v /home/user/deploy/nginx/nginx.conf:/etc/nginx/nginx.conf \\\n  -v /home/user/deploy/nginx/conf.d:/etc/nginx/conf.d \\\n  -v /home/user/deploy/nginx/log:/var/log/nginx \\\n  --link web-server \\\n  nginx:latest\n```\n\n## 问题记录\n1. No valid crumb was included in the request\n*解决方案*：\n  - 在jenkins 的Configure Global Security下 , 取消“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits）”的勾选\n2. 插件下载过慢，失败\n*解决方案*：\n  - 修改下载源,jenkins_home/updates/default.json\n```\nsed -i 's/http:\\/\\/updates.jenkins-ci.org\\/download/https:\\/\\/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g' default.json && sed -i 's/http:\\/\\/www.google.com/https:\\/\\/www.baidu.com/g' default.json\n```\n3. mvn 未找到命令\n*解决方案*：\n  - 设置环境变量：\n```\nsource /etc/profile\nsource ~/.bash_profile\n```\n  - 或者 在/usr/bin下创建软链接\n```\nln –s /opt/maven/bin/mvn /usr/bin/mvn\n```\n","slug":"jenkins前后端分离部署","published":1,"updated":"2020-07-25T07:06:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v7b001f16p7np8lz2k5","content":"<div class=\"note info\"><p>解放手动挡部署，丰衣足食。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>大名鼎鼎jenkins，CI/CD的概念咱就不赘述了，打舌。</li>\n</ul>\n<h2 id=\"Jenkins的安装及配置\"><a href=\"#Jenkins的安装及配置\" class=\"headerlink\" title=\"Jenkins的安装及配置\"></a>Jenkins的安装及配置</h2><h3 id=\"Docker环境下的安装\"><a href=\"#Docker环境下的安装\" class=\"headerlink\" title=\"Docker环境下的安装\"></a>Docker环境下的安装</h3><ul>\n<li>下载Jenkins的Docker镜像：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Docker容器中运行Jenkins：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 8080:8080 -p 50000:5000 --name jenkins \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">-v /var/jenkins_home:/var/jenkins_home \\</span><br><span class=\"line\">-d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>这点很重要</code>，配置都在jenkins_home,若需重新挂载,拷贝jenkins_home即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重新封装镜像</span><br><span class=\"line\">docker commit 8ba98fd637f6 registry.xx.me/jenkins:latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"Jenkins的配置\"><a href=\"#Jenkins的配置\" class=\"headerlink\" title=\"Jenkins的配置\"></a>Jenkins的配置</h3><p>运行成功后访问该地址登录Jenkins，第一次登录需要输入管理员密码：<a href=\"http://x.x.x.x:8080/\" target=\"_blank\" rel=\"noopener\">http://x.x.x.x:8080/</a><br><img src=\"https://i.loli.net/2020/04/10/1XdODQlbnmyTvzr.jpg\" alt=\"第一次登陆jenkins.jpg\"></p>\n<ul>\n<li>使用管理员密码进行登录，可以使用以下命令从容器启动日志中获取管理密码：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs jenkins</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择安装插件方式，这里我们直接安装推荐的插件：<br>选择<code>安装推荐插件</code>即可</li>\n<li>根据引导提示进行配置，确保插件<code>Publish Over SSH</code>，<code>git</code>已被安装</li>\n<li>在系统管理-&gt;系统配置中添加全局ssh的配置，这样Jenkins使用ssh就可以执行远程的linux脚本了：<br><img src=\"https://i.loli.net/2020/04/10/B4KIDoxwch5zpr9.jpg\" alt=\"系统全局ssh配置.jpg\"><br><code>Homename</code>为ip<br>可以通过ssh公钥的方式在<code>Key</code>中填写<br>也可以使用账号密码，在<code>高级</code>中填写<br>注意这里的<code>Remote Directory</code>会成功后续job中指定脚本环境的初始目录</li>\n</ul>\n<h2 id=\"前端部署\"><a href=\"#前端部署\" class=\"headerlink\" title=\"前端部署\"></a>前端部署</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>部署主机需要安装npm，nodejs</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nodejs npm</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行脚本准备\"><a href=\"#执行脚本准备\" class=\"headerlink\" title=\"执行脚本准备\"></a>执行脚本准备</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/user/deploy/web-front</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"在Jenkins中创建执行任务\"><a href=\"#在Jenkins中创建执行任务\" class=\"headerlink\" title=\"在Jenkins中创建执行任务\"></a>在Jenkins中创建执行任务</h3><ul>\n<li>首先我们需要新建一个任务：<br><img src=\"https://i.loli.net/2020/04/10/y2tqSXwnorHRsBf.jpg\" alt=\"新建任务.jpg\"></li>\n<li>指定<code>自由风格软件</code><br><img src=\"https://i.loli.net/2020/04/10/B9YsoD6AbOqckiM.jpg\" alt=\"自由风格软件.jpg\"></li>\n<li>设置源代码管理<br><img src=\"https://i.loli.net/2020/04/10/v1proYaW8VUSTlq.jpg\" alt=\"添加源代码管理.jpg\"></li>\n<li>之后添加一个执行远程shell脚本的构建，用于编译前端代码<br><img src=\"https://i.loli.net/2020/04/10/pmdsiUYu2teTBG8.png\" alt=\"设置构建脚本.png\"></li>\n</ul>\n<h2 id=\"后端部署\"><a href=\"#后端部署\" class=\"headerlink\" title=\"后端部署\"></a>后端部署</h2><h3 id=\"环境准备-1\"><a href=\"#环境准备-1\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>可以选择在部署主机编译源代码，将编译好的包传入容器</li>\n<li>也可以在容器内编译，省去宿主机的环境搭建</li>\n</ul>\n<h3 id=\"执行脚本准备-1\"><a href=\"#执行脚本准备-1\" class=\"headerlink\" title=\"执行脚本准备\"></a>执行脚本准备</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">WORKSPACE=/home/tdops/jenkins_home/workspace</span><br><span class=\"line\">ENV=<span class=\"variable\">$1</span> <span class=\"comment\"># 可以指定对应环境的配置文件</span></span><br><span class=\"line\">APP_NAME=web</span><br><span class=\"line\">CODE_DIR=/home/user/jenkins/<span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\">DOCKER_BUILD_DIR=<span class=\"variable\">$&#123;CODE_DIR&#125;</span>/web</span><br><span class=\"line\">CORE_DIR=<span class=\"variable\">$&#123;DOCKER_BUILD_DIR&#125;</span>/core</span><br><span class=\"line\">WORK_DIR=/home/tdops/deploy/<span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\">IMAGE_NAME=registry.xx.me/<span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\">LATEST_IMAGE=<span class=\"variable\">$&#123;IMAGE_NAME&#125;</span>:latest</span><br><span class=\"line\">DATE_TAG=`date +%Y%m%d`</span><br><span class=\"line\">EXPOSE_PORT=8089</span><br><span class=\"line\">EXPOSE_PORT_GRPC=5555</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">build_image_and_push</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\"># make package</span></span><br><span class=\"line\">  <span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;CORE_DIR&#125;</span> &amp;&amp; mvn clean install -U</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ $? -ne 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"maven打包失败\"</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># build docker image</span></span><br><span class=\"line\">  <span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;DOCKER_BUILD_DIR&#125;</span> &amp;&amp; docker build -t <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span> .</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----build image----'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker tag</span></span><br><span class=\"line\">  docker tag <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span> <span class=\"variable\">$&#123;IMAGE_NAME&#125;</span>:<span class=\"variable\">$&#123;DATE_TAG&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----tag image----'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker push</span></span><br><span class=\"line\">  docker push <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span></span><br><span class=\"line\">  docker push <span class=\"variable\">$&#123;IMAGE_NAME&#125;</span>:<span class=\"variable\">$&#123;DATE_TAG&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----push image----'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">pull_image</span></span>() &#123;</span><br><span class=\"line\">  docker pull <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----pull image----'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart_server</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\"># docker stop</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----stop container----'</span></span><br><span class=\"line\">  docker stop <span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker rm</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----rm container----'</span></span><br><span class=\"line\">  docker rm <span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker run</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----start container----'</span></span><br><span class=\"line\">  docker run -d -it -p <span class=\"variable\">$&#123;EXPOSE_PORT&#125;</span>:8089 -p <span class=\"variable\">$&#123;EXPOSE_PORT_GRPC&#125;</span>:5555 -e DEPLOY_ENV=<span class=\"variable\">$&#123;ENV&#125;</span> -v <span class=\"variable\">$&#123;WORK_DIR&#125;</span>:/home/admin/<span class=\"variable\">$&#123;APP_NAME&#125;</span>/<span class=\"built_in\">log</span> --name <span class=\"variable\">$&#123;APP_NAME&#125;</span> <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span> bash</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ ! <span class=\"variable\">$&#123;ENV&#125;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  build_image_and_push</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  pull_image</span><br><span class=\"line\">  restart_server</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在Jenkins中创建执行任务-1\"><a href=\"#在Jenkins中创建执行任务-1\" class=\"headerlink\" title=\"在Jenkins中创建执行任务\"></a>在Jenkins中创建执行任务</h3><ul>\n<li>任务的设置和前端的部署任务类似</li>\n</ul>\n<h2 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h2><ul>\n<li>一般前后端分离项目会使用nginx做静态资源的服务方，并对后端服务做反向代理</li>\n<li>简单的提供个配置文件做为例子：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user admin;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\">    client_max_body_size 2g;</span><br><span class=\"line\"></span><br><span class=\"line\">    include               /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type          application/octet-stream;</span><br><span class=\"line\">    client_body_temp_path /usr/share/nginx/html/nginx_file;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 8080;</span><br><span class=\"line\">        server_name mydomain.com;</span><br><span class=\"line\">        root /usr/share/nginx/html; </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            try_files $uri /index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ^~ /api &#123;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">            proxy_pass http://web-server:8089/api;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>docker 运行命令为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name nginx \\</span><br><span class=\"line\">  -it -d -p 8080:8080 \\</span><br><span class=\"line\">  -v /home/user/deploy/web-front/dist:/usr/share/nginx/html \\</span><br><span class=\"line\">  -v /home/user/deploy/nginx/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">  -v /home/user/deploy/nginx/conf.d:/etc/nginx/conf.d \\</span><br><span class=\"line\">  -v /home/user/deploy/nginx/log:/var/log/nginx \\</span><br><span class=\"line\">  --link web-server \\</span><br><span class=\"line\">  nginx:latest</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><ol>\n<li>No valid crumb was included in the request<br><em>解决方案</em>：<ul>\n<li>在jenkins 的Configure Global Security下 , 取消“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits）”的勾选</li>\n</ul>\n</li>\n<li><p>插件下载过慢，失败<br><em>解决方案</em>：</p>\n<ul>\n<li>修改下载源,jenkins_home/updates/default.json<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/http:\\/\\/updates.jenkins-ci.org\\/download/https:\\/\\/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g&apos; default.json &amp;&amp; sed -i &apos;s/http:\\/\\/www.google.com/https:\\/\\/www.baidu.com/g&apos; default.json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mvn 未找到命令<br><em>解决方案</em>：</p>\n<ul>\n<li><p>设置环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>或者 在/usr/bin下创建软链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln –s /opt/maven/bin/mvn /usr/bin/mvn</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>解放手动挡部署，丰衣足食。</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>大名鼎鼎jenkins，CI/CD的概念咱就不赘述了，打舌。</li>\n</ul>\n<h2 id=\"Jenkins的安装及配置\"><a href=\"#Jenkins的安装及配置\" class=\"headerlink\" title=\"Jenkins的安装及配置\"></a>Jenkins的安装及配置</h2><h3 id=\"Docker环境下的安装\"><a href=\"#Docker环境下的安装\" class=\"headerlink\" title=\"Docker环境下的安装\"></a>Docker环境下的安装</h3><ul>\n<li>下载Jenkins的Docker镜像：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Docker容器中运行Jenkins：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 8080:8080 -p 50000:5000 --name jenkins \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">-v /var/jenkins_home:/var/jenkins_home \\</span><br><span class=\"line\">-d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>这点很重要</code>，配置都在jenkins_home,若需重新挂载,拷贝jenkins_home即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重新封装镜像</span><br><span class=\"line\">docker commit 8ba98fd637f6 registry.xx.me/jenkins:latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"Jenkins的配置\"><a href=\"#Jenkins的配置\" class=\"headerlink\" title=\"Jenkins的配置\"></a>Jenkins的配置</h3><p>运行成功后访问该地址登录Jenkins，第一次登录需要输入管理员密码：<a href=\"http://x.x.x.x:8080/\" target=\"_blank\" rel=\"noopener\">http://x.x.x.x:8080/</a><br><img src=\"https://i.loli.net/2020/04/10/1XdODQlbnmyTvzr.jpg\" alt=\"第一次登陆jenkins.jpg\"></p>\n<ul>\n<li>使用管理员密码进行登录，可以使用以下命令从容器启动日志中获取管理密码：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs jenkins</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择安装插件方式，这里我们直接安装推荐的插件：<br>选择<code>安装推荐插件</code>即可</li>\n<li>根据引导提示进行配置，确保插件<code>Publish Over SSH</code>，<code>git</code>已被安装</li>\n<li>在系统管理-&gt;系统配置中添加全局ssh的配置，这样Jenkins使用ssh就可以执行远程的linux脚本了：<br><img src=\"https://i.loli.net/2020/04/10/B4KIDoxwch5zpr9.jpg\" alt=\"系统全局ssh配置.jpg\"><br><code>Homename</code>为ip<br>可以通过ssh公钥的方式在<code>Key</code>中填写<br>也可以使用账号密码，在<code>高级</code>中填写<br>注意这里的<code>Remote Directory</code>会成功后续job中指定脚本环境的初始目录</li>\n</ul>\n<h2 id=\"前端部署\"><a href=\"#前端部署\" class=\"headerlink\" title=\"前端部署\"></a>前端部署</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>部署主机需要安装npm，nodejs</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nodejs npm</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行脚本准备\"><a href=\"#执行脚本准备\" class=\"headerlink\" title=\"执行脚本准备\"></a>执行脚本准备</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/user/deploy/web-front</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"在Jenkins中创建执行任务\"><a href=\"#在Jenkins中创建执行任务\" class=\"headerlink\" title=\"在Jenkins中创建执行任务\"></a>在Jenkins中创建执行任务</h3><ul>\n<li>首先我们需要新建一个任务：<br><img src=\"https://i.loli.net/2020/04/10/y2tqSXwnorHRsBf.jpg\" alt=\"新建任务.jpg\"></li>\n<li>指定<code>自由风格软件</code><br><img src=\"https://i.loli.net/2020/04/10/B9YsoD6AbOqckiM.jpg\" alt=\"自由风格软件.jpg\"></li>\n<li>设置源代码管理<br><img src=\"https://i.loli.net/2020/04/10/v1proYaW8VUSTlq.jpg\" alt=\"添加源代码管理.jpg\"></li>\n<li>之后添加一个执行远程shell脚本的构建，用于编译前端代码<br><img src=\"https://i.loli.net/2020/04/10/pmdsiUYu2teTBG8.png\" alt=\"设置构建脚本.png\"></li>\n</ul>\n<h2 id=\"后端部署\"><a href=\"#后端部署\" class=\"headerlink\" title=\"后端部署\"></a>后端部署</h2><h3 id=\"环境准备-1\"><a href=\"#环境准备-1\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>可以选择在部署主机编译源代码，将编译好的包传入容器</li>\n<li>也可以在容器内编译，省去宿主机的环境搭建</li>\n</ul>\n<h3 id=\"执行脚本准备-1\"><a href=\"#执行脚本准备-1\" class=\"headerlink\" title=\"执行脚本准备\"></a>执行脚本准备</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">WORKSPACE=/home/tdops/jenkins_home/workspace</span><br><span class=\"line\">ENV=<span class=\"variable\">$1</span> <span class=\"comment\"># 可以指定对应环境的配置文件</span></span><br><span class=\"line\">APP_NAME=web</span><br><span class=\"line\">CODE_DIR=/home/user/jenkins/<span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\">DOCKER_BUILD_DIR=<span class=\"variable\">$&#123;CODE_DIR&#125;</span>/web</span><br><span class=\"line\">CORE_DIR=<span class=\"variable\">$&#123;DOCKER_BUILD_DIR&#125;</span>/core</span><br><span class=\"line\">WORK_DIR=/home/tdops/deploy/<span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\">IMAGE_NAME=registry.xx.me/<span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\">LATEST_IMAGE=<span class=\"variable\">$&#123;IMAGE_NAME&#125;</span>:latest</span><br><span class=\"line\">DATE_TAG=`date +%Y%m%d`</span><br><span class=\"line\">EXPOSE_PORT=8089</span><br><span class=\"line\">EXPOSE_PORT_GRPC=5555</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">build_image_and_push</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\"># make package</span></span><br><span class=\"line\">  <span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;CORE_DIR&#125;</span> &amp;&amp; mvn clean install -U</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ $? -ne 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"maven打包失败\"</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># build docker image</span></span><br><span class=\"line\">  <span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;DOCKER_BUILD_DIR&#125;</span> &amp;&amp; docker build -t <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span> .</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----build image----'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker tag</span></span><br><span class=\"line\">  docker tag <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span> <span class=\"variable\">$&#123;IMAGE_NAME&#125;</span>:<span class=\"variable\">$&#123;DATE_TAG&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----tag image----'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker push</span></span><br><span class=\"line\">  docker push <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span></span><br><span class=\"line\">  docker push <span class=\"variable\">$&#123;IMAGE_NAME&#125;</span>:<span class=\"variable\">$&#123;DATE_TAG&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----push image----'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">pull_image</span></span>() &#123;</span><br><span class=\"line\">  docker pull <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----pull image----'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart_server</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\"># docker stop</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----stop container----'</span></span><br><span class=\"line\">  docker stop <span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker rm</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----rm container----'</span></span><br><span class=\"line\">  docker rm <span class=\"variable\">$&#123;APP_NAME&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># docker run</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'----start container----'</span></span><br><span class=\"line\">  docker run -d -it -p <span class=\"variable\">$&#123;EXPOSE_PORT&#125;</span>:8089 -p <span class=\"variable\">$&#123;EXPOSE_PORT_GRPC&#125;</span>:5555 -e DEPLOY_ENV=<span class=\"variable\">$&#123;ENV&#125;</span> -v <span class=\"variable\">$&#123;WORK_DIR&#125;</span>:/home/admin/<span class=\"variable\">$&#123;APP_NAME&#125;</span>/<span class=\"built_in\">log</span> --name <span class=\"variable\">$&#123;APP_NAME&#125;</span> <span class=\"variable\">$&#123;LATEST_IMAGE&#125;</span> bash</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ ! <span class=\"variable\">$&#123;ENV&#125;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  build_image_and_push</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  pull_image</span><br><span class=\"line\">  restart_server</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在Jenkins中创建执行任务-1\"><a href=\"#在Jenkins中创建执行任务-1\" class=\"headerlink\" title=\"在Jenkins中创建执行任务\"></a>在Jenkins中创建执行任务</h3><ul>\n<li>任务的设置和前端的部署任务类似</li>\n</ul>\n<h2 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h2><ul>\n<li>一般前后端分离项目会使用nginx做静态资源的服务方，并对后端服务做反向代理</li>\n<li>简单的提供个配置文件做为例子：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user admin;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\">    client_max_body_size 2g;</span><br><span class=\"line\"></span><br><span class=\"line\">    include               /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type          application/octet-stream;</span><br><span class=\"line\">    client_body_temp_path /usr/share/nginx/html/nginx_file;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 8080;</span><br><span class=\"line\">        server_name mydomain.com;</span><br><span class=\"line\">        root /usr/share/nginx/html; </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            try_files $uri /index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ^~ /api &#123;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">            proxy_pass http://web-server:8089/api;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>docker 运行命令为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name nginx \\</span><br><span class=\"line\">  -it -d -p 8080:8080 \\</span><br><span class=\"line\">  -v /home/user/deploy/web-front/dist:/usr/share/nginx/html \\</span><br><span class=\"line\">  -v /home/user/deploy/nginx/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">  -v /home/user/deploy/nginx/conf.d:/etc/nginx/conf.d \\</span><br><span class=\"line\">  -v /home/user/deploy/nginx/log:/var/log/nginx \\</span><br><span class=\"line\">  --link web-server \\</span><br><span class=\"line\">  nginx:latest</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><ol>\n<li>No valid crumb was included in the request<br><em>解决方案</em>：<ul>\n<li>在jenkins 的Configure Global Security下 , 取消“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits）”的勾选</li>\n</ul>\n</li>\n<li><p>插件下载过慢，失败<br><em>解决方案</em>：</p>\n<ul>\n<li>修改下载源,jenkins_home/updates/default.json<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/http:\\/\\/updates.jenkins-ci.org\\/download/https:\\/\\/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g&apos; default.json &amp;&amp; sed -i &apos;s/http:\\/\\/www.google.com/https:\\/\\/www.baidu.com/g&apos; default.json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mvn 未找到命令<br><em>解决方案</em>：</p>\n<ul>\n<li><p>设置环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>或者 在/usr/bin下创建软链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln –s /opt/maven/bin/mvn /usr/bin/mvn</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"设计模式学习总结","date":"2020-09-12T10:11:36.000Z","_content":"\n{%note info%}\n落下的都得补上。\n{%endnote%}\n<!--more-->\n\n\n\n- 一张总结图起手\n\n  ![20200908194129.jpg](https://i.loli.net/2020/09/08/z8xwGEeyLJdBZ71.jpg)\n\n## 相似的设计模式对比\n\n- 工厂模式 && 建造者模式\n  - 工厂模式是用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象\n  - 建造者模式是用来创建一种类型的复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象\n  - 比喻\n    - 工厂模式：土豆，面粉，番茄\n    - 建造者模式：披萨\n- 策略模式  && 命令模式\n  - 在策略模式中，不同的策略具有相同的目的、不同的实现、互相之间可以替换。比如，BubbleSort、SelectionSort 都是为了实现排序的，只不过一个是用冒泡排序算法来实现的，另一个是用选择排序算法来实现的。而在命令模式中，不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换\n- 单例模式  && 享元模式  && 缓存  && 静态工厂方法\n  - 他们的共同点是:对象的复用\n  - 不同点:\n    - 应用享元模式是为了对象\"共享使用\"，节省内存\n    - 而应用单例/多例模式是为了限制对象的个数\n    - 应用缓存是为了提高访问效率\n    - 应用对象池(数据库连接池,线程池)是为了对象的\"重复使用\"和管理,主要是为了节省时间\n    - 有一种方法叫 静态工厂方法,例如 Boolean.valueof(),不会在每次调用时返回一个新对象,而是复用已有的,这一点有点像享元模式\n\n- 适配器  && 代理 && 装饰器 && 桥接,:\n  - 他们的共同点是:对方法的增强\n  - 不同点:\n    - 适配器模式的作用是\"适配\",通常用于适配不同的组件,新旧系统\n    - 桥接模式将接口部分和实现部分分离,使两者可以分别扩展\n    - 装饰者模式是对原始类功能进行增强，并且可以支持多次,多种增强\n    - 代理模式实现了代理类和原始类的解耦,使代理类可以用于增强不同的功能\n\n- 策略模式 && 简单工厂模式 && 命令模式:\n  - 共同点:都有对if/else进行下沉\n  - 不同点:\n    - 策略模式根据运行时状态返回一个\"策略\"/\"算法\",这些\"策略\"具有相同目的,比如BubbleSort、SelectionSort 都是为了实现排序\n    - 命令模式中不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换\n    - 而简单工厂更侧重返回一个创建的对象\n\n\n- 中介模式  &&  观察者模式\n\n  - 在观察者模式中，尽管一个参与者既可以是观察者，同时也可以是被观察者，但是，大部分情况下，交互关系往往都是单向的，一个参与者要么是观察者，要么是被观察者，不会兼具两种身份。也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有条理\n  - 而中介模式正好相反。只有当参与者之间的交互关系错综复杂，维护成本很高的时候，我们才考虑使用中介模式。毕竟，中介模式的应用会带来一定的副作用，前面也讲到，它有可能会产生大而复杂的上帝类。除此之外，如果一个参与者状态的改变，其他参与者执行的操作有一定先后顺序的要求，这个时候，中介模式就可以利用中介类，通过先后调用不同参与者的方法，来实现顺序的控制，而观察者模式是无法实现这样的顺序要求的\n\n- 享元模式  &&  单例  && 缓存 && 对象池\n\n  - 享元模式跟单例\n    - 在单例模式中，一个类只能创建一个对象，而在享元模式中，一个类可以创建多个对象，每个对象被多处代码引用共享。实际上，享元模式有点类似于之前讲到的单例的变体：==多例==\n    - 尽管从代码实现上来看，享元模式和多例有很多相似之处，但从设计意图上来看，它们是完全不同的。应用享元模式是为了对象复用，节省内存，而应用多例模式是为了限制对象的个数\n  - 享元模式跟缓存\n    - 享元的“缓存”实际上是“存储”的意思\n    - 通常意义上的缓存，主要是为了提高访问效率，而非复用\n  - 享元模式跟对象池\n    - 对象池、连接池、线程池等池化技术中的“复用”和享元模式中的“复用”实际上是不同的概念\n    - 池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间，在任意时刻，每一个对象、连接、线程，并不会被多处使用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用\n  - 享元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享的，主要目的是节省空间\n\n- 模板模式  &&  回调\n\n  - 从应用场景上来看，同步回调跟模板模式几乎一致。它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。而异步回调跟模板模式有较大差别，更像是观察者模式\n\n  - 从代码实现上来看，回调和模板模式完全不同。回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系\n\n  - 回调相对于模板模式会更加灵活\n\n    - 像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力\n    - 回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类\n    - 如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需要往用到的模板方法中注入回调对象即可\n\n    \n\n## 总结\n\n- 实际上，每个设计模式都应该由两部分组成：第一部分是应用场景，即这个模式可以解决哪类问题；第二部分是解决方案，即这个模式的设计思路和具体的代码实现。不过，代码实现并不是模式必须包含的。如果你单纯地只关注解决方案这一部分，甚至只关注代码实现，就会产生大部分模式看起来都很相似的错觉\n- 实际上，==设计模式之间的主要区别还是在于设计意图==，也就是应用场景。单纯地看设计思路或者代码实现，有些模式确实很相似，比如策略模式和工厂模式","source":"_posts/2020-09-12-设计模式学习总结.md","raw":"---\ntitle: 设计模式学习总结\ndate: 2020-09-12 18:11:36\ntags:\ncategories: 设计模式\n---\n\n{%note info%}\n落下的都得补上。\n{%endnote%}\n<!--more-->\n\n\n\n- 一张总结图起手\n\n  ![20200908194129.jpg](https://i.loli.net/2020/09/08/z8xwGEeyLJdBZ71.jpg)\n\n## 相似的设计模式对比\n\n- 工厂模式 && 建造者模式\n  - 工厂模式是用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象\n  - 建造者模式是用来创建一种类型的复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象\n  - 比喻\n    - 工厂模式：土豆，面粉，番茄\n    - 建造者模式：披萨\n- 策略模式  && 命令模式\n  - 在策略模式中，不同的策略具有相同的目的、不同的实现、互相之间可以替换。比如，BubbleSort、SelectionSort 都是为了实现排序的，只不过一个是用冒泡排序算法来实现的，另一个是用选择排序算法来实现的。而在命令模式中，不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换\n- 单例模式  && 享元模式  && 缓存  && 静态工厂方法\n  - 他们的共同点是:对象的复用\n  - 不同点:\n    - 应用享元模式是为了对象\"共享使用\"，节省内存\n    - 而应用单例/多例模式是为了限制对象的个数\n    - 应用缓存是为了提高访问效率\n    - 应用对象池(数据库连接池,线程池)是为了对象的\"重复使用\"和管理,主要是为了节省时间\n    - 有一种方法叫 静态工厂方法,例如 Boolean.valueof(),不会在每次调用时返回一个新对象,而是复用已有的,这一点有点像享元模式\n\n- 适配器  && 代理 && 装饰器 && 桥接,:\n  - 他们的共同点是:对方法的增强\n  - 不同点:\n    - 适配器模式的作用是\"适配\",通常用于适配不同的组件,新旧系统\n    - 桥接模式将接口部分和实现部分分离,使两者可以分别扩展\n    - 装饰者模式是对原始类功能进行增强，并且可以支持多次,多种增强\n    - 代理模式实现了代理类和原始类的解耦,使代理类可以用于增强不同的功能\n\n- 策略模式 && 简单工厂模式 && 命令模式:\n  - 共同点:都有对if/else进行下沉\n  - 不同点:\n    - 策略模式根据运行时状态返回一个\"策略\"/\"算法\",这些\"策略\"具有相同目的,比如BubbleSort、SelectionSort 都是为了实现排序\n    - 命令模式中不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换\n    - 而简单工厂更侧重返回一个创建的对象\n\n\n- 中介模式  &&  观察者模式\n\n  - 在观察者模式中，尽管一个参与者既可以是观察者，同时也可以是被观察者，但是，大部分情况下，交互关系往往都是单向的，一个参与者要么是观察者，要么是被观察者，不会兼具两种身份。也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有条理\n  - 而中介模式正好相反。只有当参与者之间的交互关系错综复杂，维护成本很高的时候，我们才考虑使用中介模式。毕竟，中介模式的应用会带来一定的副作用，前面也讲到，它有可能会产生大而复杂的上帝类。除此之外，如果一个参与者状态的改变，其他参与者执行的操作有一定先后顺序的要求，这个时候，中介模式就可以利用中介类，通过先后调用不同参与者的方法，来实现顺序的控制，而观察者模式是无法实现这样的顺序要求的\n\n- 享元模式  &&  单例  && 缓存 && 对象池\n\n  - 享元模式跟单例\n    - 在单例模式中，一个类只能创建一个对象，而在享元模式中，一个类可以创建多个对象，每个对象被多处代码引用共享。实际上，享元模式有点类似于之前讲到的单例的变体：==多例==\n    - 尽管从代码实现上来看，享元模式和多例有很多相似之处，但从设计意图上来看，它们是完全不同的。应用享元模式是为了对象复用，节省内存，而应用多例模式是为了限制对象的个数\n  - 享元模式跟缓存\n    - 享元的“缓存”实际上是“存储”的意思\n    - 通常意义上的缓存，主要是为了提高访问效率，而非复用\n  - 享元模式跟对象池\n    - 对象池、连接池、线程池等池化技术中的“复用”和享元模式中的“复用”实际上是不同的概念\n    - 池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间，在任意时刻，每一个对象、连接、线程，并不会被多处使用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用\n  - 享元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享的，主要目的是节省空间\n\n- 模板模式  &&  回调\n\n  - 从应用场景上来看，同步回调跟模板模式几乎一致。它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。而异步回调跟模板模式有较大差别，更像是观察者模式\n\n  - 从代码实现上来看，回调和模板模式完全不同。回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系\n\n  - 回调相对于模板模式会更加灵活\n\n    - 像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力\n    - 回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类\n    - 如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需要往用到的模板方法中注入回调对象即可\n\n    \n\n## 总结\n\n- 实际上，每个设计模式都应该由两部分组成：第一部分是应用场景，即这个模式可以解决哪类问题；第二部分是解决方案，即这个模式的设计思路和具体的代码实现。不过，代码实现并不是模式必须包含的。如果你单纯地只关注解决方案这一部分，甚至只关注代码实现，就会产生大部分模式看起来都很相似的错觉\n- 实际上，==设计模式之间的主要区别还是在于设计意图==，也就是应用场景。单纯地看设计思路或者代码实现，有些模式确实很相似，比如策略模式和工厂模式","slug":"设计模式学习总结","published":1,"updated":"2020-09-12T10:12:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v7r001j16p7s6zf20np","content":"<div class=\"note info\"><p>落下的都得补上。</p></div>\n<a id=\"more\"></a>\n<ul>\n<li><p>一张总结图起手</p>\n<p><img src=\"https://i.loli.net/2020/09/08/z8xwGEeyLJdBZ71.jpg\" alt=\"20200908194129.jpg\"></p>\n</li>\n</ul>\n<h2 id=\"相似的设计模式对比\"><a href=\"#相似的设计模式对比\" class=\"headerlink\" title=\"相似的设计模式对比\"></a>相似的设计模式对比</h2><ul>\n<li>工厂模式 &amp;&amp; 建造者模式<ul>\n<li>工厂模式是用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象</li>\n<li>建造者模式是用来创建一种类型的复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象</li>\n<li>比喻<ul>\n<li>工厂模式：土豆，面粉，番茄</li>\n<li>建造者模式：披萨</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>策略模式  &amp;&amp; 命令模式<ul>\n<li>在策略模式中，不同的策略具有相同的目的、不同的实现、互相之间可以替换。比如，BubbleSort、SelectionSort 都是为了实现排序的，只不过一个是用冒泡排序算法来实现的，另一个是用选择排序算法来实现的。而在命令模式中，不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换</li>\n</ul>\n</li>\n<li><p>单例模式  &amp;&amp; 享元模式  &amp;&amp; 缓存  &amp;&amp; 静态工厂方法</p>\n<ul>\n<li>他们的共同点是:对象的复用</li>\n<li>不同点:<ul>\n<li>应用享元模式是为了对象”共享使用”，节省内存</li>\n<li>而应用单例/多例模式是为了限制对象的个数</li>\n<li>应用缓存是为了提高访问效率</li>\n<li>应用对象池(数据库连接池,线程池)是为了对象的”重复使用”和管理,主要是为了节省时间</li>\n<li>有一种方法叫 静态工厂方法,例如 Boolean.valueof(),不会在每次调用时返回一个新对象,而是复用已有的,这一点有点像享元模式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>适配器  &amp;&amp; 代理 &amp;&amp; 装饰器 &amp;&amp; 桥接,:</p>\n<ul>\n<li>他们的共同点是:对方法的增强</li>\n<li>不同点:<ul>\n<li>适配器模式的作用是”适配”,通常用于适配不同的组件,新旧系统</li>\n<li>桥接模式将接口部分和实现部分分离,使两者可以分别扩展</li>\n<li>装饰者模式是对原始类功能进行增强，并且可以支持多次,多种增强</li>\n<li>代理模式实现了代理类和原始类的解耦,使代理类可以用于增强不同的功能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>策略模式 &amp;&amp; 简单工厂模式 &amp;&amp; 命令模式:</p>\n<ul>\n<li>共同点:都有对if/else进行下沉</li>\n<li>不同点:<ul>\n<li>策略模式根据运行时状态返回一个”策略”/“算法”,这些”策略”具有相同目的,比如BubbleSort、SelectionSort 都是为了实现排序</li>\n<li>命令模式中不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换</li>\n<li>而简单工厂更侧重返回一个创建的对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>中介模式  &amp;&amp;  观察者模式</p>\n<ul>\n<li>在观察者模式中，尽管一个参与者既可以是观察者，同时也可以是被观察者，但是，大部分情况下，交互关系往往都是单向的，一个参与者要么是观察者，要么是被观察者，不会兼具两种身份。也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有条理</li>\n<li>而中介模式正好相反。只有当参与者之间的交互关系错综复杂，维护成本很高的时候，我们才考虑使用中介模式。毕竟，中介模式的应用会带来一定的副作用，前面也讲到，它有可能会产生大而复杂的上帝类。除此之外，如果一个参与者状态的改变，其他参与者执行的操作有一定先后顺序的要求，这个时候，中介模式就可以利用中介类，通过先后调用不同参与者的方法，来实现顺序的控制，而观察者模式是无法实现这样的顺序要求的</li>\n</ul>\n</li>\n<li><p>享元模式  &amp;&amp;  单例  &amp;&amp; 缓存 &amp;&amp; 对象池</p>\n<ul>\n<li>享元模式跟单例<ul>\n<li>在单例模式中，一个类只能创建一个对象，而在享元模式中，一个类可以创建多个对象，每个对象被多处代码引用共享。实际上，享元模式有点类似于之前讲到的单例的变体：==多例==</li>\n<li>尽管从代码实现上来看，享元模式和多例有很多相似之处，但从设计意图上来看，它们是完全不同的。应用享元模式是为了对象复用，节省内存，而应用多例模式是为了限制对象的个数</li>\n</ul>\n</li>\n<li>享元模式跟缓存<ul>\n<li>享元的“缓存”实际上是“存储”的意思</li>\n<li>通常意义上的缓存，主要是为了提高访问效率，而非复用</li>\n</ul>\n</li>\n<li>享元模式跟对象池<ul>\n<li>对象池、连接池、线程池等池化技术中的“复用”和享元模式中的“复用”实际上是不同的概念</li>\n<li>池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间，在任意时刻，每一个对象、连接、线程，并不会被多处使用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用</li>\n</ul>\n</li>\n<li>享元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享的，主要目的是节省空间</li>\n</ul>\n</li>\n<li><p>模板模式  &amp;&amp;  回调</p>\n<ul>\n<li><p>从应用场景上来看，同步回调跟模板模式几乎一致。它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。而异步回调跟模板模式有较大差别，更像是观察者模式</p>\n</li>\n<li><p>从代码实现上来看，回调和模板模式完全不同。回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系</p>\n</li>\n<li><p>回调相对于模板模式会更加灵活</p>\n<ul>\n<li>像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力</li>\n<li>回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类</li>\n<li>如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需要往用到的模板方法中注入回调对象即可</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>实际上，每个设计模式都应该由两部分组成：第一部分是应用场景，即这个模式可以解决哪类问题；第二部分是解决方案，即这个模式的设计思路和具体的代码实现。不过，代码实现并不是模式必须包含的。如果你单纯地只关注解决方案这一部分，甚至只关注代码实现，就会产生大部分模式看起来都很相似的错觉</li>\n<li>实际上，==设计模式之间的主要区别还是在于设计意图==，也就是应用场景。单纯地看设计思路或者代码实现，有些模式确实很相似，比如策略模式和工厂模式</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>落下的都得补上。</p></div>","more":"<ul>\n<li><p>一张总结图起手</p>\n<p><img src=\"https://i.loli.net/2020/09/08/z8xwGEeyLJdBZ71.jpg\" alt=\"20200908194129.jpg\"></p>\n</li>\n</ul>\n<h2 id=\"相似的设计模式对比\"><a href=\"#相似的设计模式对比\" class=\"headerlink\" title=\"相似的设计模式对比\"></a>相似的设计模式对比</h2><ul>\n<li>工厂模式 &amp;&amp; 建造者模式<ul>\n<li>工厂模式是用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象</li>\n<li>建造者模式是用来创建一种类型的复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象</li>\n<li>比喻<ul>\n<li>工厂模式：土豆，面粉，番茄</li>\n<li>建造者模式：披萨</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>策略模式  &amp;&amp; 命令模式<ul>\n<li>在策略模式中，不同的策略具有相同的目的、不同的实现、互相之间可以替换。比如，BubbleSort、SelectionSort 都是为了实现排序的，只不过一个是用冒泡排序算法来实现的，另一个是用选择排序算法来实现的。而在命令模式中，不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换</li>\n</ul>\n</li>\n<li><p>单例模式  &amp;&amp; 享元模式  &amp;&amp; 缓存  &amp;&amp; 静态工厂方法</p>\n<ul>\n<li>他们的共同点是:对象的复用</li>\n<li>不同点:<ul>\n<li>应用享元模式是为了对象”共享使用”，节省内存</li>\n<li>而应用单例/多例模式是为了限制对象的个数</li>\n<li>应用缓存是为了提高访问效率</li>\n<li>应用对象池(数据库连接池,线程池)是为了对象的”重复使用”和管理,主要是为了节省时间</li>\n<li>有一种方法叫 静态工厂方法,例如 Boolean.valueof(),不会在每次调用时返回一个新对象,而是复用已有的,这一点有点像享元模式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>适配器  &amp;&amp; 代理 &amp;&amp; 装饰器 &amp;&amp; 桥接,:</p>\n<ul>\n<li>他们的共同点是:对方法的增强</li>\n<li>不同点:<ul>\n<li>适配器模式的作用是”适配”,通常用于适配不同的组件,新旧系统</li>\n<li>桥接模式将接口部分和实现部分分离,使两者可以分别扩展</li>\n<li>装饰者模式是对原始类功能进行增强，并且可以支持多次,多种增强</li>\n<li>代理模式实现了代理类和原始类的解耦,使代理类可以用于增强不同的功能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>策略模式 &amp;&amp; 简单工厂模式 &amp;&amp; 命令模式:</p>\n<ul>\n<li>共同点:都有对if/else进行下沉</li>\n<li>不同点:<ul>\n<li>策略模式根据运行时状态返回一个”策略”/“算法”,这些”策略”具有相同目的,比如BubbleSort、SelectionSort 都是为了实现排序</li>\n<li>命令模式中不同的命令具有不同的目的，对应不同的处理逻辑，并且互相之间不可替换</li>\n<li>而简单工厂更侧重返回一个创建的对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>中介模式  &amp;&amp;  观察者模式</p>\n<ul>\n<li>在观察者模式中，尽管一个参与者既可以是观察者，同时也可以是被观察者，但是，大部分情况下，交互关系往往都是单向的，一个参与者要么是观察者，要么是被观察者，不会兼具两种身份。也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有条理</li>\n<li>而中介模式正好相反。只有当参与者之间的交互关系错综复杂，维护成本很高的时候，我们才考虑使用中介模式。毕竟，中介模式的应用会带来一定的副作用，前面也讲到，它有可能会产生大而复杂的上帝类。除此之外，如果一个参与者状态的改变，其他参与者执行的操作有一定先后顺序的要求，这个时候，中介模式就可以利用中介类，通过先后调用不同参与者的方法，来实现顺序的控制，而观察者模式是无法实现这样的顺序要求的</li>\n</ul>\n</li>\n<li><p>享元模式  &amp;&amp;  单例  &amp;&amp; 缓存 &amp;&amp; 对象池</p>\n<ul>\n<li>享元模式跟单例<ul>\n<li>在单例模式中，一个类只能创建一个对象，而在享元模式中，一个类可以创建多个对象，每个对象被多处代码引用共享。实际上，享元模式有点类似于之前讲到的单例的变体：==多例==</li>\n<li>尽管从代码实现上来看，享元模式和多例有很多相似之处，但从设计意图上来看，它们是完全不同的。应用享元模式是为了对象复用，节省内存，而应用多例模式是为了限制对象的个数</li>\n</ul>\n</li>\n<li>享元模式跟缓存<ul>\n<li>享元的“缓存”实际上是“存储”的意思</li>\n<li>通常意义上的缓存，主要是为了提高访问效率，而非复用</li>\n</ul>\n</li>\n<li>享元模式跟对象池<ul>\n<li>对象池、连接池、线程池等池化技术中的“复用”和享元模式中的“复用”实际上是不同的概念</li>\n<li>池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间，在任意时刻，每一个对象、连接、线程，并不会被多处使用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用</li>\n</ul>\n</li>\n<li>享元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享的，主要目的是节省空间</li>\n</ul>\n</li>\n<li><p>模板模式  &amp;&amp;  回调</p>\n<ul>\n<li><p>从应用场景上来看，同步回调跟模板模式几乎一致。它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。而异步回调跟模板模式有较大差别，更像是观察者模式</p>\n</li>\n<li><p>从代码实现上来看，回调和模板模式完全不同。回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系</p>\n</li>\n<li><p>回调相对于模板模式会更加灵活</p>\n<ul>\n<li>像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力</li>\n<li>回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类</li>\n<li>如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需要往用到的模板方法中注入回调对象即可</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>实际上，每个设计模式都应该由两部分组成：第一部分是应用场景，即这个模式可以解决哪类问题；第二部分是解决方案，即这个模式的设计思路和具体的代码实现。不过，代码实现并不是模式必须包含的。如果你单纯地只关注解决方案这一部分，甚至只关注代码实现，就会产生大部分模式看起来都很相似的错觉</li>\n<li>实际上，==设计模式之间的主要区别还是在于设计意图==，也就是应用场景。单纯地看设计思路或者代码实现，有些模式确实很相似，比如策略模式和工厂模式</li>\n</ul>"},{"title":"破解安卓机nfc功能模拟卡限制","date":"2020-07-19T13:09:16.000Z","_content":"\n{%note info%}\n本文记录使用`PN532`破解手机厂商对收集nfc功能的限制。\n{%endnote%}\n<!--more-->\n\n## 背景\n\n- 一般安卓旗舰都带有nfc功能，但是简单的使用门卡功能复制了两张卡片，缺无法使用，本文记录使用`PN532`破解手机厂商对收集nfc功能的限制\n\n## 准备材料\n\n- 带nfc功能的`安卓`手机（iphone没试过）\n- `PN532`nfc加解密工具（TB购买）\n- 一张CUID卡，用于克隆卡数据\n- 一台Windows上位机，用于安装PN532驱动\n- 破解卡类型只针对`半加密卡`\n\n## 操作步骤\n\n1. 判断待模拟卡是否为半加密卡\n    - 手机安装`MIFARE Classic Tool`工具，通过`读标签`读取实体卡片数据\n      ![WechatIMG26.jpeg](https://i.loli.net/2020/07/18/pJk3hv4cu6MOsRD.jpg) \n    \n      \n    \n    - 半解密卡数据格式如下\n    ![20200718221445.jpg](https://i.loli.net/2020/07/18/jUFSKEIyl9hXxLt.jpg)\n2. 安装PN532上位机驱动（软件操作大同小异，就不贴图了）\n3. 使用PN532破解，并读取实体卡数据\n    \n    - 将原卡放在PN532上，点击“一键破解”，大概5s后窗口显示破解数据（读出数据后，可以选择保存文件，记住该文件名）\n4. 使用CUID卡克隆实体卡\n    \n    - 将CUID卡放在PN532上，点击“写CUID卡”（因为此时步骤3暂存着实体卡的解密数据），等待CUID卡写入完成，使用该CUID卡去刷门禁，成功则说明克隆完成\n5. 格式化CUID，使其只保留0扇区数据\n    \n    - 将CUID卡放在PN532上，点击“格式化卡”，这样CUID即成了实体卡的同号空卡\n6. 手机模拟CUID卡数据（即实体卡的同号空卡）\n    - （以小米手机为例）小米钱包-==门卡==-模拟实体门卡，讲CUID卡在上手机背面，并完成对应操作\n    ![301595081317_.pic.jpg](https://i.loli.net/2020/07/18/WmZw7TpEuzBDJqL.jpg)\n7. 通过PN532像手机模拟的同号空卡中写入其他扇区加密数据\n    \n    - 讲手机放在PN532上，导入步骤1保存的数据，点击“写普通M1卡”，写入成功加密数据，不出意外，手机上的模拟卡已可以正常使用\n\n- 异常情况\n    - 确认步骤如下，若模拟卡无法使用，则导出模拟卡数据至CUID卡，若CUID卡可以使用，则说明该设备不支持识别模拟卡（一些设备，如家庭门禁不识别模拟卡，暂时无解）\n    \n    - 若CUID卡也无法使用，则说明整体操作存在问题，需仔细阅读操作步骤，并也可以到处模拟卡数据，通过dump数据比对工具和原实体卡导出数据比对，若0扇区前8位数据不一致，则说明没有模拟成功，后8位为厂商识别码，不一致是正常的\n    \n    - 异常情况的`银弹`是使用卡贴（选择CUID卡功能的卡贴）\n    \n      \n## 扫盲\n\n- 芯片分类\n  - 8268卡也叫ID防火墙卡\n  - 手机nfc能模拟的是IC卡\n\n![281595081315_.pic.jpg](https://i.loli.net/2020/07/18/tXbNPakwWYyfOeV.jpg)\n\n- IC卡与ID卡\n\n  [![271595081314_.pic.jpg](https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg)](https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg)\n\n","source":"_posts/2020-07-19-破解安卓机nfc功能模拟卡限制.md","raw":"title: 破解安卓机nfc功能模拟卡限制\ndate: 2020-07-19 21:09:16\ntags: nfc\ncategories: 手机\n\n---\n\n{%note info%}\n本文记录使用`PN532`破解手机厂商对收集nfc功能的限制。\n{%endnote%}\n<!--more-->\n\n## 背景\n\n- 一般安卓旗舰都带有nfc功能，但是简单的使用门卡功能复制了两张卡片，缺无法使用，本文记录使用`PN532`破解手机厂商对收集nfc功能的限制\n\n## 准备材料\n\n- 带nfc功能的`安卓`手机（iphone没试过）\n- `PN532`nfc加解密工具（TB购买）\n- 一张CUID卡，用于克隆卡数据\n- 一台Windows上位机，用于安装PN532驱动\n- 破解卡类型只针对`半加密卡`\n\n## 操作步骤\n\n1. 判断待模拟卡是否为半加密卡\n    - 手机安装`MIFARE Classic Tool`工具，通过`读标签`读取实体卡片数据\n      ![WechatIMG26.jpeg](https://i.loli.net/2020/07/18/pJk3hv4cu6MOsRD.jpg) \n    \n      \n    \n    - 半解密卡数据格式如下\n    ![20200718221445.jpg](https://i.loli.net/2020/07/18/jUFSKEIyl9hXxLt.jpg)\n2. 安装PN532上位机驱动（软件操作大同小异，就不贴图了）\n3. 使用PN532破解，并读取实体卡数据\n    \n    - 将原卡放在PN532上，点击“一键破解”，大概5s后窗口显示破解数据（读出数据后，可以选择保存文件，记住该文件名）\n4. 使用CUID卡克隆实体卡\n    \n    - 将CUID卡放在PN532上，点击“写CUID卡”（因为此时步骤3暂存着实体卡的解密数据），等待CUID卡写入完成，使用该CUID卡去刷门禁，成功则说明克隆完成\n5. 格式化CUID，使其只保留0扇区数据\n    \n    - 将CUID卡放在PN532上，点击“格式化卡”，这样CUID即成了实体卡的同号空卡\n6. 手机模拟CUID卡数据（即实体卡的同号空卡）\n    - （以小米手机为例）小米钱包-==门卡==-模拟实体门卡，讲CUID卡在上手机背面，并完成对应操作\n    ![301595081317_.pic.jpg](https://i.loli.net/2020/07/18/WmZw7TpEuzBDJqL.jpg)\n7. 通过PN532像手机模拟的同号空卡中写入其他扇区加密数据\n    \n    - 讲手机放在PN532上，导入步骤1保存的数据，点击“写普通M1卡”，写入成功加密数据，不出意外，手机上的模拟卡已可以正常使用\n\n- 异常情况\n    - 确认步骤如下，若模拟卡无法使用，则导出模拟卡数据至CUID卡，若CUID卡可以使用，则说明该设备不支持识别模拟卡（一些设备，如家庭门禁不识别模拟卡，暂时无解）\n    \n    - 若CUID卡也无法使用，则说明整体操作存在问题，需仔细阅读操作步骤，并也可以到处模拟卡数据，通过dump数据比对工具和原实体卡导出数据比对，若0扇区前8位数据不一致，则说明没有模拟成功，后8位为厂商识别码，不一致是正常的\n    \n    - 异常情况的`银弹`是使用卡贴（选择CUID卡功能的卡贴）\n    \n      \n## 扫盲\n\n- 芯片分类\n  - 8268卡也叫ID防火墙卡\n  - 手机nfc能模拟的是IC卡\n\n![281595081315_.pic.jpg](https://i.loli.net/2020/07/18/tXbNPakwWYyfOeV.jpg)\n\n- IC卡与ID卡\n\n  [![271595081314_.pic.jpg](https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg)](https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg)\n\n","slug":"破解安卓机nfc功能模拟卡限制","published":1,"updated":"2020-07-19T13:43:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v82001n16p7y2xkuyay","content":"<div class=\"note info\"><p>本文记录使用<code>PN532</code>破解手机厂商对收集nfc功能的限制。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>一般安卓旗舰都带有nfc功能，但是简单的使用门卡功能复制了两张卡片，缺无法使用，本文记录使用<code>PN532</code>破解手机厂商对收集nfc功能的限制</li>\n</ul>\n<h2 id=\"准备材料\"><a href=\"#准备材料\" class=\"headerlink\" title=\"准备材料\"></a>准备材料</h2><ul>\n<li>带nfc功能的<code>安卓</code>手机（iphone没试过）</li>\n<li><code>PN532</code>nfc加解密工具（TB购买）</li>\n<li>一张CUID卡，用于克隆卡数据</li>\n<li>一台Windows上位机，用于安装PN532驱动</li>\n<li>破解卡类型只针对<code>半加密卡</code></li>\n</ul>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ol>\n<li>判断待模拟卡是否为半加密卡<ul>\n<li>手机安装<code>MIFARE Classic Tool</code>工具，通过<code>读标签</code>读取实体卡片数据<br><img src=\"https://i.loli.net/2020/07/18/pJk3hv4cu6MOsRD.jpg\" alt=\"WechatIMG26.jpeg\"> </li>\n</ul>\n</li>\n</ol>\n<pre><code>- 半解密卡数据格式如下\n![20200718221445.jpg](https://i.loli.net/2020/07/18/jUFSKEIyl9hXxLt.jpg)\n</code></pre><ol start=\"2\">\n<li>安装PN532上位机驱动（软件操作大同小异，就不贴图了）</li>\n<li><p>使用PN532破解，并读取实体卡数据</p>\n<ul>\n<li>将原卡放在PN532上，点击“一键破解”，大概5s后窗口显示破解数据（读出数据后，可以选择保存文件，记住该文件名）</li>\n</ul>\n</li>\n<li><p>使用CUID卡克隆实体卡</p>\n<ul>\n<li>将CUID卡放在PN532上，点击“写CUID卡”（因为此时步骤3暂存着实体卡的解密数据），等待CUID卡写入完成，使用该CUID卡去刷门禁，成功则说明克隆完成</li>\n</ul>\n</li>\n<li><p>格式化CUID，使其只保留0扇区数据</p>\n<ul>\n<li>将CUID卡放在PN532上，点击“格式化卡”，这样CUID即成了实体卡的同号空卡</li>\n</ul>\n</li>\n<li>手机模拟CUID卡数据（即实体卡的同号空卡）<ul>\n<li>（以小米手机为例）小米钱包-==门卡==-模拟实体门卡，讲CUID卡在上手机背面，并完成对应操作<br><img src=\"https://i.loli.net/2020/07/18/WmZw7TpEuzBDJqL.jpg\" alt=\"301595081317_.pic.jpg\"></li>\n</ul>\n</li>\n<li><p>通过PN532像手机模拟的同号空卡中写入其他扇区加密数据</p>\n<ul>\n<li>讲手机放在PN532上，导入步骤1保存的数据，点击“写普通M1卡”，写入成功加密数据，不出意外，手机上的模拟卡已可以正常使用</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>异常情况</p>\n<ul>\n<li><p>确认步骤如下，若模拟卡无法使用，则导出模拟卡数据至CUID卡，若CUID卡可以使用，则说明该设备不支持识别模拟卡（一些设备，如家庭门禁不识别模拟卡，暂时无解）</p>\n</li>\n<li><p>若CUID卡也无法使用，则说明整体操作存在问题，需仔细阅读操作步骤，并也可以到处模拟卡数据，通过dump数据比对工具和原实体卡导出数据比对，若0扇区前8位数据不一致，则说明没有模拟成功，后8位为厂商识别码，不一致是正常的</p>\n</li>\n<li><p>异常情况的<code>银弹</code>是使用卡贴（选择CUID卡功能的卡贴）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"扫盲\"><a href=\"#扫盲\" class=\"headerlink\" title=\"扫盲\"></a>扫盲</h2><ul>\n<li>芯片分类<ul>\n<li>8268卡也叫ID防火墙卡</li>\n<li>手机nfc能模拟的是IC卡</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/07/18/tXbNPakwWYyfOeV.jpg\" alt=\"281595081315_.pic.jpg\"></p>\n<ul>\n<li><p>IC卡与ID卡</p>\n<p><a href=\"https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg\" alt=\"271595081314_.pic.jpg\"></a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文记录使用<code>PN532</code>破解手机厂商对收集nfc功能的限制。</p></div>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>一般安卓旗舰都带有nfc功能，但是简单的使用门卡功能复制了两张卡片，缺无法使用，本文记录使用<code>PN532</code>破解手机厂商对收集nfc功能的限制</li>\n</ul>\n<h2 id=\"准备材料\"><a href=\"#准备材料\" class=\"headerlink\" title=\"准备材料\"></a>准备材料</h2><ul>\n<li>带nfc功能的<code>安卓</code>手机（iphone没试过）</li>\n<li><code>PN532</code>nfc加解密工具（TB购买）</li>\n<li>一张CUID卡，用于克隆卡数据</li>\n<li>一台Windows上位机，用于安装PN532驱动</li>\n<li>破解卡类型只针对<code>半加密卡</code></li>\n</ul>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ol>\n<li>判断待模拟卡是否为半加密卡<ul>\n<li>手机安装<code>MIFARE Classic Tool</code>工具，通过<code>读标签</code>读取实体卡片数据<br><img src=\"https://i.loli.net/2020/07/18/pJk3hv4cu6MOsRD.jpg\" alt=\"WechatIMG26.jpeg\"> </li>\n</ul>\n</li>\n</ol>\n<pre><code>- 半解密卡数据格式如下\n![20200718221445.jpg](https://i.loli.net/2020/07/18/jUFSKEIyl9hXxLt.jpg)\n</code></pre><ol start=\"2\">\n<li>安装PN532上位机驱动（软件操作大同小异，就不贴图了）</li>\n<li><p>使用PN532破解，并读取实体卡数据</p>\n<ul>\n<li>将原卡放在PN532上，点击“一键破解”，大概5s后窗口显示破解数据（读出数据后，可以选择保存文件，记住该文件名）</li>\n</ul>\n</li>\n<li><p>使用CUID卡克隆实体卡</p>\n<ul>\n<li>将CUID卡放在PN532上，点击“写CUID卡”（因为此时步骤3暂存着实体卡的解密数据），等待CUID卡写入完成，使用该CUID卡去刷门禁，成功则说明克隆完成</li>\n</ul>\n</li>\n<li><p>格式化CUID，使其只保留0扇区数据</p>\n<ul>\n<li>将CUID卡放在PN532上，点击“格式化卡”，这样CUID即成了实体卡的同号空卡</li>\n</ul>\n</li>\n<li>手机模拟CUID卡数据（即实体卡的同号空卡）<ul>\n<li>（以小米手机为例）小米钱包-==门卡==-模拟实体门卡，讲CUID卡在上手机背面，并完成对应操作<br><img src=\"https://i.loli.net/2020/07/18/WmZw7TpEuzBDJqL.jpg\" alt=\"301595081317_.pic.jpg\"></li>\n</ul>\n</li>\n<li><p>通过PN532像手机模拟的同号空卡中写入其他扇区加密数据</p>\n<ul>\n<li>讲手机放在PN532上，导入步骤1保存的数据，点击“写普通M1卡”，写入成功加密数据，不出意外，手机上的模拟卡已可以正常使用</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>异常情况</p>\n<ul>\n<li><p>确认步骤如下，若模拟卡无法使用，则导出模拟卡数据至CUID卡，若CUID卡可以使用，则说明该设备不支持识别模拟卡（一些设备，如家庭门禁不识别模拟卡，暂时无解）</p>\n</li>\n<li><p>若CUID卡也无法使用，则说明整体操作存在问题，需仔细阅读操作步骤，并也可以到处模拟卡数据，通过dump数据比对工具和原实体卡导出数据比对，若0扇区前8位数据不一致，则说明没有模拟成功，后8位为厂商识别码，不一致是正常的</p>\n</li>\n<li><p>异常情况的<code>银弹</code>是使用卡贴（选择CUID卡功能的卡贴）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"扫盲\"><a href=\"#扫盲\" class=\"headerlink\" title=\"扫盲\"></a>扫盲</h2><ul>\n<li>芯片分类<ul>\n<li>8268卡也叫ID防火墙卡</li>\n<li>手机nfc能模拟的是IC卡</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/07/18/tXbNPakwWYyfOeV.jpg\" alt=\"281595081315_.pic.jpg\"></p>\n<ul>\n<li><p>IC卡与ID卡</p>\n<p><a href=\"https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2020/07/19/WeODnArb1QuRMIy.jpg\" alt=\"271595081314_.pic.jpg\"></a></p>\n</li>\n</ul>"},{"title":"数据仓库概念总结","date":"2020-10-10T03:11:26.000Z","_content":"\n{%note info%}\n\n{%endnote%}\n<!--more-->\n\n### 数据仓库（Data Warehouse）建模\n\n#### ODS（备份）\n\n1. 保持数据原貌不做任何修改， 起到备份数据的作用。\n2. 数据采用压缩， 减少磁盘存储空间（ 例如： 原始数据 100G， 可以压缩到 10G 左右）\n3. 创建分区表， 防止后续的全表扫描（一般按日期）\n4. 创建外部表。 在企业开发中， 除了自己用的临时表， 创建内部表外， 绝大多数场景都是创建外部表\n\n- 构建步骤\n  1. 用户行为数据（事件&启动），（json to string） hive单行保存\n  2. 业务数据，hdfs to hive\n\n#### DWD（清洗）\n\n- 构建步骤\n  1. 对用户行为数据解析\n  2. 对核心数据进行判空过滤\n  3. 对业务数据采用`维度模型`重新建模， 即`维度退化`\n- DWD 层需`构建维度模型`， 一般采用星型模型， 呈现的状态一般为星座模型\n- 维度建模一般按照以下四个步骤：\n  1. 选择业务过程\n  2. 声明粒度\n  3. 确认维度（维度表）\n     - 原则是： 后续需求中是否要分析相关维度的指标\n     - 维度表： 需要根据维度建模中的星型模型原则进行维度退化\n  4. 确认事实（事实表）\n     - 事实指的是业务中的度量值（次数、 个数、 件数、 金额， 可以进行累加）\n- DWS 层、 DWT 层和 ADS 层都是以需求为驱动， 和维度建模已经没有关系了\n- DWS 和 DWT 都是建宽表， 按照主题去建表。 主题相当于观察问题的角度。 对应着维度表\n\n#### DWS（按天聚合）\n\n- DWS 层统计各个主题对象的当天行为， 服务于 DWT 层的主题宽表\n- 需要建哪些表： 以维度为基准， 去关联对应多个事实表\n- 宽表里面的字段： 是站在不同维度的角度去看事实表， 重点关注事实表聚合后的度量值\n  ![20200927173303.jpg](https://i.loli.net/2020/09/27/gZArseXBRlvfDwE.jpg)\n\n#### DWT（全量聚合统计）\n\n- DWT 层统计各个主题对象的累积行为\n  1.  需要建哪些表： 和 DWS 层一样。 以维度为基准， 去关联对应多个事实表\n  2.  宽表里面的字段： 我们站在维度表的角度去看事实表， 重点关注事实表度量值的累积值、 事实表行为的首次和末次时间(订单事实表至今的累积下单次数、 累积下单金额和某时间段内的累积次数、 累积金额， 以及关注下单行为的首次时间和末次时间)\n\n#### ADS（指标）\n\n- 对系统各大主题指标分别进行分析\n\n---\n\n###  数仓命名规范\n\n- 表命名\n    - ODS层命名为ods_表名\n    - DWD层命名为dwd_dim/fact_表名\n    - DWS层命名为dws_表名\n    - DWT层命名为dwt_表名\n    - ADS层命名为ads_表名\n    - 临时表命名为xxx_tmp\n    - 用户行为表， 以log为后缀\n- 脚本命名\n    - 数据源_to_目标_db/log.sh\n    - 用户行为脚本以log为后缀； 业务数据脚本以db为后缀\n---\n### 表分类\n- 日志表\n    - 启动日志表\n    - 事件日志表（根据事件类型区分）\n- 业务表\n    - 维度表\n        - 全量表\n        - 特殊表\n    - 事实表\n        - 周期型快照事实表\n            - 每日快照，全量导入\n            - 周期型快照事实表存储的数据比较讲究时效性， 时间太久了的意义不大， 可以删除以前的数据\n        - 事务型快照事实表\n            - 一旦产生不会变化，只需导增量\n        - 累计型快照事实表（！！难点，动态分区，sql复杂）\n            - 用事件开始的时间作为分区\n            - 用于跟踪业务事实的变化\n        - 拉链表（！！）\n            - 用户维度表\n                - 修改频率不高，属于缓慢变化维度\n\n\n---\n### 维度表和事实表\n- 维度表\n    - 一般是对事实的描述信息。 每一张维表对应现实世界中的一个对象或者概念\n    - 维表的特征\n        - 维度表的范围很宽（具有多个属性、 列比较多）\n        - 跟事实表相比， 行数相对较小： 通常< 10 万条\n        - 内容相对固定： 编码表\n- 事实表\n    - 事实表中的每行数据代表一个业务事件（ 下单、 支付、 退款、 评价等） 。 “事实” 这个术语表示的是业务事件的度量值（ 可统计次数、 个数、 件数、 金额等） ， 例如， 订单事件中的下单金额\n    - 每一个事实表的行包括： 具有可加性的数值型的度量值、 与维表相连接的外键、 通常具有两个和两个以上的外键、 外键之间表示维表之间多对多的关系（外键+度量值）\n    - 事实表的特征：\n        - 非常的大\n        - 内容相对的窄： 列数较少\n        - 经常发生变化， 每天会新增加很多\n---\n\n### 关系建模和维度建模\n\n- 数据处理分类\n  - 联机事务处理 OLTP（ on-line transactionprocessing） \n    - 保证数据一致性，避免冗余\n  - 联机分析处理 OLAP（ On-Line Analytical Processing）\n\n\n| 对比属性 | OLTP                        | OLAP                        |\n| :------- | :-------------------------- | :-------------------------- |\n| 读特性   | 每次查询只返回少量记录      | 对大量记录进行汇总          |\n| 写特性   | 随机、 低延时写入用户的输入 | 批量导入                    |\n| 使用场景 | 用户， Java EE 项目         | 内部分析师， 为决策提供支持 |\n| 数据表征 | 最新数据状态                | 随时间变化的历史状态        |\n| 数据规模 | GB                          | TB 到 PB                    |\n\n- 维度建模\n  - 星型模型\n    - 标准星形只有单层级\n    - 性能优先\n    - 减少维度就是减少join、减少shuffle\n  - 雪花模型\n    - 多层\n    - 灵活优先\n  - 星座模型\n\n---\n\n### 同步策略\n\n- 全量表： 存储完整的数据。\n- 增量表： 存储新增加的数据。\n- 新增及变化表： 存储新增加的数据和变化的数据。\n- 特殊表： 只需要存储一次\n\n---\n\n### 即席查询\n\n- OLAP（Online Analytical Processing）多维分析\n- ROLAP（Relational OLAP）\n    - 基于关系型数据库\n- MOLAP（Multidimensional OLAP）\n    - 需要预计算\n    - 基于多维数据集（一个多维数据集成为OLAP Cube（立方体））\n    - Cuboid（长方体）\n- Star Schema（星型模型）\n- Dimension（维度）\n- Measure（度量）","source":"_posts/2020-10-10-数据仓库概念总结.md","raw":"---\ntitle: 数据仓库概念总结\ndate: 2020-10-10 11:11:26\ntags: 数据仓库\ncategories: 大数据\n---\n\n{%note info%}\n\n{%endnote%}\n<!--more-->\n\n### 数据仓库（Data Warehouse）建模\n\n#### ODS（备份）\n\n1. 保持数据原貌不做任何修改， 起到备份数据的作用。\n2. 数据采用压缩， 减少磁盘存储空间（ 例如： 原始数据 100G， 可以压缩到 10G 左右）\n3. 创建分区表， 防止后续的全表扫描（一般按日期）\n4. 创建外部表。 在企业开发中， 除了自己用的临时表， 创建内部表外， 绝大多数场景都是创建外部表\n\n- 构建步骤\n  1. 用户行为数据（事件&启动），（json to string） hive单行保存\n  2. 业务数据，hdfs to hive\n\n#### DWD（清洗）\n\n- 构建步骤\n  1. 对用户行为数据解析\n  2. 对核心数据进行判空过滤\n  3. 对业务数据采用`维度模型`重新建模， 即`维度退化`\n- DWD 层需`构建维度模型`， 一般采用星型模型， 呈现的状态一般为星座模型\n- 维度建模一般按照以下四个步骤：\n  1. 选择业务过程\n  2. 声明粒度\n  3. 确认维度（维度表）\n     - 原则是： 后续需求中是否要分析相关维度的指标\n     - 维度表： 需要根据维度建模中的星型模型原则进行维度退化\n  4. 确认事实（事实表）\n     - 事实指的是业务中的度量值（次数、 个数、 件数、 金额， 可以进行累加）\n- DWS 层、 DWT 层和 ADS 层都是以需求为驱动， 和维度建模已经没有关系了\n- DWS 和 DWT 都是建宽表， 按照主题去建表。 主题相当于观察问题的角度。 对应着维度表\n\n#### DWS（按天聚合）\n\n- DWS 层统计各个主题对象的当天行为， 服务于 DWT 层的主题宽表\n- 需要建哪些表： 以维度为基准， 去关联对应多个事实表\n- 宽表里面的字段： 是站在不同维度的角度去看事实表， 重点关注事实表聚合后的度量值\n  ![20200927173303.jpg](https://i.loli.net/2020/09/27/gZArseXBRlvfDwE.jpg)\n\n#### DWT（全量聚合统计）\n\n- DWT 层统计各个主题对象的累积行为\n  1.  需要建哪些表： 和 DWS 层一样。 以维度为基准， 去关联对应多个事实表\n  2.  宽表里面的字段： 我们站在维度表的角度去看事实表， 重点关注事实表度量值的累积值、 事实表行为的首次和末次时间(订单事实表至今的累积下单次数、 累积下单金额和某时间段内的累积次数、 累积金额， 以及关注下单行为的首次时间和末次时间)\n\n#### ADS（指标）\n\n- 对系统各大主题指标分别进行分析\n\n---\n\n###  数仓命名规范\n\n- 表命名\n    - ODS层命名为ods_表名\n    - DWD层命名为dwd_dim/fact_表名\n    - DWS层命名为dws_表名\n    - DWT层命名为dwt_表名\n    - ADS层命名为ads_表名\n    - 临时表命名为xxx_tmp\n    - 用户行为表， 以log为后缀\n- 脚本命名\n    - 数据源_to_目标_db/log.sh\n    - 用户行为脚本以log为后缀； 业务数据脚本以db为后缀\n---\n### 表分类\n- 日志表\n    - 启动日志表\n    - 事件日志表（根据事件类型区分）\n- 业务表\n    - 维度表\n        - 全量表\n        - 特殊表\n    - 事实表\n        - 周期型快照事实表\n            - 每日快照，全量导入\n            - 周期型快照事实表存储的数据比较讲究时效性， 时间太久了的意义不大， 可以删除以前的数据\n        - 事务型快照事实表\n            - 一旦产生不会变化，只需导增量\n        - 累计型快照事实表（！！难点，动态分区，sql复杂）\n            - 用事件开始的时间作为分区\n            - 用于跟踪业务事实的变化\n        - 拉链表（！！）\n            - 用户维度表\n                - 修改频率不高，属于缓慢变化维度\n\n\n---\n### 维度表和事实表\n- 维度表\n    - 一般是对事实的描述信息。 每一张维表对应现实世界中的一个对象或者概念\n    - 维表的特征\n        - 维度表的范围很宽（具有多个属性、 列比较多）\n        - 跟事实表相比， 行数相对较小： 通常< 10 万条\n        - 内容相对固定： 编码表\n- 事实表\n    - 事实表中的每行数据代表一个业务事件（ 下单、 支付、 退款、 评价等） 。 “事实” 这个术语表示的是业务事件的度量值（ 可统计次数、 个数、 件数、 金额等） ， 例如， 订单事件中的下单金额\n    - 每一个事实表的行包括： 具有可加性的数值型的度量值、 与维表相连接的外键、 通常具有两个和两个以上的外键、 外键之间表示维表之间多对多的关系（外键+度量值）\n    - 事实表的特征：\n        - 非常的大\n        - 内容相对的窄： 列数较少\n        - 经常发生变化， 每天会新增加很多\n---\n\n### 关系建模和维度建模\n\n- 数据处理分类\n  - 联机事务处理 OLTP（ on-line transactionprocessing） \n    - 保证数据一致性，避免冗余\n  - 联机分析处理 OLAP（ On-Line Analytical Processing）\n\n\n| 对比属性 | OLTP                        | OLAP                        |\n| :------- | :-------------------------- | :-------------------------- |\n| 读特性   | 每次查询只返回少量记录      | 对大量记录进行汇总          |\n| 写特性   | 随机、 低延时写入用户的输入 | 批量导入                    |\n| 使用场景 | 用户， Java EE 项目         | 内部分析师， 为决策提供支持 |\n| 数据表征 | 最新数据状态                | 随时间变化的历史状态        |\n| 数据规模 | GB                          | TB 到 PB                    |\n\n- 维度建模\n  - 星型模型\n    - 标准星形只有单层级\n    - 性能优先\n    - 减少维度就是减少join、减少shuffle\n  - 雪花模型\n    - 多层\n    - 灵活优先\n  - 星座模型\n\n---\n\n### 同步策略\n\n- 全量表： 存储完整的数据。\n- 增量表： 存储新增加的数据。\n- 新增及变化表： 存储新增加的数据和变化的数据。\n- 特殊表： 只需要存储一次\n\n---\n\n### 即席查询\n\n- OLAP（Online Analytical Processing）多维分析\n- ROLAP（Relational OLAP）\n    - 基于关系型数据库\n- MOLAP（Multidimensional OLAP）\n    - 需要预计算\n    - 基于多维数据集（一个多维数据集成为OLAP Cube（立方体））\n    - Cuboid（长方体）\n- Star Schema（星型模型）\n- Dimension（维度）\n- Measure（度量）","slug":"数据仓库概念总结","published":1,"updated":"2020-10-10T07:22:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v88001p16p7kabqppvj","content":"<div class=\"note info\"></div>\n<a id=\"more\"></a>\n<h3 id=\"数据仓库（Data-Warehouse）建模\"><a href=\"#数据仓库（Data-Warehouse）建模\" class=\"headerlink\" title=\"数据仓库（Data Warehouse）建模\"></a>数据仓库（Data Warehouse）建模</h3><h4 id=\"ODS（备份）\"><a href=\"#ODS（备份）\" class=\"headerlink\" title=\"ODS（备份）\"></a>ODS（备份）</h4><ol>\n<li>保持数据原貌不做任何修改， 起到备份数据的作用。</li>\n<li>数据采用压缩， 减少磁盘存储空间（ 例如： 原始数据 100G， 可以压缩到 10G 左右）</li>\n<li>创建分区表， 防止后续的全表扫描（一般按日期）</li>\n<li>创建外部表。 在企业开发中， 除了自己用的临时表， 创建内部表外， 绝大多数场景都是创建外部表</li>\n</ol>\n<ul>\n<li>构建步骤<ol>\n<li>用户行为数据（事件&amp;启动），（json to string） hive单行保存</li>\n<li>业务数据，hdfs to hive</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"DWD（清洗）\"><a href=\"#DWD（清洗）\" class=\"headerlink\" title=\"DWD（清洗）\"></a>DWD（清洗）</h4><ul>\n<li>构建步骤<ol>\n<li>对用户行为数据解析</li>\n<li>对核心数据进行判空过滤</li>\n<li>对业务数据采用<code>维度模型</code>重新建模， 即<code>维度退化</code></li>\n</ol>\n</li>\n<li>DWD 层需<code>构建维度模型</code>， 一般采用星型模型， 呈现的状态一般为星座模型</li>\n<li>维度建模一般按照以下四个步骤：<ol>\n<li>选择业务过程</li>\n<li>声明粒度</li>\n<li>确认维度（维度表）<ul>\n<li>原则是： 后续需求中是否要分析相关维度的指标</li>\n<li>维度表： 需要根据维度建模中的星型模型原则进行维度退化</li>\n</ul>\n</li>\n<li>确认事实（事实表）<ul>\n<li>事实指的是业务中的度量值（次数、 个数、 件数、 金额， 可以进行累加）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>DWS 层、 DWT 层和 ADS 层都是以需求为驱动， 和维度建模已经没有关系了</li>\n<li>DWS 和 DWT 都是建宽表， 按照主题去建表。 主题相当于观察问题的角度。 对应着维度表</li>\n</ul>\n<h4 id=\"DWS（按天聚合）\"><a href=\"#DWS（按天聚合）\" class=\"headerlink\" title=\"DWS（按天聚合）\"></a>DWS（按天聚合）</h4><ul>\n<li>DWS 层统计各个主题对象的当天行为， 服务于 DWT 层的主题宽表</li>\n<li>需要建哪些表： 以维度为基准， 去关联对应多个事实表</li>\n<li>宽表里面的字段： 是站在不同维度的角度去看事实表， 重点关注事实表聚合后的度量值<br><img src=\"https://i.loli.net/2020/09/27/gZArseXBRlvfDwE.jpg\" alt=\"20200927173303.jpg\"></li>\n</ul>\n<h4 id=\"DWT（全量聚合统计）\"><a href=\"#DWT（全量聚合统计）\" class=\"headerlink\" title=\"DWT（全量聚合统计）\"></a>DWT（全量聚合统计）</h4><ul>\n<li>DWT 层统计各个主题对象的累积行为<ol>\n<li>需要建哪些表： 和 DWS 层一样。 以维度为基准， 去关联对应多个事实表</li>\n<li>宽表里面的字段： 我们站在维度表的角度去看事实表， 重点关注事实表度量值的累积值、 事实表行为的首次和末次时间(订单事实表至今的累积下单次数、 累积下单金额和某时间段内的累积次数、 累积金额， 以及关注下单行为的首次时间和末次时间)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"ADS（指标）\"><a href=\"#ADS（指标）\" class=\"headerlink\" title=\"ADS（指标）\"></a>ADS（指标）</h4><ul>\n<li>对系统各大主题指标分别进行分析</li>\n</ul>\n<hr>\n<h3 id=\"数仓命名规范\"><a href=\"#数仓命名规范\" class=\"headerlink\" title=\"数仓命名规范\"></a>数仓命名规范</h3><ul>\n<li>表命名<ul>\n<li>ODS层命名为ods_表名</li>\n<li>DWD层命名为dwd_dim/fact_表名</li>\n<li>DWS层命名为dws_表名</li>\n<li>DWT层命名为dwt_表名</li>\n<li>ADS层命名为ads_表名</li>\n<li>临时表命名为xxx_tmp</li>\n<li>用户行为表， 以log为后缀</li>\n</ul>\n</li>\n<li>脚本命名<ul>\n<li>数据源_to_目标_db/log.sh</li>\n<li>用户行为脚本以log为后缀； 业务数据脚本以db为后缀</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"表分类\"><a href=\"#表分类\" class=\"headerlink\" title=\"表分类\"></a>表分类</h3><ul>\n<li>日志表<ul>\n<li>启动日志表</li>\n<li>事件日志表（根据事件类型区分）</li>\n</ul>\n</li>\n<li>业务表<ul>\n<li>维度表<ul>\n<li>全量表</li>\n<li>特殊表</li>\n</ul>\n</li>\n<li>事实表<ul>\n<li>周期型快照事实表<ul>\n<li>每日快照，全量导入</li>\n<li>周期型快照事实表存储的数据比较讲究时效性， 时间太久了的意义不大， 可以删除以前的数据</li>\n</ul>\n</li>\n<li>事务型快照事实表<ul>\n<li>一旦产生不会变化，只需导增量</li>\n</ul>\n</li>\n<li>累计型快照事实表（！！难点，动态分区，sql复杂）<ul>\n<li>用事件开始的时间作为分区</li>\n<li>用于跟踪业务事实的变化</li>\n</ul>\n</li>\n<li>拉链表（！！）<ul>\n<li>用户维度表<ul>\n<li>修改频率不高，属于缓慢变化维度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"维度表和事实表\"><a href=\"#维度表和事实表\" class=\"headerlink\" title=\"维度表和事实表\"></a>维度表和事实表</h3><ul>\n<li>维度表<ul>\n<li>一般是对事实的描述信息。 每一张维表对应现实世界中的一个对象或者概念</li>\n<li>维表的特征<ul>\n<li>维度表的范围很宽（具有多个属性、 列比较多）</li>\n<li>跟事实表相比， 行数相对较小： 通常&lt; 10 万条</li>\n<li>内容相对固定： 编码表</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事实表<ul>\n<li>事实表中的每行数据代表一个业务事件（ 下单、 支付、 退款、 评价等） 。 “事实” 这个术语表示的是业务事件的度量值（ 可统计次数、 个数、 件数、 金额等） ， 例如， 订单事件中的下单金额</li>\n<li>每一个事实表的行包括： 具有可加性的数值型的度量值、 与维表相连接的外键、 通常具有两个和两个以上的外键、 外键之间表示维表之间多对多的关系（外键+度量值）</li>\n<li>事实表的特征：<ul>\n<li>非常的大</li>\n<li>内容相对的窄： 列数较少</li>\n<li>经常发生变化， 每天会新增加很多</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"关系建模和维度建模\"><a href=\"#关系建模和维度建模\" class=\"headerlink\" title=\"关系建模和维度建模\"></a>关系建模和维度建模</h3><ul>\n<li>数据处理分类<ul>\n<li>联机事务处理 OLTP（ on-line transactionprocessing） <ul>\n<li>保证数据一致性，避免冗余</li>\n</ul>\n</li>\n<li>联机分析处理 OLAP（ On-Line Analytical Processing）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">对比属性</th>\n<th style=\"text-align:left\">OLTP</th>\n<th style=\"text-align:left\">OLAP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">读特性</td>\n<td style=\"text-align:left\">每次查询只返回少量记录</td>\n<td style=\"text-align:left\">对大量记录进行汇总</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">写特性</td>\n<td style=\"text-align:left\">随机、 低延时写入用户的输入</td>\n<td style=\"text-align:left\">批量导入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">使用场景</td>\n<td style=\"text-align:left\">用户， Java EE 项目</td>\n<td style=\"text-align:left\">内部分析师， 为决策提供支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据表征</td>\n<td style=\"text-align:left\">最新数据状态</td>\n<td style=\"text-align:left\">随时间变化的历史状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据规模</td>\n<td style=\"text-align:left\">GB</td>\n<td style=\"text-align:left\">TB 到 PB</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>维度建模<ul>\n<li>星型模型<ul>\n<li>标准星形只有单层级</li>\n<li>性能优先</li>\n<li>减少维度就是减少join、减少shuffle</li>\n</ul>\n</li>\n<li>雪花模型<ul>\n<li>多层</li>\n<li>灵活优先</li>\n</ul>\n</li>\n<li>星座模型</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"同步策略\"><a href=\"#同步策略\" class=\"headerlink\" title=\"同步策略\"></a>同步策略</h3><ul>\n<li>全量表： 存储完整的数据。</li>\n<li>增量表： 存储新增加的数据。</li>\n<li>新增及变化表： 存储新增加的数据和变化的数据。</li>\n<li>特殊表： 只需要存储一次</li>\n</ul>\n<hr>\n<h3 id=\"即席查询\"><a href=\"#即席查询\" class=\"headerlink\" title=\"即席查询\"></a>即席查询</h3><ul>\n<li>OLAP（Online Analytical Processing）多维分析</li>\n<li>ROLAP（Relational OLAP）<ul>\n<li>基于关系型数据库</li>\n</ul>\n</li>\n<li>MOLAP（Multidimensional OLAP）<ul>\n<li>需要预计算</li>\n<li>基于多维数据集（一个多维数据集成为OLAP Cube（立方体））</li>\n<li>Cuboid（长方体）</li>\n</ul>\n</li>\n<li>Star Schema（星型模型）</li>\n<li>Dimension（维度）</li>\n<li>Measure（度量）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"></div>","more":"<h3 id=\"数据仓库（Data-Warehouse）建模\"><a href=\"#数据仓库（Data-Warehouse）建模\" class=\"headerlink\" title=\"数据仓库（Data Warehouse）建模\"></a>数据仓库（Data Warehouse）建模</h3><h4 id=\"ODS（备份）\"><a href=\"#ODS（备份）\" class=\"headerlink\" title=\"ODS（备份）\"></a>ODS（备份）</h4><ol>\n<li>保持数据原貌不做任何修改， 起到备份数据的作用。</li>\n<li>数据采用压缩， 减少磁盘存储空间（ 例如： 原始数据 100G， 可以压缩到 10G 左右）</li>\n<li>创建分区表， 防止后续的全表扫描（一般按日期）</li>\n<li>创建外部表。 在企业开发中， 除了自己用的临时表， 创建内部表外， 绝大多数场景都是创建外部表</li>\n</ol>\n<ul>\n<li>构建步骤<ol>\n<li>用户行为数据（事件&amp;启动），（json to string） hive单行保存</li>\n<li>业务数据，hdfs to hive</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"DWD（清洗）\"><a href=\"#DWD（清洗）\" class=\"headerlink\" title=\"DWD（清洗）\"></a>DWD（清洗）</h4><ul>\n<li>构建步骤<ol>\n<li>对用户行为数据解析</li>\n<li>对核心数据进行判空过滤</li>\n<li>对业务数据采用<code>维度模型</code>重新建模， 即<code>维度退化</code></li>\n</ol>\n</li>\n<li>DWD 层需<code>构建维度模型</code>， 一般采用星型模型， 呈现的状态一般为星座模型</li>\n<li>维度建模一般按照以下四个步骤：<ol>\n<li>选择业务过程</li>\n<li>声明粒度</li>\n<li>确认维度（维度表）<ul>\n<li>原则是： 后续需求中是否要分析相关维度的指标</li>\n<li>维度表： 需要根据维度建模中的星型模型原则进行维度退化</li>\n</ul>\n</li>\n<li>确认事实（事实表）<ul>\n<li>事实指的是业务中的度量值（次数、 个数、 件数、 金额， 可以进行累加）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>DWS 层、 DWT 层和 ADS 层都是以需求为驱动， 和维度建模已经没有关系了</li>\n<li>DWS 和 DWT 都是建宽表， 按照主题去建表。 主题相当于观察问题的角度。 对应着维度表</li>\n</ul>\n<h4 id=\"DWS（按天聚合）\"><a href=\"#DWS（按天聚合）\" class=\"headerlink\" title=\"DWS（按天聚合）\"></a>DWS（按天聚合）</h4><ul>\n<li>DWS 层统计各个主题对象的当天行为， 服务于 DWT 层的主题宽表</li>\n<li>需要建哪些表： 以维度为基准， 去关联对应多个事实表</li>\n<li>宽表里面的字段： 是站在不同维度的角度去看事实表， 重点关注事实表聚合后的度量值<br><img src=\"https://i.loli.net/2020/09/27/gZArseXBRlvfDwE.jpg\" alt=\"20200927173303.jpg\"></li>\n</ul>\n<h4 id=\"DWT（全量聚合统计）\"><a href=\"#DWT（全量聚合统计）\" class=\"headerlink\" title=\"DWT（全量聚合统计）\"></a>DWT（全量聚合统计）</h4><ul>\n<li>DWT 层统计各个主题对象的累积行为<ol>\n<li>需要建哪些表： 和 DWS 层一样。 以维度为基准， 去关联对应多个事实表</li>\n<li>宽表里面的字段： 我们站在维度表的角度去看事实表， 重点关注事实表度量值的累积值、 事实表行为的首次和末次时间(订单事实表至今的累积下单次数、 累积下单金额和某时间段内的累积次数、 累积金额， 以及关注下单行为的首次时间和末次时间)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"ADS（指标）\"><a href=\"#ADS（指标）\" class=\"headerlink\" title=\"ADS（指标）\"></a>ADS（指标）</h4><ul>\n<li>对系统各大主题指标分别进行分析</li>\n</ul>\n<hr>\n<h3 id=\"数仓命名规范\"><a href=\"#数仓命名规范\" class=\"headerlink\" title=\"数仓命名规范\"></a>数仓命名规范</h3><ul>\n<li>表命名<ul>\n<li>ODS层命名为ods_表名</li>\n<li>DWD层命名为dwd_dim/fact_表名</li>\n<li>DWS层命名为dws_表名</li>\n<li>DWT层命名为dwt_表名</li>\n<li>ADS层命名为ads_表名</li>\n<li>临时表命名为xxx_tmp</li>\n<li>用户行为表， 以log为后缀</li>\n</ul>\n</li>\n<li>脚本命名<ul>\n<li>数据源_to_目标_db/log.sh</li>\n<li>用户行为脚本以log为后缀； 业务数据脚本以db为后缀</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"表分类\"><a href=\"#表分类\" class=\"headerlink\" title=\"表分类\"></a>表分类</h3><ul>\n<li>日志表<ul>\n<li>启动日志表</li>\n<li>事件日志表（根据事件类型区分）</li>\n</ul>\n</li>\n<li>业务表<ul>\n<li>维度表<ul>\n<li>全量表</li>\n<li>特殊表</li>\n</ul>\n</li>\n<li>事实表<ul>\n<li>周期型快照事实表<ul>\n<li>每日快照，全量导入</li>\n<li>周期型快照事实表存储的数据比较讲究时效性， 时间太久了的意义不大， 可以删除以前的数据</li>\n</ul>\n</li>\n<li>事务型快照事实表<ul>\n<li>一旦产生不会变化，只需导增量</li>\n</ul>\n</li>\n<li>累计型快照事实表（！！难点，动态分区，sql复杂）<ul>\n<li>用事件开始的时间作为分区</li>\n<li>用于跟踪业务事实的变化</li>\n</ul>\n</li>\n<li>拉链表（！！）<ul>\n<li>用户维度表<ul>\n<li>修改频率不高，属于缓慢变化维度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"维度表和事实表\"><a href=\"#维度表和事实表\" class=\"headerlink\" title=\"维度表和事实表\"></a>维度表和事实表</h3><ul>\n<li>维度表<ul>\n<li>一般是对事实的描述信息。 每一张维表对应现实世界中的一个对象或者概念</li>\n<li>维表的特征<ul>\n<li>维度表的范围很宽（具有多个属性、 列比较多）</li>\n<li>跟事实表相比， 行数相对较小： 通常&lt; 10 万条</li>\n<li>内容相对固定： 编码表</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事实表<ul>\n<li>事实表中的每行数据代表一个业务事件（ 下单、 支付、 退款、 评价等） 。 “事实” 这个术语表示的是业务事件的度量值（ 可统计次数、 个数、 件数、 金额等） ， 例如， 订单事件中的下单金额</li>\n<li>每一个事实表的行包括： 具有可加性的数值型的度量值、 与维表相连接的外键、 通常具有两个和两个以上的外键、 外键之间表示维表之间多对多的关系（外键+度量值）</li>\n<li>事实表的特征：<ul>\n<li>非常的大</li>\n<li>内容相对的窄： 列数较少</li>\n<li>经常发生变化， 每天会新增加很多</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"关系建模和维度建模\"><a href=\"#关系建模和维度建模\" class=\"headerlink\" title=\"关系建模和维度建模\"></a>关系建模和维度建模</h3><ul>\n<li>数据处理分类<ul>\n<li>联机事务处理 OLTP（ on-line transactionprocessing） <ul>\n<li>保证数据一致性，避免冗余</li>\n</ul>\n</li>\n<li>联机分析处理 OLAP（ On-Line Analytical Processing）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">对比属性</th>\n<th style=\"text-align:left\">OLTP</th>\n<th style=\"text-align:left\">OLAP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">读特性</td>\n<td style=\"text-align:left\">每次查询只返回少量记录</td>\n<td style=\"text-align:left\">对大量记录进行汇总</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">写特性</td>\n<td style=\"text-align:left\">随机、 低延时写入用户的输入</td>\n<td style=\"text-align:left\">批量导入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">使用场景</td>\n<td style=\"text-align:left\">用户， Java EE 项目</td>\n<td style=\"text-align:left\">内部分析师， 为决策提供支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据表征</td>\n<td style=\"text-align:left\">最新数据状态</td>\n<td style=\"text-align:left\">随时间变化的历史状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据规模</td>\n<td style=\"text-align:left\">GB</td>\n<td style=\"text-align:left\">TB 到 PB</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>维度建模<ul>\n<li>星型模型<ul>\n<li>标准星形只有单层级</li>\n<li>性能优先</li>\n<li>减少维度就是减少join、减少shuffle</li>\n</ul>\n</li>\n<li>雪花模型<ul>\n<li>多层</li>\n<li>灵活优先</li>\n</ul>\n</li>\n<li>星座模型</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"同步策略\"><a href=\"#同步策略\" class=\"headerlink\" title=\"同步策略\"></a>同步策略</h3><ul>\n<li>全量表： 存储完整的数据。</li>\n<li>增量表： 存储新增加的数据。</li>\n<li>新增及变化表： 存储新增加的数据和变化的数据。</li>\n<li>特殊表： 只需要存储一次</li>\n</ul>\n<hr>\n<h3 id=\"即席查询\"><a href=\"#即席查询\" class=\"headerlink\" title=\"即席查询\"></a>即席查询</h3><ul>\n<li>OLAP（Online Analytical Processing）多维分析</li>\n<li>ROLAP（Relational OLAP）<ul>\n<li>基于关系型数据库</li>\n</ul>\n</li>\n<li>MOLAP（Multidimensional OLAP）<ul>\n<li>需要预计算</li>\n<li>基于多维数据集（一个多维数据集成为OLAP Cube（立方体））</li>\n<li>Cuboid（长方体）</li>\n</ul>\n</li>\n<li>Star Schema（星型模型）</li>\n<li>Dimension（维度）</li>\n<li>Measure（度量）</li>\n</ul>"},{"title":"数据仓库构建思考","date":"2020-10-10T06:52:13.000Z","_content":"\n{%note info%}\n\n{%endnote%}\n<!--more-->\n\n### 项目需求\n\n1. 数据输入\n   - 用户行为数据采集\n   - 业务数据采集\n2. 数据存储\n   - 数仓分层\n   - 维度建模&报表指标\n3. 数据输出\n   - 采用即席查询进行指标分析\n4. 系统监控\n   - 集群性能监控&异常报警\n5. 元数据管理\n6. 质量监控\n\n### 思考题\n\n#### 1. 技术选型\n\n- 考虑因素\n    - 数据量大小\n    - 业务需求（用户数据、业务数据）\n    - 行业内经验（避免走弯路，借鉴）\n    - 技术成熟度\n    - 开发维护成本（CDH版本等）\n    - 总成本预算\n- 数据采集传输\n    - Flume\n        - 擅长读取日志文件\n        - 相较于Logstash，行业内使用Flume更多\n    - Kafka\n        - 削峰\n    - Sqoop\n        - 转换mysql\n    - Logstash\n        - 没有大数据的公司专门用来处理日志\n    - DataX\n        - 和Sqoop市场占有率 50%:50%\n- 数据存储\n    - MySql\n    - HDFS\n    - HBase\n        - 快速插入\n    - Redis\n    - MongoDB\n        - 爬虫数据\n- 数据计算\n    - Hive\n    - Tez\n        - 基于内存\n    - Spark\n    - Flink\n    - ~~Storm~~\n        - 没落，淘汰\n- 数据查询\n    - Presto\n        - 快速查询，支持多数据源\n        - 若是apache则选择\n    - Druid\n    - Impala\n        - Presto的竞品\n        - cdh优先选择\n    - Kylin\n        - 多维查询，聚合\n    \n    ![20201009102131.jpg](https://i.loli.net/2020/10/09/b8wS91HZ5FMmfUz.jpg)\n- 数据可视化\n    - Echarts\n        - 百度开源，开发要求较高\n    - Superset\n        - 难度低\n    - QuickBI\n        - 离线指标，阿里开源，收费\n    - DataV\n        - 可视化大屏，阿里开源，收费\n- 任务调度\n    - Azkaban\n        - 简单实用\n    - Oozie\n        - 功能多\n- 集群监控\n    \n    - Zabbix\n    - Prometheus（没有历史包袱的建议选择）\n\n| Zabbix                                                       | Prometheus                                                   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 后端用 C 开发，界面用 PHP 开发，定制化难度很高。             | 后端用 golang 开发，前端是 Grafana，JSON 编辑即可解决。定制化难度较低。 |\n| 集群规模上限为 10000 个节点。                                | 支持更大的集群规模，速度也更快。                             |\n| 更适合监控物理机环境。                                       | 更适合云环境的监控，对 OpenStack，Kubernetes 有更好的集成。  |\n| 监控数据存储在关系型数据库内，如 MySQL，很难从现有数据中扩展维度。 | 监控数据存储在基于时间序列的数据库内，便于对已有数据进行新的聚合。 |\n| 安装简单，zabbix-server 一个软件包中包括了所有的服务端功能。 | 安装相对复杂，监控、告警和界面都分属于不同的组件。           |\n| 图形化界面比较成熟，界面上基本上能完成全部的配置操作。       | 界面相对较弱，很多配置需要修改配置文件。                     |\n| 发展时间更长，对于很多监控场景，都有现成的解决方案。         | 2015 年后开始快速发展，但发展时间较短，成熟度不及 Zabbix。   |\n\n- 元数据管理\n    - Atlas\n- 数据质量监控\n    - Griffin\n    - Shell\n    - Python\n\n#### 2. 框架版本选择\n\n- Apache\n  - 灵活，操作难度高\n  - 无管理工具\n- CDH\n  - 管理工具，Cloudera Manager（闭源）\n  - 操作简单，但由于Cloudera不在维护免费版，故不推荐\n- HDP\n  - 管理工具，Ambari（开源）\n\n#### 3. 服务器使用物理机or云主机\n\n- 预算充足 + 专业运维 = 物理机\n- 预算不足 | 短期产品开发迭代 | 无专业运维 = 云主机\n\n#### 4. 如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\n\n1. 假设每天日活100W，每人一天平均100条数据：100W*100=1亿条\n2. 每条日志1K，每天1亿条：1亿/1024/1024=100G\n3. 半年内不扩容服务器来算：100G*180天=18T\n4. 保存3副本：18T*3=54T\n5. 预留20%～30%=54T/0.7=77T\n6. 77T/8=10台服务器\n7. 如果考虑数仓分层，采用数据压缩，需另行计算\n\n### 集群服务器规划原则\n\n- hdfs namenode 和 yarn resource manager分开\n- 服务间通讯紧密放一起\n- 服务内存资源占用多的分开\n\n### 架构图\n\n- Zabbix换成Prometheus\n\n![20200914174642.jpg](https://i.loli.net/2020/09/14/Vu9RqIvoZ81wfKt.jpg)\n\n","source":"_posts/2020-10-10-数据仓库构建思考.md","raw":"---\ntitle: 数据仓库构建思考\ndate: 2020-10-10 14:52:13\ntags: 数据仓库\ncategories: 大数据\n---\n\n{%note info%}\n\n{%endnote%}\n<!--more-->\n\n### 项目需求\n\n1. 数据输入\n   - 用户行为数据采集\n   - 业务数据采集\n2. 数据存储\n   - 数仓分层\n   - 维度建模&报表指标\n3. 数据输出\n   - 采用即席查询进行指标分析\n4. 系统监控\n   - 集群性能监控&异常报警\n5. 元数据管理\n6. 质量监控\n\n### 思考题\n\n#### 1. 技术选型\n\n- 考虑因素\n    - 数据量大小\n    - 业务需求（用户数据、业务数据）\n    - 行业内经验（避免走弯路，借鉴）\n    - 技术成熟度\n    - 开发维护成本（CDH版本等）\n    - 总成本预算\n- 数据采集传输\n    - Flume\n        - 擅长读取日志文件\n        - 相较于Logstash，行业内使用Flume更多\n    - Kafka\n        - 削峰\n    - Sqoop\n        - 转换mysql\n    - Logstash\n        - 没有大数据的公司专门用来处理日志\n    - DataX\n        - 和Sqoop市场占有率 50%:50%\n- 数据存储\n    - MySql\n    - HDFS\n    - HBase\n        - 快速插入\n    - Redis\n    - MongoDB\n        - 爬虫数据\n- 数据计算\n    - Hive\n    - Tez\n        - 基于内存\n    - Spark\n    - Flink\n    - ~~Storm~~\n        - 没落，淘汰\n- 数据查询\n    - Presto\n        - 快速查询，支持多数据源\n        - 若是apache则选择\n    - Druid\n    - Impala\n        - Presto的竞品\n        - cdh优先选择\n    - Kylin\n        - 多维查询，聚合\n    \n    ![20201009102131.jpg](https://i.loli.net/2020/10/09/b8wS91HZ5FMmfUz.jpg)\n- 数据可视化\n    - Echarts\n        - 百度开源，开发要求较高\n    - Superset\n        - 难度低\n    - QuickBI\n        - 离线指标，阿里开源，收费\n    - DataV\n        - 可视化大屏，阿里开源，收费\n- 任务调度\n    - Azkaban\n        - 简单实用\n    - Oozie\n        - 功能多\n- 集群监控\n    \n    - Zabbix\n    - Prometheus（没有历史包袱的建议选择）\n\n| Zabbix                                                       | Prometheus                                                   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 后端用 C 开发，界面用 PHP 开发，定制化难度很高。             | 后端用 golang 开发，前端是 Grafana，JSON 编辑即可解决。定制化难度较低。 |\n| 集群规模上限为 10000 个节点。                                | 支持更大的集群规模，速度也更快。                             |\n| 更适合监控物理机环境。                                       | 更适合云环境的监控，对 OpenStack，Kubernetes 有更好的集成。  |\n| 监控数据存储在关系型数据库内，如 MySQL，很难从现有数据中扩展维度。 | 监控数据存储在基于时间序列的数据库内，便于对已有数据进行新的聚合。 |\n| 安装简单，zabbix-server 一个软件包中包括了所有的服务端功能。 | 安装相对复杂，监控、告警和界面都分属于不同的组件。           |\n| 图形化界面比较成熟，界面上基本上能完成全部的配置操作。       | 界面相对较弱，很多配置需要修改配置文件。                     |\n| 发展时间更长，对于很多监控场景，都有现成的解决方案。         | 2015 年后开始快速发展，但发展时间较短，成熟度不及 Zabbix。   |\n\n- 元数据管理\n    - Atlas\n- 数据质量监控\n    - Griffin\n    - Shell\n    - Python\n\n#### 2. 框架版本选择\n\n- Apache\n  - 灵活，操作难度高\n  - 无管理工具\n- CDH\n  - 管理工具，Cloudera Manager（闭源）\n  - 操作简单，但由于Cloudera不在维护免费版，故不推荐\n- HDP\n  - 管理工具，Ambari（开源）\n\n#### 3. 服务器使用物理机or云主机\n\n- 预算充足 + 专业运维 = 物理机\n- 预算不足 | 短期产品开发迭代 | 无专业运维 = 云主机\n\n#### 4. 如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\n\n1. 假设每天日活100W，每人一天平均100条数据：100W*100=1亿条\n2. 每条日志1K，每天1亿条：1亿/1024/1024=100G\n3. 半年内不扩容服务器来算：100G*180天=18T\n4. 保存3副本：18T*3=54T\n5. 预留20%～30%=54T/0.7=77T\n6. 77T/8=10台服务器\n7. 如果考虑数仓分层，采用数据压缩，需另行计算\n\n### 集群服务器规划原则\n\n- hdfs namenode 和 yarn resource manager分开\n- 服务间通讯紧密放一起\n- 服务内存资源占用多的分开\n\n### 架构图\n\n- Zabbix换成Prometheus\n\n![20200914174642.jpg](https://i.loli.net/2020/09/14/Vu9RqIvoZ81wfKt.jpg)\n\n","slug":"数据仓库构建思考","published":1,"updated":"2020-10-10T08:07:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v8f001u16p78cckp6ot","content":"<div class=\"note info\"></div>\n<a id=\"more\"></a>\n<h3 id=\"项目需求\"><a href=\"#项目需求\" class=\"headerlink\" title=\"项目需求\"></a>项目需求</h3><ol>\n<li>数据输入<ul>\n<li>用户行为数据采集</li>\n<li>业务数据采集</li>\n</ul>\n</li>\n<li>数据存储<ul>\n<li>数仓分层</li>\n<li>维度建模&amp;报表指标</li>\n</ul>\n</li>\n<li>数据输出<ul>\n<li>采用即席查询进行指标分析</li>\n</ul>\n</li>\n<li>系统监控<ul>\n<li>集群性能监控&amp;异常报警</li>\n</ul>\n</li>\n<li>元数据管理</li>\n<li>质量监控</li>\n</ol>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><h4 id=\"1-技术选型\"><a href=\"#1-技术选型\" class=\"headerlink\" title=\"1. 技术选型\"></a>1. 技术选型</h4><ul>\n<li>考虑因素<ul>\n<li>数据量大小</li>\n<li>业务需求（用户数据、业务数据）</li>\n<li>行业内经验（避免走弯路，借鉴）</li>\n<li>技术成熟度</li>\n<li>开发维护成本（CDH版本等）</li>\n<li>总成本预算</li>\n</ul>\n</li>\n<li>数据采集传输<ul>\n<li>Flume<ul>\n<li>擅长读取日志文件</li>\n<li>相较于Logstash，行业内使用Flume更多</li>\n</ul>\n</li>\n<li>Kafka<ul>\n<li>削峰</li>\n</ul>\n</li>\n<li>Sqoop<ul>\n<li>转换mysql</li>\n</ul>\n</li>\n<li>Logstash<ul>\n<li>没有大数据的公司专门用来处理日志</li>\n</ul>\n</li>\n<li>DataX<ul>\n<li>和Sqoop市场占有率 50%:50%</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据存储<ul>\n<li>MySql</li>\n<li>HDFS</li>\n<li>HBase<ul>\n<li>快速插入</li>\n</ul>\n</li>\n<li>Redis</li>\n<li>MongoDB<ul>\n<li>爬虫数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据计算<ul>\n<li>Hive</li>\n<li>Tez<ul>\n<li>基于内存</li>\n</ul>\n</li>\n<li>Spark</li>\n<li>Flink</li>\n<li><del>Storm</del><ul>\n<li>没落，淘汰</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据查询</p>\n<ul>\n<li>Presto<ul>\n<li>快速查询，支持多数据源</li>\n<li>若是apache则选择</li>\n</ul>\n</li>\n<li>Druid</li>\n<li>Impala<ul>\n<li>Presto的竞品</li>\n<li>cdh优先选择</li>\n</ul>\n</li>\n<li><p>Kylin</p>\n<ul>\n<li>多维查询，聚合</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/10/09/b8wS91HZ5FMmfUz.jpg\" alt=\"20201009102131.jpg\"></p>\n</li>\n</ul>\n</li>\n<li>数据可视化<ul>\n<li>Echarts<ul>\n<li>百度开源，开发要求较高</li>\n</ul>\n</li>\n<li>Superset<ul>\n<li>难度低</li>\n</ul>\n</li>\n<li>QuickBI<ul>\n<li>离线指标，阿里开源，收费</li>\n</ul>\n</li>\n<li>DataV<ul>\n<li>可视化大屏，阿里开源，收费</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>任务调度<ul>\n<li>Azkaban<ul>\n<li>简单实用</li>\n</ul>\n</li>\n<li>Oozie<ul>\n<li>功能多</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>集群监控</p>\n<ul>\n<li>Zabbix</li>\n<li>Prometheus（没有历史包袱的建议选择）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Zabbix</th>\n<th>Prometheus</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>后端用 C 开发，界面用 PHP 开发，定制化难度很高。</td>\n<td>后端用 golang 开发，前端是 Grafana，JSON 编辑即可解决。定制化难度较低。</td>\n</tr>\n<tr>\n<td>集群规模上限为 10000 个节点。</td>\n<td>支持更大的集群规模，速度也更快。</td>\n</tr>\n<tr>\n<td>更适合监控物理机环境。</td>\n<td>更适合云环境的监控，对 OpenStack，Kubernetes 有更好的集成。</td>\n</tr>\n<tr>\n<td>监控数据存储在关系型数据库内，如 MySQL，很难从现有数据中扩展维度。</td>\n<td>监控数据存储在基于时间序列的数据库内，便于对已有数据进行新的聚合。</td>\n</tr>\n<tr>\n<td>安装简单，zabbix-server 一个软件包中包括了所有的服务端功能。</td>\n<td>安装相对复杂，监控、告警和界面都分属于不同的组件。</td>\n</tr>\n<tr>\n<td>图形化界面比较成熟，界面上基本上能完成全部的配置操作。</td>\n<td>界面相对较弱，很多配置需要修改配置文件。</td>\n</tr>\n<tr>\n<td>发展时间更长，对于很多监控场景，都有现成的解决方案。</td>\n<td>2015 年后开始快速发展，但发展时间较短，成熟度不及 Zabbix。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>元数据管理<ul>\n<li>Atlas</li>\n</ul>\n</li>\n<li>数据质量监控<ul>\n<li>Griffin</li>\n<li>Shell</li>\n<li>Python</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-框架版本选择\"><a href=\"#2-框架版本选择\" class=\"headerlink\" title=\"2. 框架版本选择\"></a>2. 框架版本选择</h4><ul>\n<li>Apache<ul>\n<li>灵活，操作难度高</li>\n<li>无管理工具</li>\n</ul>\n</li>\n<li>CDH<ul>\n<li>管理工具，Cloudera Manager（闭源）</li>\n<li>操作简单，但由于Cloudera不在维护免费版，故不推荐</li>\n</ul>\n</li>\n<li>HDP<ul>\n<li>管理工具，Ambari（开源）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-服务器使用物理机or云主机\"><a href=\"#3-服务器使用物理机or云主机\" class=\"headerlink\" title=\"3. 服务器使用物理机or云主机\"></a>3. 服务器使用物理机or云主机</h4><ul>\n<li>预算充足 + 专业运维 = 物理机</li>\n<li>预算不足 | 短期产品开发迭代 | 无专业运维 = 云主机</li>\n</ul>\n<h4 id=\"4-如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\"><a href=\"#4-如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\" class=\"headerlink\" title=\"4. 如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\"></a>4. 如何确认集群规模（假设：每台服务器8T磁盘，128G内存）</h4><ol>\n<li>假设每天日活100W，每人一天平均100条数据：100W*100=1亿条</li>\n<li>每条日志1K，每天1亿条：1亿/1024/1024=100G</li>\n<li>半年内不扩容服务器来算：100G*180天=18T</li>\n<li>保存3副本：18T*3=54T</li>\n<li>预留20%～30%=54T/0.7=77T</li>\n<li>77T/8=10台服务器</li>\n<li>如果考虑数仓分层，采用数据压缩，需另行计算</li>\n</ol>\n<h3 id=\"集群服务器规划原则\"><a href=\"#集群服务器规划原则\" class=\"headerlink\" title=\"集群服务器规划原则\"></a>集群服务器规划原则</h3><ul>\n<li>hdfs namenode 和 yarn resource manager分开</li>\n<li>服务间通讯紧密放一起</li>\n<li>服务内存资源占用多的分开</li>\n</ul>\n<h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><ul>\n<li>Zabbix换成Prometheus</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/09/14/Vu9RqIvoZ81wfKt.jpg\" alt=\"20200914174642.jpg\"></p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"></div>","more":"<h3 id=\"项目需求\"><a href=\"#项目需求\" class=\"headerlink\" title=\"项目需求\"></a>项目需求</h3><ol>\n<li>数据输入<ul>\n<li>用户行为数据采集</li>\n<li>业务数据采集</li>\n</ul>\n</li>\n<li>数据存储<ul>\n<li>数仓分层</li>\n<li>维度建模&amp;报表指标</li>\n</ul>\n</li>\n<li>数据输出<ul>\n<li>采用即席查询进行指标分析</li>\n</ul>\n</li>\n<li>系统监控<ul>\n<li>集群性能监控&amp;异常报警</li>\n</ul>\n</li>\n<li>元数据管理</li>\n<li>质量监控</li>\n</ol>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><h4 id=\"1-技术选型\"><a href=\"#1-技术选型\" class=\"headerlink\" title=\"1. 技术选型\"></a>1. 技术选型</h4><ul>\n<li>考虑因素<ul>\n<li>数据量大小</li>\n<li>业务需求（用户数据、业务数据）</li>\n<li>行业内经验（避免走弯路，借鉴）</li>\n<li>技术成熟度</li>\n<li>开发维护成本（CDH版本等）</li>\n<li>总成本预算</li>\n</ul>\n</li>\n<li>数据采集传输<ul>\n<li>Flume<ul>\n<li>擅长读取日志文件</li>\n<li>相较于Logstash，行业内使用Flume更多</li>\n</ul>\n</li>\n<li>Kafka<ul>\n<li>削峰</li>\n</ul>\n</li>\n<li>Sqoop<ul>\n<li>转换mysql</li>\n</ul>\n</li>\n<li>Logstash<ul>\n<li>没有大数据的公司专门用来处理日志</li>\n</ul>\n</li>\n<li>DataX<ul>\n<li>和Sqoop市场占有率 50%:50%</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据存储<ul>\n<li>MySql</li>\n<li>HDFS</li>\n<li>HBase<ul>\n<li>快速插入</li>\n</ul>\n</li>\n<li>Redis</li>\n<li>MongoDB<ul>\n<li>爬虫数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据计算<ul>\n<li>Hive</li>\n<li>Tez<ul>\n<li>基于内存</li>\n</ul>\n</li>\n<li>Spark</li>\n<li>Flink</li>\n<li><del>Storm</del><ul>\n<li>没落，淘汰</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据查询</p>\n<ul>\n<li>Presto<ul>\n<li>快速查询，支持多数据源</li>\n<li>若是apache则选择</li>\n</ul>\n</li>\n<li>Druid</li>\n<li>Impala<ul>\n<li>Presto的竞品</li>\n<li>cdh优先选择</li>\n</ul>\n</li>\n<li><p>Kylin</p>\n<ul>\n<li>多维查询，聚合</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/10/09/b8wS91HZ5FMmfUz.jpg\" alt=\"20201009102131.jpg\"></p>\n</li>\n</ul>\n</li>\n<li>数据可视化<ul>\n<li>Echarts<ul>\n<li>百度开源，开发要求较高</li>\n</ul>\n</li>\n<li>Superset<ul>\n<li>难度低</li>\n</ul>\n</li>\n<li>QuickBI<ul>\n<li>离线指标，阿里开源，收费</li>\n</ul>\n</li>\n<li>DataV<ul>\n<li>可视化大屏，阿里开源，收费</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>任务调度<ul>\n<li>Azkaban<ul>\n<li>简单实用</li>\n</ul>\n</li>\n<li>Oozie<ul>\n<li>功能多</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>集群监控</p>\n<ul>\n<li>Zabbix</li>\n<li>Prometheus（没有历史包袱的建议选择）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Zabbix</th>\n<th>Prometheus</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>后端用 C 开发，界面用 PHP 开发，定制化难度很高。</td>\n<td>后端用 golang 开发，前端是 Grafana，JSON 编辑即可解决。定制化难度较低。</td>\n</tr>\n<tr>\n<td>集群规模上限为 10000 个节点。</td>\n<td>支持更大的集群规模，速度也更快。</td>\n</tr>\n<tr>\n<td>更适合监控物理机环境。</td>\n<td>更适合云环境的监控，对 OpenStack，Kubernetes 有更好的集成。</td>\n</tr>\n<tr>\n<td>监控数据存储在关系型数据库内，如 MySQL，很难从现有数据中扩展维度。</td>\n<td>监控数据存储在基于时间序列的数据库内，便于对已有数据进行新的聚合。</td>\n</tr>\n<tr>\n<td>安装简单，zabbix-server 一个软件包中包括了所有的服务端功能。</td>\n<td>安装相对复杂，监控、告警和界面都分属于不同的组件。</td>\n</tr>\n<tr>\n<td>图形化界面比较成熟，界面上基本上能完成全部的配置操作。</td>\n<td>界面相对较弱，很多配置需要修改配置文件。</td>\n</tr>\n<tr>\n<td>发展时间更长，对于很多监控场景，都有现成的解决方案。</td>\n<td>2015 年后开始快速发展，但发展时间较短，成熟度不及 Zabbix。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>元数据管理<ul>\n<li>Atlas</li>\n</ul>\n</li>\n<li>数据质量监控<ul>\n<li>Griffin</li>\n<li>Shell</li>\n<li>Python</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-框架版本选择\"><a href=\"#2-框架版本选择\" class=\"headerlink\" title=\"2. 框架版本选择\"></a>2. 框架版本选择</h4><ul>\n<li>Apache<ul>\n<li>灵活，操作难度高</li>\n<li>无管理工具</li>\n</ul>\n</li>\n<li>CDH<ul>\n<li>管理工具，Cloudera Manager（闭源）</li>\n<li>操作简单，但由于Cloudera不在维护免费版，故不推荐</li>\n</ul>\n</li>\n<li>HDP<ul>\n<li>管理工具，Ambari（开源）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-服务器使用物理机or云主机\"><a href=\"#3-服务器使用物理机or云主机\" class=\"headerlink\" title=\"3. 服务器使用物理机or云主机\"></a>3. 服务器使用物理机or云主机</h4><ul>\n<li>预算充足 + 专业运维 = 物理机</li>\n<li>预算不足 | 短期产品开发迭代 | 无专业运维 = 云主机</li>\n</ul>\n<h4 id=\"4-如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\"><a href=\"#4-如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\" class=\"headerlink\" title=\"4. 如何确认集群规模（假设：每台服务器8T磁盘，128G内存）\"></a>4. 如何确认集群规模（假设：每台服务器8T磁盘，128G内存）</h4><ol>\n<li>假设每天日活100W，每人一天平均100条数据：100W*100=1亿条</li>\n<li>每条日志1K，每天1亿条：1亿/1024/1024=100G</li>\n<li>半年内不扩容服务器来算：100G*180天=18T</li>\n<li>保存3副本：18T*3=54T</li>\n<li>预留20%～30%=54T/0.7=77T</li>\n<li>77T/8=10台服务器</li>\n<li>如果考虑数仓分层，采用数据压缩，需另行计算</li>\n</ol>\n<h3 id=\"集群服务器规划原则\"><a href=\"#集群服务器规划原则\" class=\"headerlink\" title=\"集群服务器规划原则\"></a>集群服务器规划原则</h3><ul>\n<li>hdfs namenode 和 yarn resource manager分开</li>\n<li>服务间通讯紧密放一起</li>\n<li>服务内存资源占用多的分开</li>\n</ul>\n<h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><ul>\n<li>Zabbix换成Prometheus</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/09/14/Vu9RqIvoZ81wfKt.jpg\" alt=\"20200914174642.jpg\"></p>"},{"title":"mybatis动态SQL整理","date":"2020-10-21T13:59:41.000Z","_content":"\n{%note info%}\n\n本文近记录常用的动态sql\n\n{%endnote%}\n<!--more-->\n\n- 表达式规则基于OGNL(（Object Graph Navigation Language 对象图导航语言)\n- if\n    ``` \n    <if test=\"id!=null\">\n     \tid=#{id}\n     </if>\n    ```\n- choose\n    - 类似switch case，只会进入一个逻辑分支\n    ``` \n     <choose>\n     \t<when test=\"id!=null\">\n     \t\tid=#{id}\n     \t</when>\n     \t<otherwise>\n     \t\tgender = 0\n     \t</otherwise>\n     </choose>\n    ```\n- trim\n    -  prefix=\"\":\n        - 前缀：trim标签体中是整个字符串拼串后的结果。prefix给拼串后的整个字符串加一个前缀\n    - prefixOverrides=\"\"\n        - 前缀覆盖：去掉整个字符串前面多余的字符\n    - suffix=\"\"\n        - 后缀suffix给拼串后的整个字符串加一个后缀 \n    - suffixOverrides=\"\"\n        - 后缀覆盖：去掉整个字符串后面多余的字符\n``` \n <trim prefix=\"where\" suffixOverrides=\"and\">\n \t<if test=\"id!=null\">\n \t\tid=#{id} and\n \t</if>\n \t<if test=\"lastName!=null &amp;&amp; lastName!=&quot;&quot;\">\n \t\tlast_name like #{lastName} and\n \t</if>\n \t<!-- ognl会进行字符串与数字的转换判断  \"0\"==0 -->\n \t<if test=\"gender==0 or gender==1\">\n \t \tgender=#{gender}\n \t</if>\n </trim>\n```\n\n- foreach\n    - collection\n        - 指定要遍历的集合：list类型的参数会特殊处理封装在map中，map的key就叫list\n    - item\n        - 将当前遍历出的元素赋值给指定的变量\n    - separator\n        - 每个元素之间的分隔符\n    - open\n        - 遍历出所有结果拼接一个开始的字符\n    - close\n        - 遍历出所有结果拼接一个结束的字符\n    - index\n        - 索引。遍历list的时候是index就是索引，item就是当前值。      遍历map的时候index表示的就是map的key，item就是map的值\n    ``` \n    <foreach collection=\"emps\" item=\"emp\" separator=\",\">\n    \t(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})\n    </foreach>\n    ```\n- where\n    - 可以自动抹除多余的and\n    ``` \n     <where>\n     \t<if test=\"lastName!=null &amp;&amp; lastName!=&quot;&quot;\">\n     \t\tand last_name like #{lastName}\n     \t</if>\n     \t<if test=\"gender==0 or gender==1\">\n     \t \tand gender=#{gender}\n     \t</if>\n     </where>\n    ```\n- set\n     - 可以自动抹除多余的“,”\n     - 也可通过trim实现\n    ``` \n    <set>\n    \t<if test=\"lastName!=null\">\n    \t\tlast_name=#{lastName},\n    \t</if>\n    \t<if test=\"email!=null\">\n    \t\temail=#{email},\n    \t</if>\n    \t<if test=\"gender!=null\">\n    \t\tgender=#{gender}\n    \t</if>\n    </set>\n    ```\n- include\n    - 抽取可重用的sql片段。方便后面引用 \n    1. sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用\n    2. include来引用已经抽取的sql：\n    3. include还可以自定义一些property，sql标签内部就能使用自定义的属性\n        - include-property：取值的正确方式${prop},\n        - #{不能使用这种方式}\n    ``` \n    <sql id=\"Base_Column_List\" >\n        id, data_name, table_name\n    </sql>\n    ```\n- bind\n    - 可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值\n    ``` \n    bind name=\"_lastName\" value=\"'%'+lastName+'%'\"/>\n    ```\n\n\n---\n\n### 批量保存\n- MySQL\n    - foreach遍历，mysql支持values(),(),()语法\n        ``` \n        <insert id=\"addEmps\">\n         \tinsert into tbl_employee(\n         \t\t<include refid=\"insertColumn\"></include>\n         \t) \n        \tvalues\n        \t<foreach collection=\"emps\" item=\"emp\" separator=\",\">\n        \t\t(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})\n        \t</foreach>\n         </insert>\n        ```\n    - 多insert拼接\n        - ==这种方式需要数据库连接属性allowMultiQueries=true，这种分号分隔多个sql可以用于其他的批量操作（删除，修改）==\n        ``` \n         <foreach collection=\"emps\" item=\"emp\" separator=\";\">\n         \tinsert into tbl_employee(last_name,email,gender,d_id)\n         \tvalues(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})\n         </foreach>\n        ```\n- Oracle\n    - Oracle不支持values(),(),()\n    1. 多个insert放在begin - end里面\n        ``` \n         begin\n            insert into employees(employee_id,last_name,email) \n            values(employees_seq.nextval,'test_001','test_001@atguigu.com');\n            insert into employees(employee_id,last_name,email) \n            values(employees_seq.nextval,'test_002','test_002@atguigu.com');\n        end;\n        ```\n    2. 利用中间表\n        ``` \n        insert into employees(employee_id,last_name,email)\n           select employees_seq.nextval,lastName,email from(\n                  select 'test_a_01' lastName,'test_a_e01' email from dual\n                  union\n                  select 'test_a_02' lastName,'test_a_e02' email from dual\n                  union\n                  select 'test_a_03' lastName,'test_a_e03' email from dual\n           )\t\n        ```\n\n---\n\n### 内置参数\n- 不只是方法传递过来的参数\n- 可以被用来判断，取值\n- _parameter（代表整个参数）\n    - 单个参数：_parameter就是这个参数\n    - 多个参数：参数会被封装为一个map；_parameter就是代表这个map\n\n- _databaseId（如果配置了databaseIdProvider标签）\n    - _databaseId就是代表当前数据库的别名oracle","source":"_posts/2020-10-21-mybatis动态SQL整理.md","raw":"---\ntitle: mybatis动态SQL整理\ndate: 2020-10-21 21:59:41\ntags: mybatis\ncategories: java\n---\n\n{%note info%}\n\n本文近记录常用的动态sql\n\n{%endnote%}\n<!--more-->\n\n- 表达式规则基于OGNL(（Object Graph Navigation Language 对象图导航语言)\n- if\n    ``` \n    <if test=\"id!=null\">\n     \tid=#{id}\n     </if>\n    ```\n- choose\n    - 类似switch case，只会进入一个逻辑分支\n    ``` \n     <choose>\n     \t<when test=\"id!=null\">\n     \t\tid=#{id}\n     \t</when>\n     \t<otherwise>\n     \t\tgender = 0\n     \t</otherwise>\n     </choose>\n    ```\n- trim\n    -  prefix=\"\":\n        - 前缀：trim标签体中是整个字符串拼串后的结果。prefix给拼串后的整个字符串加一个前缀\n    - prefixOverrides=\"\"\n        - 前缀覆盖：去掉整个字符串前面多余的字符\n    - suffix=\"\"\n        - 后缀suffix给拼串后的整个字符串加一个后缀 \n    - suffixOverrides=\"\"\n        - 后缀覆盖：去掉整个字符串后面多余的字符\n``` \n <trim prefix=\"where\" suffixOverrides=\"and\">\n \t<if test=\"id!=null\">\n \t\tid=#{id} and\n \t</if>\n \t<if test=\"lastName!=null &amp;&amp; lastName!=&quot;&quot;\">\n \t\tlast_name like #{lastName} and\n \t</if>\n \t<!-- ognl会进行字符串与数字的转换判断  \"0\"==0 -->\n \t<if test=\"gender==0 or gender==1\">\n \t \tgender=#{gender}\n \t</if>\n </trim>\n```\n\n- foreach\n    - collection\n        - 指定要遍历的集合：list类型的参数会特殊处理封装在map中，map的key就叫list\n    - item\n        - 将当前遍历出的元素赋值给指定的变量\n    - separator\n        - 每个元素之间的分隔符\n    - open\n        - 遍历出所有结果拼接一个开始的字符\n    - close\n        - 遍历出所有结果拼接一个结束的字符\n    - index\n        - 索引。遍历list的时候是index就是索引，item就是当前值。      遍历map的时候index表示的就是map的key，item就是map的值\n    ``` \n    <foreach collection=\"emps\" item=\"emp\" separator=\",\">\n    \t(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})\n    </foreach>\n    ```\n- where\n    - 可以自动抹除多余的and\n    ``` \n     <where>\n     \t<if test=\"lastName!=null &amp;&amp; lastName!=&quot;&quot;\">\n     \t\tand last_name like #{lastName}\n     \t</if>\n     \t<if test=\"gender==0 or gender==1\">\n     \t \tand gender=#{gender}\n     \t</if>\n     </where>\n    ```\n- set\n     - 可以自动抹除多余的“,”\n     - 也可通过trim实现\n    ``` \n    <set>\n    \t<if test=\"lastName!=null\">\n    \t\tlast_name=#{lastName},\n    \t</if>\n    \t<if test=\"email!=null\">\n    \t\temail=#{email},\n    \t</if>\n    \t<if test=\"gender!=null\">\n    \t\tgender=#{gender}\n    \t</if>\n    </set>\n    ```\n- include\n    - 抽取可重用的sql片段。方便后面引用 \n    1. sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用\n    2. include来引用已经抽取的sql：\n    3. include还可以自定义一些property，sql标签内部就能使用自定义的属性\n        - include-property：取值的正确方式${prop},\n        - #{不能使用这种方式}\n    ``` \n    <sql id=\"Base_Column_List\" >\n        id, data_name, table_name\n    </sql>\n    ```\n- bind\n    - 可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值\n    ``` \n    bind name=\"_lastName\" value=\"'%'+lastName+'%'\"/>\n    ```\n\n\n---\n\n### 批量保存\n- MySQL\n    - foreach遍历，mysql支持values(),(),()语法\n        ``` \n        <insert id=\"addEmps\">\n         \tinsert into tbl_employee(\n         \t\t<include refid=\"insertColumn\"></include>\n         \t) \n        \tvalues\n        \t<foreach collection=\"emps\" item=\"emp\" separator=\",\">\n        \t\t(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})\n        \t</foreach>\n         </insert>\n        ```\n    - 多insert拼接\n        - ==这种方式需要数据库连接属性allowMultiQueries=true，这种分号分隔多个sql可以用于其他的批量操作（删除，修改）==\n        ``` \n         <foreach collection=\"emps\" item=\"emp\" separator=\";\">\n         \tinsert into tbl_employee(last_name,email,gender,d_id)\n         \tvalues(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})\n         </foreach>\n        ```\n- Oracle\n    - Oracle不支持values(),(),()\n    1. 多个insert放在begin - end里面\n        ``` \n         begin\n            insert into employees(employee_id,last_name,email) \n            values(employees_seq.nextval,'test_001','test_001@atguigu.com');\n            insert into employees(employee_id,last_name,email) \n            values(employees_seq.nextval,'test_002','test_002@atguigu.com');\n        end;\n        ```\n    2. 利用中间表\n        ``` \n        insert into employees(employee_id,last_name,email)\n           select employees_seq.nextval,lastName,email from(\n                  select 'test_a_01' lastName,'test_a_e01' email from dual\n                  union\n                  select 'test_a_02' lastName,'test_a_e02' email from dual\n                  union\n                  select 'test_a_03' lastName,'test_a_e03' email from dual\n           )\t\n        ```\n\n---\n\n### 内置参数\n- 不只是方法传递过来的参数\n- 可以被用来判断，取值\n- _parameter（代表整个参数）\n    - 单个参数：_parameter就是这个参数\n    - 多个参数：参数会被封装为一个map；_parameter就是代表这个map\n\n- _databaseId（如果配置了databaseIdProvider标签）\n    - _databaseId就是代表当前数据库的别名oracle","slug":"mybatis动态SQL整理","published":1,"updated":"2020-10-26T12:56:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v8l001w16p7cn6nw77a","content":"<div class=\"note info\"><p>本文近记录常用的动态sql</p></div>\n<a id=\"more\"></a>\n<ul>\n<li>表达式规则基于OGNL(（Object Graph Navigation Language 对象图导航语言)</li>\n<li><p>if</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\"> \tid=#&#123;id&#125;</span><br><span class=\"line\"> &lt;/if&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>choose</p>\n<ul>\n<li>类似switch case，只会进入一个逻辑分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;choose&gt;</span><br><span class=\"line\">\t&lt;when test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\">\t\tid=#&#123;id&#125;</span><br><span class=\"line\">\t&lt;/when&gt;</span><br><span class=\"line\">\t&lt;otherwise&gt;</span><br><span class=\"line\">\t\tgender = 0</span><br><span class=\"line\">\t&lt;/otherwise&gt;</span><br><span class=\"line\">&lt;/choose&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>trim</p>\n<ul>\n<li>prefix=””:<ul>\n<li>前缀：trim标签体中是整个字符串拼串后的结果。prefix给拼串后的整个字符串加一个前缀</li>\n</ul>\n</li>\n<li>prefixOverrides=””<ul>\n<li>前缀覆盖：去掉整个字符串前面多余的字符</li>\n</ul>\n</li>\n<li>suffix=””<ul>\n<li>后缀suffix给拼串后的整个字符串加一个后缀 </li>\n</ul>\n</li>\n<li>suffixOverrides=””<ul>\n<li>后缀覆盖：去掉整个字符串后面多余的字符<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;trim prefix=&quot;where&quot; suffixOverrides=&quot;and&quot;&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\">\t\tid=#&#123;id&#125; and</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class=\"line\">\t\tlast_name like #&#123;lastName&#125; and</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;!-- ognl会进行字符串与数字的转换判断  &quot;0&quot;==0 --&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;gender==0 or gender==1&quot;&gt;</span><br><span class=\"line\">\t \tgender=#&#123;gender&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">&lt;/trim&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>foreach</p>\n<ul>\n<li>collection<ul>\n<li>指定要遍历的集合：list类型的参数会特殊处理封装在map中，map的key就叫list</li>\n</ul>\n</li>\n<li>item<ul>\n<li>将当前遍历出的元素赋值给指定的变量</li>\n</ul>\n</li>\n<li>separator<ul>\n<li>每个元素之间的分隔符</li>\n</ul>\n</li>\n<li>open<ul>\n<li>遍历出所有结果拼接一个开始的字符</li>\n</ul>\n</li>\n<li>close<ul>\n<li>遍历出所有结果拼接一个结束的字符</li>\n</ul>\n</li>\n<li>index<ul>\n<li>索引。遍历list的时候是index就是索引，item就是当前值。      遍历map的时候index表示的就是map的key，item就是map的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot; separator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class=\"line\">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>where</p>\n<ul>\n<li>可以自动抹除多余的and<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;where&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class=\"line\">\t\tand last_name like #&#123;lastName&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;gender==0 or gender==1&quot;&gt;</span><br><span class=\"line\">\t \tand gender=#&#123;gender&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">&lt;/where&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>set</p>\n<ul>\n<li>可以自动抹除多余的“,”</li>\n<li>也可通过trim实现<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;set&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;lastName!=null&quot;&gt;</span><br><span class=\"line\">\t\tlast_name=#&#123;lastName&#125;,</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;email!=null&quot;&gt;</span><br><span class=\"line\">\t\temail=#&#123;email&#125;,</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;gender!=null&quot;&gt;</span><br><span class=\"line\">\t\tgender=#&#123;gender&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">&lt;/set&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>include</p>\n<ul>\n<li>抽取可重用的sql片段。方便后面引用 </li>\n</ul>\n<ol>\n<li>sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</li>\n<li>include来引用已经抽取的sql：</li>\n<li>include还可以自定义一些property，sql标签内部就能使用自定义的属性<ul>\n<li>include-property：取值的正确方式${prop},</li>\n<li>#{不能使用这种方式}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;sql id=&quot;Base_Column_List&quot; &gt;</span><br><span class=\"line\">    id, data_name, table_name</span><br><span class=\"line\">&lt;/sql&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>bind</p>\n<ul>\n<li>可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind name=&quot;_lastName&quot; value=&quot;&apos;%&apos;+lastName+&apos;%&apos;&quot;/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"批量保存\"><a href=\"#批量保存\" class=\"headerlink\" title=\"批量保存\"></a>批量保存</h3><ul>\n<li><p>MySQL</p>\n<ul>\n<li><p>foreach遍历，mysql支持values(),(),()语法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;addEmps&quot;&gt;</span><br><span class=\"line\"> \tinsert into tbl_employee(</span><br><span class=\"line\"> \t\t&lt;include refid=&quot;insertColumn&quot;&gt;&lt;/include&gt;</span><br><span class=\"line\"> \t) </span><br><span class=\"line\">\tvalues</span><br><span class=\"line\">\t&lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot; separator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class=\"line\">\t&lt;/foreach&gt;</span><br><span class=\"line\"> &lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多insert拼接</p>\n<ul>\n<li>==这种方式需要数据库连接属性allowMultiQueries=true，这种分号分隔多个sql可以用于其他的批量操作（删除，修改）==<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot; separator=&quot;;&quot;&gt;</span><br><span class=\"line\">\tinsert into tbl_employee(last_name,email,gender,d_id)</span><br><span class=\"line\">\tvalues(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class=\"line\">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Oracle</p>\n<ul>\n<li>Oracle不支持values(),(),()</li>\n</ul>\n<ol>\n<li><p>多个insert放在begin - end里面</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> begin</span><br><span class=\"line\">    insert into employees(employee_id,last_name,email) </span><br><span class=\"line\">    values(employees_seq.nextval,&apos;test_001&apos;,&apos;test_001@atguigu.com&apos;);</span><br><span class=\"line\">    insert into employees(employee_id,last_name,email) </span><br><span class=\"line\">    values(employees_seq.nextval,&apos;test_002&apos;,&apos;test_002@atguigu.com&apos;);</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用中间表</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into employees(employee_id,last_name,email)</span><br><span class=\"line\">   select employees_seq.nextval,lastName,email from(</span><br><span class=\"line\">          select &apos;test_a_01&apos; lastName,&apos;test_a_e01&apos; email from dual</span><br><span class=\"line\">          union</span><br><span class=\"line\">          select &apos;test_a_02&apos; lastName,&apos;test_a_e02&apos; email from dual</span><br><span class=\"line\">          union</span><br><span class=\"line\">          select &apos;test_a_03&apos; lastName,&apos;test_a_e03&apos; email from dual</span><br><span class=\"line\">   )</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"内置参数\"><a href=\"#内置参数\" class=\"headerlink\" title=\"内置参数\"></a>内置参数</h3><ul>\n<li>不只是方法传递过来的参数</li>\n<li>可以被用来判断，取值</li>\n<li><p>_parameter（代表整个参数）</p>\n<ul>\n<li>单个参数：_parameter就是这个参数</li>\n<li>多个参数：参数会被封装为一个map；_parameter就是代表这个map</li>\n</ul>\n</li>\n<li><p>_databaseId（如果配置了databaseIdProvider标签）</p>\n<ul>\n<li>_databaseId就是代表当前数据库的别名oracle</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文近记录常用的动态sql</p></div>","more":"<ul>\n<li>表达式规则基于OGNL(（Object Graph Navigation Language 对象图导航语言)</li>\n<li><p>if</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\"> \tid=#&#123;id&#125;</span><br><span class=\"line\"> &lt;/if&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>choose</p>\n<ul>\n<li>类似switch case，只会进入一个逻辑分支<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;choose&gt;</span><br><span class=\"line\">\t&lt;when test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\">\t\tid=#&#123;id&#125;</span><br><span class=\"line\">\t&lt;/when&gt;</span><br><span class=\"line\">\t&lt;otherwise&gt;</span><br><span class=\"line\">\t\tgender = 0</span><br><span class=\"line\">\t&lt;/otherwise&gt;</span><br><span class=\"line\">&lt;/choose&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>trim</p>\n<ul>\n<li>prefix=””:<ul>\n<li>前缀：trim标签体中是整个字符串拼串后的结果。prefix给拼串后的整个字符串加一个前缀</li>\n</ul>\n</li>\n<li>prefixOverrides=””<ul>\n<li>前缀覆盖：去掉整个字符串前面多余的字符</li>\n</ul>\n</li>\n<li>suffix=””<ul>\n<li>后缀suffix给拼串后的整个字符串加一个后缀 </li>\n</ul>\n</li>\n<li>suffixOverrides=””<ul>\n<li>后缀覆盖：去掉整个字符串后面多余的字符<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;trim prefix=&quot;where&quot; suffixOverrides=&quot;and&quot;&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\">\t\tid=#&#123;id&#125; and</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class=\"line\">\t\tlast_name like #&#123;lastName&#125; and</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;!-- ognl会进行字符串与数字的转换判断  &quot;0&quot;==0 --&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;gender==0 or gender==1&quot;&gt;</span><br><span class=\"line\">\t \tgender=#&#123;gender&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">&lt;/trim&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>foreach</p>\n<ul>\n<li>collection<ul>\n<li>指定要遍历的集合：list类型的参数会特殊处理封装在map中，map的key就叫list</li>\n</ul>\n</li>\n<li>item<ul>\n<li>将当前遍历出的元素赋值给指定的变量</li>\n</ul>\n</li>\n<li>separator<ul>\n<li>每个元素之间的分隔符</li>\n</ul>\n</li>\n<li>open<ul>\n<li>遍历出所有结果拼接一个开始的字符</li>\n</ul>\n</li>\n<li>close<ul>\n<li>遍历出所有结果拼接一个结束的字符</li>\n</ul>\n</li>\n<li>index<ul>\n<li>索引。遍历list的时候是index就是索引，item就是当前值。      遍历map的时候index表示的就是map的key，item就是map的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot; separator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class=\"line\">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>where</p>\n<ul>\n<li>可以自动抹除多余的and<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;where&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class=\"line\">\t\tand last_name like #&#123;lastName&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;gender==0 or gender==1&quot;&gt;</span><br><span class=\"line\">\t \tand gender=#&#123;gender&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">&lt;/where&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>set</p>\n<ul>\n<li>可以自动抹除多余的“,”</li>\n<li>也可通过trim实现<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;set&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;lastName!=null&quot;&gt;</span><br><span class=\"line\">\t\tlast_name=#&#123;lastName&#125;,</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;email!=null&quot;&gt;</span><br><span class=\"line\">\t\temail=#&#123;email&#125;,</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">\t&lt;if test=&quot;gender!=null&quot;&gt;</span><br><span class=\"line\">\t\tgender=#&#123;gender&#125;</span><br><span class=\"line\">\t&lt;/if&gt;</span><br><span class=\"line\">&lt;/set&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>include</p>\n<ul>\n<li>抽取可重用的sql片段。方便后面引用 </li>\n</ul>\n<ol>\n<li>sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</li>\n<li>include来引用已经抽取的sql：</li>\n<li>include还可以自定义一些property，sql标签内部就能使用自定义的属性<ul>\n<li>include-property：取值的正确方式${prop},</li>\n<li>#{不能使用这种方式}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;sql id=&quot;Base_Column_List&quot; &gt;</span><br><span class=\"line\">    id, data_name, table_name</span><br><span class=\"line\">&lt;/sql&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>bind</p>\n<ul>\n<li>可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind name=&quot;_lastName&quot; value=&quot;&apos;%&apos;+lastName+&apos;%&apos;&quot;/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"批量保存\"><a href=\"#批量保存\" class=\"headerlink\" title=\"批量保存\"></a>批量保存</h3><ul>\n<li><p>MySQL</p>\n<ul>\n<li><p>foreach遍历，mysql支持values(),(),()语法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;addEmps&quot;&gt;</span><br><span class=\"line\"> \tinsert into tbl_employee(</span><br><span class=\"line\"> \t\t&lt;include refid=&quot;insertColumn&quot;&gt;&lt;/include&gt;</span><br><span class=\"line\"> \t) </span><br><span class=\"line\">\tvalues</span><br><span class=\"line\">\t&lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot; separator=&quot;,&quot;&gt;</span><br><span class=\"line\">\t\t(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class=\"line\">\t&lt;/foreach&gt;</span><br><span class=\"line\"> &lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多insert拼接</p>\n<ul>\n<li>==这种方式需要数据库连接属性allowMultiQueries=true，这种分号分隔多个sql可以用于其他的批量操作（删除，修改）==<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;foreach collection=&quot;emps&quot; item=&quot;emp&quot; separator=&quot;;&quot;&gt;</span><br><span class=\"line\">\tinsert into tbl_employee(last_name,email,gender,d_id)</span><br><span class=\"line\">\tvalues(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class=\"line\">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Oracle</p>\n<ul>\n<li>Oracle不支持values(),(),()</li>\n</ul>\n<ol>\n<li><p>多个insert放在begin - end里面</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> begin</span><br><span class=\"line\">    insert into employees(employee_id,last_name,email) </span><br><span class=\"line\">    values(employees_seq.nextval,&apos;test_001&apos;,&apos;test_001@atguigu.com&apos;);</span><br><span class=\"line\">    insert into employees(employee_id,last_name,email) </span><br><span class=\"line\">    values(employees_seq.nextval,&apos;test_002&apos;,&apos;test_002@atguigu.com&apos;);</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用中间表</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into employees(employee_id,last_name,email)</span><br><span class=\"line\">   select employees_seq.nextval,lastName,email from(</span><br><span class=\"line\">          select &apos;test_a_01&apos; lastName,&apos;test_a_e01&apos; email from dual</span><br><span class=\"line\">          union</span><br><span class=\"line\">          select &apos;test_a_02&apos; lastName,&apos;test_a_e02&apos; email from dual</span><br><span class=\"line\">          union</span><br><span class=\"line\">          select &apos;test_a_03&apos; lastName,&apos;test_a_e03&apos; email from dual</span><br><span class=\"line\">   )</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"内置参数\"><a href=\"#内置参数\" class=\"headerlink\" title=\"内置参数\"></a>内置参数</h3><ul>\n<li>不只是方法传递过来的参数</li>\n<li>可以被用来判断，取值</li>\n<li><p>_parameter（代表整个参数）</p>\n<ul>\n<li>单个参数：_parameter就是这个参数</li>\n<li>多个参数：参数会被封装为一个map；_parameter就是代表这个map</li>\n</ul>\n</li>\n<li><p>_databaseId（如果配置了databaseIdProvider标签）</p>\n<ul>\n<li>_databaseId就是代表当前数据库的别名oracle</li>\n</ul>\n</li>\n</ul>"},{"title":"springcloud学习总结","date":"2020-11-20T12:07:22.000Z","_content":"\n{%note info%}\n\n微服务当道，咱也不能落下\n\n{%endnote%}\n<!--more-->\n\n\n\n### 概述\n\n- 微服务的概念就不多说了，网上随便搜。\n- springcloud是一个为简化微服务开发而存在的框架。\n- 在微服务架构大行其道的今天，springcloud的功能组件也是日新月异，所以这篇文章主要还是聊聊springcloud当下在各个子领域的优秀组件，希望能为理解微服务起到提纲挈领的作用。\n\n---\n\n### 功能组件\n\n- 服务注册中心\n\n    - Netflix Eureka（停更）\n\n      - CAP的AP\n      - 如果 Eureka 服务器检测到超过预期数量的注册客户端以一种不优雅的方式终止了连接，并且同时正在等待被驱逐，那么它们将进入自我保护模式。这样做是为了确保灾难性网络事件不会擦除eureka注册表数据，并将其向下传播到所有客户端\n        - 任何客户端，如果连续3次心跳更新失败，那么它将被视为非正常终止，client将被剔除。当超过当前注册实例15%的客户端都处于这种状态，那么自我保护将被开启\n        - 当自我保护开启以后，eureka服务器将停止剔除所有实例，直到\n            - 它看到的心跳续借的数量回到了预期的阈值之上\n            - 自我保护被禁用\n\n    - Zookeeper\n\n      - CAP的AP\n\n    - Consul\n\n      - CAP的AP\n\n      - 功能\n\n        - 服务发现\n          - 提供HTTP和DNS两种发现方式\n        - 健康监测\n            - 支持多种协议，HTTP、TCP、Docker、Shell脚本定制化\n        - KV存储\n            - key , Value的存储方式\n        - 多数据中心\n            - Consul支持多数据中心\n        - 可视化Web界面    \n\n      - 容器启动\n\n        ```docker\n        docker run -d -p 8500:8500 -v /home/consul:/consul/data -e CONSUL_BIND_INTERFACE='eth0' --name=consul1 consul agent -server -bootstrap -ui -client='0.0.0.0'\n        ```\n\n        - agent: 表示启动 agent 进程\n        - server: 表示 consul 为 server 模式\n        - client: 表示 consul 为 client 模式\n        - bootstrap: 表示这个节点是 Server-Leader\n        - ui: 启动 Web UI, 默认端口 8500\n        - node: 指定节点名称, 集群中节点名称唯一\n        - client: 绑定客户端接口地址, 0.0.0.0表示所有地址都可以访问\n\n    - Nacos（推荐）\n\n      - 支持AP和CP切换\n        - 一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台\n\n- 客服端负载均衡\n    - Netflix Ribbon（将停更）\n      - nginx是集中式LB\n      - ribbon是进程内，会在注册中心获取注册信息服务列表缓存到JVM，从而在本地实现RPC远程服务调用\n      - ribbon = 负载均衡 + RestTemplate\n    - LoadBalancer\n    \n- 服务调用\n    - Netflix Feign（将停更）\n      - springcloud在feign的基础上开发\n      - feign是一个服务调用框架，集成了ribbon\n      - 只需要定义服务绑定接口且以声明式的方法，优雅简单的实现服务调用\n    - OpenFeign\n      - Feign的接班人\n      - 使用\n        - 微服务接口 + 业务类@FeignClient + 主启动@EnableFeignClients（优雅如dubbo）\n    \n- 服务降级\n    - Netflix Hystrix（将停更）\n      - 服务降级 fallback\n        - 可以在服务端和客户端实现，一般在客户端实现\n        - 触发场景\n            - 程序运行异常\n            - 超时\n            - 服务熔断触发服务降级\n            - 线程池/信号量打满也会导致服务降级\n      - 服务限流 flowlimit\n      - 服务熔断 break \n          - 触发场景\n              - 流量过大\n          - 处理过程\n              - 降级、熔断、恢复\n          - 熔断类型\n              - 熔断打开\n                  - 请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态\n              - 熔断关闭\n                  - 熔断关闭不会对服务进行熔断\n              - 熔断半开\n                  - 部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断\n          - 断路器开启或者关闭的条件\n              - 当满足一定阀值的时候（默认10秒内超过20个请求次数）\n              - 当失败率达到一定的时候（默认10秒内超过50%请求失败）\n              - 到达以上阀值，断路器将会开启\n              - 当开启的时候，所有请求都不会进行转发\n              - 一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5\n    - resilience4j（国外较多）\n    - sentienl（推荐）\n      - 把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性\n    \n- 服务网关\n    - Netflix Zuul（将停更）\n    - Zuul2\n    - gateway（推荐）\n      - Spring Cloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架\n      - 使用场景\n        - 反向代理\n        - 鉴权\n        - 流量控制\n        - 熔断\n        - 日志监控\n    \n- 服务配置\n    - Spring Cloud Config\n    - Nacos（推荐）\n    \n- 服务总线\n    \n    - springcloud stream \n      - 屏蔽底层消息中间件的差异，降低切换版本，统一消息的编程模型\n    \n    - springcloud bus\n        - 当前仅支持消息代理rabbitmq、kafka\n        - 配合springcloud config实现配置自动刷新\n    - Nacos\n\n- 链路追踪\n\n  - sleuth\n    - 收集整理分布式链路数据\n    - 结合zippkin使用\n\n  - zippkin\n\n    - 展示分布式链路数据\n\n    - docker启动\n\n      ```dockerdo c\n      docker run -d -p 9411:9411 openzipkin/zipkin\t\n      ```\n\n- 分布式事务\n\n  - seata\n    - 一个易于使用的高性能微服务分布式事务解决方案\n\n---\n\n### 总结\n\n- 可以看出随着Netflix大部分组件的停更，springcloud也出现大换血，当随之出现了设计理念更加先进的springcloud alibaba，其涵盖了前者大部分的功能点，短短几年时间，springcloud的新老交替，更新迭代不可谓不快，但生命不息，学习不止，这便是程序员的宿命啊。","source":"_posts/2020-11-20-springcloud学习总结.md","raw":"---\ntitle: springcloud学习总结\ndate: 2020-11-20 20:07:22\ntags: spring cloud\ncategories: java\n---\n\n{%note info%}\n\n微服务当道，咱也不能落下\n\n{%endnote%}\n<!--more-->\n\n\n\n### 概述\n\n- 微服务的概念就不多说了，网上随便搜。\n- springcloud是一个为简化微服务开发而存在的框架。\n- 在微服务架构大行其道的今天，springcloud的功能组件也是日新月异，所以这篇文章主要还是聊聊springcloud当下在各个子领域的优秀组件，希望能为理解微服务起到提纲挈领的作用。\n\n---\n\n### 功能组件\n\n- 服务注册中心\n\n    - Netflix Eureka（停更）\n\n      - CAP的AP\n      - 如果 Eureka 服务器检测到超过预期数量的注册客户端以一种不优雅的方式终止了连接，并且同时正在等待被驱逐，那么它们将进入自我保护模式。这样做是为了确保灾难性网络事件不会擦除eureka注册表数据，并将其向下传播到所有客户端\n        - 任何客户端，如果连续3次心跳更新失败，那么它将被视为非正常终止，client将被剔除。当超过当前注册实例15%的客户端都处于这种状态，那么自我保护将被开启\n        - 当自我保护开启以后，eureka服务器将停止剔除所有实例，直到\n            - 它看到的心跳续借的数量回到了预期的阈值之上\n            - 自我保护被禁用\n\n    - Zookeeper\n\n      - CAP的AP\n\n    - Consul\n\n      - CAP的AP\n\n      - 功能\n\n        - 服务发现\n          - 提供HTTP和DNS两种发现方式\n        - 健康监测\n            - 支持多种协议，HTTP、TCP、Docker、Shell脚本定制化\n        - KV存储\n            - key , Value的存储方式\n        - 多数据中心\n            - Consul支持多数据中心\n        - 可视化Web界面    \n\n      - 容器启动\n\n        ```docker\n        docker run -d -p 8500:8500 -v /home/consul:/consul/data -e CONSUL_BIND_INTERFACE='eth0' --name=consul1 consul agent -server -bootstrap -ui -client='0.0.0.0'\n        ```\n\n        - agent: 表示启动 agent 进程\n        - server: 表示 consul 为 server 模式\n        - client: 表示 consul 为 client 模式\n        - bootstrap: 表示这个节点是 Server-Leader\n        - ui: 启动 Web UI, 默认端口 8500\n        - node: 指定节点名称, 集群中节点名称唯一\n        - client: 绑定客户端接口地址, 0.0.0.0表示所有地址都可以访问\n\n    - Nacos（推荐）\n\n      - 支持AP和CP切换\n        - 一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台\n\n- 客服端负载均衡\n    - Netflix Ribbon（将停更）\n      - nginx是集中式LB\n      - ribbon是进程内，会在注册中心获取注册信息服务列表缓存到JVM，从而在本地实现RPC远程服务调用\n      - ribbon = 负载均衡 + RestTemplate\n    - LoadBalancer\n    \n- 服务调用\n    - Netflix Feign（将停更）\n      - springcloud在feign的基础上开发\n      - feign是一个服务调用框架，集成了ribbon\n      - 只需要定义服务绑定接口且以声明式的方法，优雅简单的实现服务调用\n    - OpenFeign\n      - Feign的接班人\n      - 使用\n        - 微服务接口 + 业务类@FeignClient + 主启动@EnableFeignClients（优雅如dubbo）\n    \n- 服务降级\n    - Netflix Hystrix（将停更）\n      - 服务降级 fallback\n        - 可以在服务端和客户端实现，一般在客户端实现\n        - 触发场景\n            - 程序运行异常\n            - 超时\n            - 服务熔断触发服务降级\n            - 线程池/信号量打满也会导致服务降级\n      - 服务限流 flowlimit\n      - 服务熔断 break \n          - 触发场景\n              - 流量过大\n          - 处理过程\n              - 降级、熔断、恢复\n          - 熔断类型\n              - 熔断打开\n                  - 请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态\n              - 熔断关闭\n                  - 熔断关闭不会对服务进行熔断\n              - 熔断半开\n                  - 部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断\n          - 断路器开启或者关闭的条件\n              - 当满足一定阀值的时候（默认10秒内超过20个请求次数）\n              - 当失败率达到一定的时候（默认10秒内超过50%请求失败）\n              - 到达以上阀值，断路器将会开启\n              - 当开启的时候，所有请求都不会进行转发\n              - 一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5\n    - resilience4j（国外较多）\n    - sentienl（推荐）\n      - 把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性\n    \n- 服务网关\n    - Netflix Zuul（将停更）\n    - Zuul2\n    - gateway（推荐）\n      - Spring Cloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架\n      - 使用场景\n        - 反向代理\n        - 鉴权\n        - 流量控制\n        - 熔断\n        - 日志监控\n    \n- 服务配置\n    - Spring Cloud Config\n    - Nacos（推荐）\n    \n- 服务总线\n    \n    - springcloud stream \n      - 屏蔽底层消息中间件的差异，降低切换版本，统一消息的编程模型\n    \n    - springcloud bus\n        - 当前仅支持消息代理rabbitmq、kafka\n        - 配合springcloud config实现配置自动刷新\n    - Nacos\n\n- 链路追踪\n\n  - sleuth\n    - 收集整理分布式链路数据\n    - 结合zippkin使用\n\n  - zippkin\n\n    - 展示分布式链路数据\n\n    - docker启动\n\n      ```dockerdo c\n      docker run -d -p 9411:9411 openzipkin/zipkin\t\n      ```\n\n- 分布式事务\n\n  - seata\n    - 一个易于使用的高性能微服务分布式事务解决方案\n\n---\n\n### 总结\n\n- 可以看出随着Netflix大部分组件的停更，springcloud也出现大换血，当随之出现了设计理念更加先进的springcloud alibaba，其涵盖了前者大部分的功能点，短短几年时间，springcloud的新老交替，更新迭代不可谓不快，但生命不息，学习不止，这便是程序员的宿命啊。","slug":"springcloud学习总结","published":1,"updated":"2020-11-20T13:09:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6v8v002116p7f17cxmz5","content":"<div class=\"note info\"><p>微服务当道，咱也不能落下</p></div>\n<a id=\"more\"></a>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>微服务的概念就不多说了，网上随便搜。</li>\n<li>springcloud是一个为简化微服务开发而存在的框架。</li>\n<li>在微服务架构大行其道的今天，springcloud的功能组件也是日新月异，所以这篇文章主要还是聊聊springcloud当下在各个子领域的优秀组件，希望能为理解微服务起到提纲挈领的作用。</li>\n</ul>\n<hr>\n<h3 id=\"功能组件\"><a href=\"#功能组件\" class=\"headerlink\" title=\"功能组件\"></a>功能组件</h3><ul>\n<li><p>服务注册中心</p>\n<ul>\n<li><p>Netflix Eureka（停更）</p>\n<ul>\n<li>CAP的AP</li>\n<li>如果 Eureka 服务器检测到超过预期数量的注册客户端以一种不优雅的方式终止了连接，并且同时正在等待被驱逐，那么它们将进入自我保护模式。这样做是为了确保灾难性网络事件不会擦除eureka注册表数据，并将其向下传播到所有客户端<ul>\n<li>任何客户端，如果连续3次心跳更新失败，那么它将被视为非正常终止，client将被剔除。当超过当前注册实例15%的客户端都处于这种状态，那么自我保护将被开启</li>\n<li>当自我保护开启以后，eureka服务器将停止剔除所有实例，直到<ul>\n<li>它看到的心跳续借的数量回到了预期的阈值之上</li>\n<li>自我保护被禁用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Zookeeper</p>\n<ul>\n<li>CAP的AP</li>\n</ul>\n</li>\n<li><p>Consul</p>\n<ul>\n<li><p>CAP的AP</p>\n</li>\n<li><p>功能</p>\n<ul>\n<li>服务发现<ul>\n<li>提供HTTP和DNS两种发现方式</li>\n</ul>\n</li>\n<li>健康监测<ul>\n<li>支持多种协议，HTTP、TCP、Docker、Shell脚本定制化</li>\n</ul>\n</li>\n<li>KV存储<ul>\n<li>key , Value的存储方式</li>\n</ul>\n</li>\n<li>多数据中心<ul>\n<li>Consul支持多数据中心</li>\n</ul>\n</li>\n<li>可视化Web界面    </li>\n</ul>\n</li>\n<li><p>容器启动</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\"> -d -p 8500:8500 -v /home/consul:/consul/data -e CONSUL_BIND_INTERFACE=<span class=\"string\">'eth0'</span> --name=consul1 consul agent -server -bootstrap -ui -client=<span class=\"string\">'0.0.0.0'</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>agent: 表示启动 agent 进程</li>\n<li>server: 表示 consul 为 server 模式</li>\n<li>client: 表示 consul 为 client 模式</li>\n<li>bootstrap: 表示这个节点是 Server-Leader</li>\n<li>ui: 启动 Web UI, 默认端口 8500</li>\n<li>node: 指定节点名称, 集群中节点名称唯一</li>\n<li>client: 绑定客户端接口地址, 0.0.0.0表示所有地址都可以访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Nacos（推荐）</p>\n<ul>\n<li>支持AP和CP切换<ul>\n<li>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>客服端负载均衡</p>\n<ul>\n<li>Netflix Ribbon（将停更）<ul>\n<li>nginx是集中式LB</li>\n<li>ribbon是进程内，会在注册中心获取注册信息服务列表缓存到JVM，从而在本地实现RPC远程服务调用</li>\n<li>ribbon = 负载均衡 + RestTemplate</li>\n</ul>\n</li>\n<li>LoadBalancer</li>\n</ul>\n</li>\n<li><p>服务调用</p>\n<ul>\n<li>Netflix Feign（将停更）<ul>\n<li>springcloud在feign的基础上开发</li>\n<li>feign是一个服务调用框架，集成了ribbon</li>\n<li>只需要定义服务绑定接口且以声明式的方法，优雅简单的实现服务调用</li>\n</ul>\n</li>\n<li>OpenFeign<ul>\n<li>Feign的接班人</li>\n<li>使用<ul>\n<li>微服务接口 + 业务类@FeignClient + 主启动@EnableFeignClients（优雅如dubbo）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>服务降级</p>\n<ul>\n<li>Netflix Hystrix（将停更）<ul>\n<li>服务降级 fallback<ul>\n<li>可以在服务端和客户端实现，一般在客户端实现</li>\n<li>触发场景<ul>\n<li>程序运行异常</li>\n<li>超时</li>\n<li>服务熔断触发服务降级</li>\n<li>线程池/信号量打满也会导致服务降级</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>服务限流 flowlimit</li>\n<li>服务熔断 break <ul>\n<li>触发场景<ul>\n<li>流量过大</li>\n</ul>\n</li>\n<li>处理过程<ul>\n<li>降级、熔断、恢复</li>\n</ul>\n</li>\n<li>熔断类型<ul>\n<li>熔断打开<ul>\n<li>请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态</li>\n</ul>\n</li>\n<li>熔断关闭<ul>\n<li>熔断关闭不会对服务进行熔断</li>\n</ul>\n</li>\n<li>熔断半开<ul>\n<li>部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>断路器开启或者关闭的条件<ul>\n<li>当满足一定阀值的时候（默认10秒内超过20个请求次数）</li>\n<li>当失败率达到一定的时候（默认10秒内超过50%请求失败）</li>\n<li>到达以上阀值，断路器将会开启</li>\n<li>当开启的时候，所有请求都不会进行转发</li>\n<li>一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>resilience4j（国外较多）</li>\n<li>sentienl（推荐）<ul>\n<li>把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>服务网关</p>\n<ul>\n<li>Netflix Zuul（将停更）</li>\n<li>Zuul2</li>\n<li>gateway（推荐）<ul>\n<li>Spring Cloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架</li>\n<li>使用场景<ul>\n<li>反向代理</li>\n<li>鉴权</li>\n<li>流量控制</li>\n<li>熔断</li>\n<li>日志监控</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>服务配置</p>\n<ul>\n<li>Spring Cloud Config</li>\n<li>Nacos（推荐）</li>\n</ul>\n</li>\n<li><p>服务总线</p>\n<ul>\n<li><p>springcloud stream </p>\n<ul>\n<li>屏蔽底层消息中间件的差异，降低切换版本，统一消息的编程模型</li>\n</ul>\n</li>\n<li><p>springcloud bus</p>\n<ul>\n<li>当前仅支持消息代理rabbitmq、kafka</li>\n<li>配合springcloud config实现配置自动刷新</li>\n</ul>\n</li>\n<li>Nacos</li>\n</ul>\n</li>\n<li><p>链路追踪</p>\n<ul>\n<li><p>sleuth</p>\n<ul>\n<li>收集整理分布式链路数据</li>\n<li>结合zippkin使用</li>\n</ul>\n</li>\n<li><p>zippkin</p>\n<ul>\n<li><p>展示分布式链路数据</p>\n</li>\n<li><p>docker启动</p>\n<figure class=\"highlight plain\"><figcaption><span>c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分布式事务</p>\n<ul>\n<li>seata<ul>\n<li>一个易于使用的高性能微服务分布式事务解决方案</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>可以看出随着Netflix大部分组件的停更，springcloud也出现大换血，当随之出现了设计理念更加先进的springcloud alibaba，其涵盖了前者大部分的功能点，短短几年时间，springcloud的新老交替，更新迭代不可谓不快，但生命不息，学习不止，这便是程序员的宿命啊。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>微服务当道，咱也不能落下</p></div>","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>微服务的概念就不多说了，网上随便搜。</li>\n<li>springcloud是一个为简化微服务开发而存在的框架。</li>\n<li>在微服务架构大行其道的今天，springcloud的功能组件也是日新月异，所以这篇文章主要还是聊聊springcloud当下在各个子领域的优秀组件，希望能为理解微服务起到提纲挈领的作用。</li>\n</ul>\n<hr>\n<h3 id=\"功能组件\"><a href=\"#功能组件\" class=\"headerlink\" title=\"功能组件\"></a>功能组件</h3><ul>\n<li><p>服务注册中心</p>\n<ul>\n<li><p>Netflix Eureka（停更）</p>\n<ul>\n<li>CAP的AP</li>\n<li>如果 Eureka 服务器检测到超过预期数量的注册客户端以一种不优雅的方式终止了连接，并且同时正在等待被驱逐，那么它们将进入自我保护模式。这样做是为了确保灾难性网络事件不会擦除eureka注册表数据，并将其向下传播到所有客户端<ul>\n<li>任何客户端，如果连续3次心跳更新失败，那么它将被视为非正常终止，client将被剔除。当超过当前注册实例15%的客户端都处于这种状态，那么自我保护将被开启</li>\n<li>当自我保护开启以后，eureka服务器将停止剔除所有实例，直到<ul>\n<li>它看到的心跳续借的数量回到了预期的阈值之上</li>\n<li>自我保护被禁用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Zookeeper</p>\n<ul>\n<li>CAP的AP</li>\n</ul>\n</li>\n<li><p>Consul</p>\n<ul>\n<li><p>CAP的AP</p>\n</li>\n<li><p>功能</p>\n<ul>\n<li>服务发现<ul>\n<li>提供HTTP和DNS两种发现方式</li>\n</ul>\n</li>\n<li>健康监测<ul>\n<li>支持多种协议，HTTP、TCP、Docker、Shell脚本定制化</li>\n</ul>\n</li>\n<li>KV存储<ul>\n<li>key , Value的存储方式</li>\n</ul>\n</li>\n<li>多数据中心<ul>\n<li>Consul支持多数据中心</li>\n</ul>\n</li>\n<li>可视化Web界面    </li>\n</ul>\n</li>\n<li><p>容器启动</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\"> -d -p 8500:8500 -v /home/consul:/consul/data -e CONSUL_BIND_INTERFACE=<span class=\"string\">'eth0'</span> --name=consul1 consul agent -server -bootstrap -ui -client=<span class=\"string\">'0.0.0.0'</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>agent: 表示启动 agent 进程</li>\n<li>server: 表示 consul 为 server 模式</li>\n<li>client: 表示 consul 为 client 模式</li>\n<li>bootstrap: 表示这个节点是 Server-Leader</li>\n<li>ui: 启动 Web UI, 默认端口 8500</li>\n<li>node: 指定节点名称, 集群中节点名称唯一</li>\n<li>client: 绑定客户端接口地址, 0.0.0.0表示所有地址都可以访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Nacos（推荐）</p>\n<ul>\n<li>支持AP和CP切换<ul>\n<li>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>客服端负载均衡</p>\n<ul>\n<li>Netflix Ribbon（将停更）<ul>\n<li>nginx是集中式LB</li>\n<li>ribbon是进程内，会在注册中心获取注册信息服务列表缓存到JVM，从而在本地实现RPC远程服务调用</li>\n<li>ribbon = 负载均衡 + RestTemplate</li>\n</ul>\n</li>\n<li>LoadBalancer</li>\n</ul>\n</li>\n<li><p>服务调用</p>\n<ul>\n<li>Netflix Feign（将停更）<ul>\n<li>springcloud在feign的基础上开发</li>\n<li>feign是一个服务调用框架，集成了ribbon</li>\n<li>只需要定义服务绑定接口且以声明式的方法，优雅简单的实现服务调用</li>\n</ul>\n</li>\n<li>OpenFeign<ul>\n<li>Feign的接班人</li>\n<li>使用<ul>\n<li>微服务接口 + 业务类@FeignClient + 主启动@EnableFeignClients（优雅如dubbo）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>服务降级</p>\n<ul>\n<li>Netflix Hystrix（将停更）<ul>\n<li>服务降级 fallback<ul>\n<li>可以在服务端和客户端实现，一般在客户端实现</li>\n<li>触发场景<ul>\n<li>程序运行异常</li>\n<li>超时</li>\n<li>服务熔断触发服务降级</li>\n<li>线程池/信号量打满也会导致服务降级</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>服务限流 flowlimit</li>\n<li>服务熔断 break <ul>\n<li>触发场景<ul>\n<li>流量过大</li>\n</ul>\n</li>\n<li>处理过程<ul>\n<li>降级、熔断、恢复</li>\n</ul>\n</li>\n<li>熔断类型<ul>\n<li>熔断打开<ul>\n<li>请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态</li>\n</ul>\n</li>\n<li>熔断关闭<ul>\n<li>熔断关闭不会对服务进行熔断</li>\n</ul>\n</li>\n<li>熔断半开<ul>\n<li>部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>断路器开启或者关闭的条件<ul>\n<li>当满足一定阀值的时候（默认10秒内超过20个请求次数）</li>\n<li>当失败率达到一定的时候（默认10秒内超过50%请求失败）</li>\n<li>到达以上阀值，断路器将会开启</li>\n<li>当开启的时候，所有请求都不会进行转发</li>\n<li>一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>resilience4j（国外较多）</li>\n<li>sentienl（推荐）<ul>\n<li>把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>服务网关</p>\n<ul>\n<li>Netflix Zuul（将停更）</li>\n<li>Zuul2</li>\n<li>gateway（推荐）<ul>\n<li>Spring Cloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架</li>\n<li>使用场景<ul>\n<li>反向代理</li>\n<li>鉴权</li>\n<li>流量控制</li>\n<li>熔断</li>\n<li>日志监控</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>服务配置</p>\n<ul>\n<li>Spring Cloud Config</li>\n<li>Nacos（推荐）</li>\n</ul>\n</li>\n<li><p>服务总线</p>\n<ul>\n<li><p>springcloud stream </p>\n<ul>\n<li>屏蔽底层消息中间件的差异，降低切换版本，统一消息的编程模型</li>\n</ul>\n</li>\n<li><p>springcloud bus</p>\n<ul>\n<li>当前仅支持消息代理rabbitmq、kafka</li>\n<li>配合springcloud config实现配置自动刷新</li>\n</ul>\n</li>\n<li>Nacos</li>\n</ul>\n</li>\n<li><p>链路追踪</p>\n<ul>\n<li><p>sleuth</p>\n<ul>\n<li>收集整理分布式链路数据</li>\n<li>结合zippkin使用</li>\n</ul>\n</li>\n<li><p>zippkin</p>\n<ul>\n<li><p>展示分布式链路数据</p>\n</li>\n<li><p>docker启动</p>\n<figure class=\"highlight plain\"><figcaption><span>c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分布式事务</p>\n<ul>\n<li>seata<ul>\n<li>一个易于使用的高性能微服务分布式事务解决方案</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>可以看出随着Netflix大部分组件的停更，springcloud也出现大换血，当随之出现了设计理念更加先进的springcloud alibaba，其涵盖了前者大部分的功能点，短短几年时间，springcloud的新老交替，更新迭代不可谓不快，但生命不息，学习不止，这便是程序员的宿命啊。</li>\n</ul>"},{"title":"记一次spring事务问题排查","date":"2020-08-14T14:23:36.000Z","_content":"\n{%note info%}\n\nspring事务@Transactional失效问题排查。\n\n{%endnote%}\n<!--more-->\n\n#### 问题现象\n\n- 简述下问题\n  - 实际业务编码中遇到的问题，代码敏感，替换为类似结构的栗子\n  - 通过工厂类AnimalFactory获取动物实例，调用Animal.action()方法，该方法中存在对数据库的CURD\n  - 针对方法action()打上Transactional注解，然而在抛出异常时却没有事务回滚作用\n\n```java\npublic abstract class Animal implements InitializingBean{\n    public abstract void action();\n}\n```\n\n```java\n@Component\npublic class Dog extends Animal{\n    @Autowired\n    AnimalFactory animalFactory;\n\n  \t@Override\n    @Transactional(rollbackFor = Exception.class)\n  \tpublic String action(){\n      // insert\n      throw new RuntimeExection(\"\");\n\t    // update\n      return \"wangwang\";\n    }\n    @Override\n    public void afterPropertiesSet() {\n        animalFactory.register(Animal.TypeEnum.Dog.getValue(), this);\n    }\n}\n```\n\n```java\n@Component\npublic class AnimalFactory{\n    private Map<String, Animal> cachedAnimals = new ConcurrentHashMap<>();\n    \n  \tpublic void register(String animalType, Animal animal){\n        cachedAnimals.put(animalType, animal);\n    }\n  \t\n    public Animal loadAnimal(String animalType) {\n      if (!cachedAnimals.containsKey(animalType)) {\n        throw new IllegalArgumentException(\"未找到类型为【\" + animalType + \"】的动物\");\n      }\n      return cachedAnimals.get(msgType.toLowerCase());\n    }\n}\n```\n\n```java\n@Component\npublic class Zoo {\n  public Animal showDog(){\n    Animal animal = AnimalFactory.\n    animal.action();\n  }\n}\n```\n\n\n\n#### 问题环境\n\n- 事务配置\n\n```java\nimport org.aspectj.lang.annotation.Aspect;\nimport org.springframework.aop.Advisor;\nimport org.springframework.aop.aspectj.AspectJExpressionPointcut;\nimport org.springframework.aop.support.DefaultPointcutAdvisor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.interceptor.*;\n\nimport javax.sql.DataSource;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Aspect\n@Configuration\npublic class TxConfig {\n\n    /**\n     * 切面 Service\n     */\n    private static final String AOP_POINTCUT_EXPRESSION = \"execution(* cn.tongdun.bond..service..*.*(..))\";\n\n    @Autowired\n    private PlatformTransactionManager transactionManager;\n\n    @Bean\n    public PlatformTransactionManager txManager(DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    /**\n     * 事务拦截器\n     */\n    @Bean\n    public TransactionInterceptor txAdvice() {\n        NameMatchTransactionAttributeSource source = new NameMatchTransactionAttributeSource();\n\n        /*只读事务，不做更新操作*/\n        RuleBasedTransactionAttribute readOnlyTx = new RuleBasedTransactionAttribute();\n        readOnlyTx.setReadOnly(true);\n        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);\n\n        /*当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务*/\n        RuleBasedTransactionAttribute requiredTx = new RuleBasedTransactionAttribute();\n        requiredTx.setRollbackRules(Collections.singletonList(new RollbackRuleAttribute(Exception.class)));\n        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n\n        Map<String, TransactionAttribute> txMap = new HashMap<>(16);\n\n        /*配置事务方法的前缀*/\n        txMap.put(\"add*\", requiredTx);\n        txMap.put(\"save*\", requiredTx);\n        txMap.put(\"insert*\", requiredTx);\n        txMap.put(\"create*\", requiredTx);\n        txMap.put(\"batch*\", requiredTx);\n        txMap.put(\"update*\", requiredTx);\n        txMap.put(\"modify*\", requiredTx);\n        txMap.put(\"delete*\", requiredTx);\n        /*配置只读事务方法的前缀*/\n        txMap.put(\"get*\", readOnlyTx);\n        txMap.put(\"query*\", readOnlyTx);\n        txMap.put(\"count*\", readOnlyTx);\n        txMap.put(\"select*\", readOnlyTx);\n        source.setNameMap(txMap);\n\n        return new TransactionInterceptor(transactionManager, source);\n    }\n\n    /**\n     * 注册事务\n     */\n    @Bean\n    public Advisor txAdviceAdvisor(TransactionInterceptor txAdvice) {\n        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();\n        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);\n        return new DefaultPointcutAdvisor(pointcut, txAdvice);\n    }\n\n}\n```\n\n- `action命令未AOP事务的规则，故次配置不会在action()中生效，正因如此才加上了`\n- Spring默认propagation属性为Propagation.REQUIRED\n\n#### 排查思路\n\n- @Transactional失效场景\n  1. @Transactional 应用在非 public 修饰的方法上\n  2. @Transactional 注解属性 propagation 设置错误\n  3. @Transactional  注解属性 rollbackFor 设置错误\n  4. 同一个类中方法调用，导致 @Transactional 失效\n  5. 异常被 catch“吃了”导致 @Transactional 失效\n  6. 数据库引擎不支持事务\n- 然而网上常见的几种@Transactional失效场景均无法匹配当前问题场景\n- 即使把问题函数名`aciton`改为`addaction`也仍然没有事务回滚\n\n- 通过在代码中加入工具类`TransactionTestUtils.transactionRequired`，直观看出当前函数内是否存在事务\n\n```java\nTransactionTestUtils.transactionRequired(\"action\");\n```\n\n```java\nimport java.lang.reflect.InvocationTargetException;\n\npublic class TransactionTestUtils {\n    private static final boolean transactionDebugging = true;\n    private static final boolean verboseTransactionDebugging = true;\n\n    public static void showTransactionStatus(String message) {\n        System.out.println(((transactionActive()) ? \"[+] \" : \"[-] \") + message);\n    }\n\n    public static boolean transactionActive() {\n        try {\n            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n            Class tsmClass = contextClassLoader.loadClass(\"org.springframework.transaction.support.TransactionSynchronizationManager\");\n            Boolean isActive = (Boolean) tsmClass.getMethod(\"isActualTransactionActive\", null).invoke(null, null);\n\n            return isActive;\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n\n        throw new IllegalStateException(\"ServerUtils.transactionActive was unable to complete properly\");\n    }\n\n    public static void transactionRequired(String message) {\n        if (!transactionDebugging) {\n            return;\n        }\n\n        if (verboseTransactionDebugging) {\n            showTransactionStatus(message);\n        }\n    }\n}\n```\n\n- 通过观察发现，问题函数内的事务确实没有生效\n- 仔细思考，@Transactional事务，依赖SpringAOP实现，那么不如在AOP事务源码处加上断点，看看到底进入什么逻辑导致事物没生效\n- 结果发现，连AOP外层逻辑都没进去\n- 再想想，AOP实际通过动态代理实现，而动态代理实际通过spring容器实现，也就是函数对应的类实例可能未被容器所管理\n- 想到这里，问题点很容器就找到了，AnimalFactory工厂中register()加注册逻辑反转给具体的工厂中的类，而Dog实际通过put的方式将自己存入了`cachedHandlers`中，脱离了容器的管控\n- 对于上面一点，有必要解释下，spring实现动态代理是通过代理类+被代理类 两个实例的方式实现的，而不是只有一个代理类，故注册进工厂的是原始Dog实例，而不是被代理类\n\n#### 解决方案\n\n- 既然没有通过spring容器注册实例导致了当前问题，那么咱通过spring容器拿就是了\n- register不注册实例，改为注册beanName\n\n```java\n@Component(\"Dog\")\npublic class Dog extends Animal{\n    @Autowired\n    AnimalFactory animalFactory;\n\n  \t@Override\n    @Transactional(rollbackFor = Exception.class)\n  \tpublic String action(){\n      // insert\n      throw new RuntimeExection(\"\");\n\t    // update\n      return \"wangwang\";\n    }\n    @Override\n    public void afterPropertiesSet() {\n        animalFactory.register(Animal.TypeEnum.Dog.getValue(), \"Dog\");\n    }\n}\n```\n\n- 工厂类load时通过容器获取对应的实例\n\n```java\n@Component\npublic class AnimalFactory{\n    private Map<String, String> cachedAnimals = new ConcurrentHashMap<>();\n    \n  \tpublic void register(String animalType, String beanName){\n        cachedAnimals.put(animalType, beanName);\n    }\n  \t\n    public Animal loadAnimal(String animalType) {\n      if (!cachedAnimals.containsKey(animalType)) {\n        throw new IllegalArgumentException(\"未找到类型为【\" + animalType + \"】的动物\");\n      }\n      String beanName = cachedAnimals.get(msgType.toLowerCase());\n      return (Animal)applicationContext.getBean(beanName);\n    }\n}\n```\n\n#### 总结\n\n- 问题在复盘时，顺着捋总是会显得`easy and stupid`，希望能通过不断的总结优化既有的问题思考方法论，以至于以后能少走点弯路\n\n","source":"_posts/2020-08-14-记一次spring事务问题排查.md","raw":"---\ntitle: 记一次spring事务问题排查\ndate: 2020-08-14 22:23:36\ntags: 事务\ncategories: spring\n---\n\n{%note info%}\n\nspring事务@Transactional失效问题排查。\n\n{%endnote%}\n<!--more-->\n\n#### 问题现象\n\n- 简述下问题\n  - 实际业务编码中遇到的问题，代码敏感，替换为类似结构的栗子\n  - 通过工厂类AnimalFactory获取动物实例，调用Animal.action()方法，该方法中存在对数据库的CURD\n  - 针对方法action()打上Transactional注解，然而在抛出异常时却没有事务回滚作用\n\n```java\npublic abstract class Animal implements InitializingBean{\n    public abstract void action();\n}\n```\n\n```java\n@Component\npublic class Dog extends Animal{\n    @Autowired\n    AnimalFactory animalFactory;\n\n  \t@Override\n    @Transactional(rollbackFor = Exception.class)\n  \tpublic String action(){\n      // insert\n      throw new RuntimeExection(\"\");\n\t    // update\n      return \"wangwang\";\n    }\n    @Override\n    public void afterPropertiesSet() {\n        animalFactory.register(Animal.TypeEnum.Dog.getValue(), this);\n    }\n}\n```\n\n```java\n@Component\npublic class AnimalFactory{\n    private Map<String, Animal> cachedAnimals = new ConcurrentHashMap<>();\n    \n  \tpublic void register(String animalType, Animal animal){\n        cachedAnimals.put(animalType, animal);\n    }\n  \t\n    public Animal loadAnimal(String animalType) {\n      if (!cachedAnimals.containsKey(animalType)) {\n        throw new IllegalArgumentException(\"未找到类型为【\" + animalType + \"】的动物\");\n      }\n      return cachedAnimals.get(msgType.toLowerCase());\n    }\n}\n```\n\n```java\n@Component\npublic class Zoo {\n  public Animal showDog(){\n    Animal animal = AnimalFactory.\n    animal.action();\n  }\n}\n```\n\n\n\n#### 问题环境\n\n- 事务配置\n\n```java\nimport org.aspectj.lang.annotation.Aspect;\nimport org.springframework.aop.Advisor;\nimport org.springframework.aop.aspectj.AspectJExpressionPointcut;\nimport org.springframework.aop.support.DefaultPointcutAdvisor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.interceptor.*;\n\nimport javax.sql.DataSource;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Aspect\n@Configuration\npublic class TxConfig {\n\n    /**\n     * 切面 Service\n     */\n    private static final String AOP_POINTCUT_EXPRESSION = \"execution(* cn.tongdun.bond..service..*.*(..))\";\n\n    @Autowired\n    private PlatformTransactionManager transactionManager;\n\n    @Bean\n    public PlatformTransactionManager txManager(DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    /**\n     * 事务拦截器\n     */\n    @Bean\n    public TransactionInterceptor txAdvice() {\n        NameMatchTransactionAttributeSource source = new NameMatchTransactionAttributeSource();\n\n        /*只读事务，不做更新操作*/\n        RuleBasedTransactionAttribute readOnlyTx = new RuleBasedTransactionAttribute();\n        readOnlyTx.setReadOnly(true);\n        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);\n\n        /*当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务*/\n        RuleBasedTransactionAttribute requiredTx = new RuleBasedTransactionAttribute();\n        requiredTx.setRollbackRules(Collections.singletonList(new RollbackRuleAttribute(Exception.class)));\n        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n\n        Map<String, TransactionAttribute> txMap = new HashMap<>(16);\n\n        /*配置事务方法的前缀*/\n        txMap.put(\"add*\", requiredTx);\n        txMap.put(\"save*\", requiredTx);\n        txMap.put(\"insert*\", requiredTx);\n        txMap.put(\"create*\", requiredTx);\n        txMap.put(\"batch*\", requiredTx);\n        txMap.put(\"update*\", requiredTx);\n        txMap.put(\"modify*\", requiredTx);\n        txMap.put(\"delete*\", requiredTx);\n        /*配置只读事务方法的前缀*/\n        txMap.put(\"get*\", readOnlyTx);\n        txMap.put(\"query*\", readOnlyTx);\n        txMap.put(\"count*\", readOnlyTx);\n        txMap.put(\"select*\", readOnlyTx);\n        source.setNameMap(txMap);\n\n        return new TransactionInterceptor(transactionManager, source);\n    }\n\n    /**\n     * 注册事务\n     */\n    @Bean\n    public Advisor txAdviceAdvisor(TransactionInterceptor txAdvice) {\n        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();\n        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);\n        return new DefaultPointcutAdvisor(pointcut, txAdvice);\n    }\n\n}\n```\n\n- `action命令未AOP事务的规则，故次配置不会在action()中生效，正因如此才加上了`\n- Spring默认propagation属性为Propagation.REQUIRED\n\n#### 排查思路\n\n- @Transactional失效场景\n  1. @Transactional 应用在非 public 修饰的方法上\n  2. @Transactional 注解属性 propagation 设置错误\n  3. @Transactional  注解属性 rollbackFor 设置错误\n  4. 同一个类中方法调用，导致 @Transactional 失效\n  5. 异常被 catch“吃了”导致 @Transactional 失效\n  6. 数据库引擎不支持事务\n- 然而网上常见的几种@Transactional失效场景均无法匹配当前问题场景\n- 即使把问题函数名`aciton`改为`addaction`也仍然没有事务回滚\n\n- 通过在代码中加入工具类`TransactionTestUtils.transactionRequired`，直观看出当前函数内是否存在事务\n\n```java\nTransactionTestUtils.transactionRequired(\"action\");\n```\n\n```java\nimport java.lang.reflect.InvocationTargetException;\n\npublic class TransactionTestUtils {\n    private static final boolean transactionDebugging = true;\n    private static final boolean verboseTransactionDebugging = true;\n\n    public static void showTransactionStatus(String message) {\n        System.out.println(((transactionActive()) ? \"[+] \" : \"[-] \") + message);\n    }\n\n    public static boolean transactionActive() {\n        try {\n            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n            Class tsmClass = contextClassLoader.loadClass(\"org.springframework.transaction.support.TransactionSynchronizationManager\");\n            Boolean isActive = (Boolean) tsmClass.getMethod(\"isActualTransactionActive\", null).invoke(null, null);\n\n            return isActive;\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n\n        throw new IllegalStateException(\"ServerUtils.transactionActive was unable to complete properly\");\n    }\n\n    public static void transactionRequired(String message) {\n        if (!transactionDebugging) {\n            return;\n        }\n\n        if (verboseTransactionDebugging) {\n            showTransactionStatus(message);\n        }\n    }\n}\n```\n\n- 通过观察发现，问题函数内的事务确实没有生效\n- 仔细思考，@Transactional事务，依赖SpringAOP实现，那么不如在AOP事务源码处加上断点，看看到底进入什么逻辑导致事物没生效\n- 结果发现，连AOP外层逻辑都没进去\n- 再想想，AOP实际通过动态代理实现，而动态代理实际通过spring容器实现，也就是函数对应的类实例可能未被容器所管理\n- 想到这里，问题点很容器就找到了，AnimalFactory工厂中register()加注册逻辑反转给具体的工厂中的类，而Dog实际通过put的方式将自己存入了`cachedHandlers`中，脱离了容器的管控\n- 对于上面一点，有必要解释下，spring实现动态代理是通过代理类+被代理类 两个实例的方式实现的，而不是只有一个代理类，故注册进工厂的是原始Dog实例，而不是被代理类\n\n#### 解决方案\n\n- 既然没有通过spring容器注册实例导致了当前问题，那么咱通过spring容器拿就是了\n- register不注册实例，改为注册beanName\n\n```java\n@Component(\"Dog\")\npublic class Dog extends Animal{\n    @Autowired\n    AnimalFactory animalFactory;\n\n  \t@Override\n    @Transactional(rollbackFor = Exception.class)\n  \tpublic String action(){\n      // insert\n      throw new RuntimeExection(\"\");\n\t    // update\n      return \"wangwang\";\n    }\n    @Override\n    public void afterPropertiesSet() {\n        animalFactory.register(Animal.TypeEnum.Dog.getValue(), \"Dog\");\n    }\n}\n```\n\n- 工厂类load时通过容器获取对应的实例\n\n```java\n@Component\npublic class AnimalFactory{\n    private Map<String, String> cachedAnimals = new ConcurrentHashMap<>();\n    \n  \tpublic void register(String animalType, String beanName){\n        cachedAnimals.put(animalType, beanName);\n    }\n  \t\n    public Animal loadAnimal(String animalType) {\n      if (!cachedAnimals.containsKey(animalType)) {\n        throw new IllegalArgumentException(\"未找到类型为【\" + animalType + \"】的动物\");\n      }\n      String beanName = cachedAnimals.get(msgType.toLowerCase());\n      return (Animal)applicationContext.getBean(beanName);\n    }\n}\n```\n\n#### 总结\n\n- 问题在复盘时，顺着捋总是会显得`easy and stupid`，希望能通过不断的总结优化既有的问题思考方法论，以至于以后能少走点弯路\n\n","slug":"记一次spring事务问题排查","published":1,"updated":"2020-09-12T10:09:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6vz8003m16p7hed4e8b0","content":"<div class=\"note info\"><p>spring事务@Transactional失效问题排查。</p></div>\n<a id=\"more\"></a>\n<h4 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h4><ul>\n<li>简述下问题<ul>\n<li>实际业务编码中遇到的问题，代码敏感，替换为类似结构的栗子</li>\n<li>通过工厂类AnimalFactory获取动物实例，调用Animal.action()方法，该方法中存在对数据库的CURD</li>\n<li>针对方法action()打上Transactional注解，然而在抛出异常时却没有事务回滚作用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AnimalFactory animalFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// insert</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeExection(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t    <span class=\"comment\">// update</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"wangwang\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        animalFactory.register(Animal.TypeEnum.Dog.getValue(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Animal&gt; cachedAnimals = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(String animalType, Animal animal)</span></span>&#123;</span><br><span class=\"line\">        cachedAnimals.put(animalType, animal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">loadAnimal</span><span class=\"params\">(String animalType)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cachedAnimals.containsKey(animalType)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"未找到类型为【\"</span> + animalType + <span class=\"string\">\"】的动物\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cachedAnimals.get(msgType.toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zoo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">showDog</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Animal animal = AnimalFactory.</span><br><span class=\"line\">    animal.action();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"问题环境\"><a href=\"#问题环境\" class=\"headerlink\" title=\"问题环境\"></a>问题环境</h4><ul>\n<li>事务配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.Advisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.support.DefaultPointcutAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.interceptor.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TxConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 切面 Service</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String AOP_POINTCUT_EXPRESSION = <span class=\"string\">\"execution(* cn.tongdun.bond..service..*.*(..))\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager transactionManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">txManager</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 事务拦截器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TransactionInterceptor <span class=\"title\">txAdvice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        NameMatchTransactionAttributeSource source = <span class=\"keyword\">new</span> NameMatchTransactionAttributeSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*只读事务，不做更新操作*/</span></span><br><span class=\"line\">        RuleBasedTransactionAttribute readOnlyTx = <span class=\"keyword\">new</span> RuleBasedTransactionAttribute();</span><br><span class=\"line\">        readOnlyTx.setReadOnly(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务*/</span></span><br><span class=\"line\">        RuleBasedTransactionAttribute requiredTx = <span class=\"keyword\">new</span> RuleBasedTransactionAttribute();</span><br><span class=\"line\">        requiredTx.setRollbackRules(Collections.singletonList(<span class=\"keyword\">new</span> RollbackRuleAttribute(Exception.class)));</span><br><span class=\"line\">        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, TransactionAttribute&gt; txMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*配置事务方法的前缀*/</span></span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"add*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"save*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"insert*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"create*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"batch*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"update*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"modify*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"delete*\"</span>, requiredTx);</span><br><span class=\"line\">        <span class=\"comment\">/*配置只读事务方法的前缀*/</span></span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"get*\"</span>, readOnlyTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"query*\"</span>, readOnlyTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"count*\"</span>, readOnlyTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"select*\"</span>, readOnlyTx);</span><br><span class=\"line\">        source.setNameMap(txMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransactionInterceptor(transactionManager, source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册事务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Advisor <span class=\"title\">txAdviceAdvisor</span><span class=\"params\">(TransactionInterceptor txAdvice)</span> </span>&#123;</span><br><span class=\"line\">        AspectJExpressionPointcut pointcut = <span class=\"keyword\">new</span> AspectJExpressionPointcut();</span><br><span class=\"line\">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultPointcutAdvisor(pointcut, txAdvice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>action命令未AOP事务的规则，故次配置不会在action()中生效，正因如此才加上了</code></li>\n<li>Spring默认propagation属性为Propagation.REQUIRED</li>\n</ul>\n<h4 id=\"排查思路\"><a href=\"#排查思路\" class=\"headerlink\" title=\"排查思路\"></a>排查思路</h4><ul>\n<li>@Transactional失效场景<ol>\n<li>@Transactional 应用在非 public 修饰的方法上</li>\n<li>@Transactional 注解属性 propagation 设置错误</li>\n<li>@Transactional  注解属性 rollbackFor 设置错误</li>\n<li>同一个类中方法调用，导致 @Transactional 失效</li>\n<li>异常被 catch“吃了”导致 @Transactional 失效</li>\n<li>数据库引擎不支持事务</li>\n</ol>\n</li>\n<li>然而网上常见的几种@Transactional失效场景均无法匹配当前问题场景</li>\n<li><p>即使把问题函数名<code>aciton</code>改为<code>addaction</code>也仍然没有事务回滚</p>\n</li>\n<li><p>通过在代码中加入工具类<code>TransactionTestUtils.transactionRequired</code>，直观看出当前函数内是否存在事务</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TransactionTestUtils.transactionRequired(<span class=\"string\">\"action\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionTestUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> transactionDebugging = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verboseTransactionDebugging = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showTransactionStatus</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(((transactionActive()) ? <span class=\"string\">\"[+] \"</span> : <span class=\"string\">\"[-] \"</span>) + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transactionActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">            Class tsmClass = contextClassLoader.loadClass(<span class=\"string\">\"org.springframework.transaction.support.TransactionSynchronizationManager\"</span>);</span><br><span class=\"line\">            Boolean isActive = (Boolean) tsmClass.getMethod(<span class=\"string\">\"isActualTransactionActive\"</span>, <span class=\"keyword\">null</span>).invoke(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> isActive;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"ServerUtils.transactionActive was unable to complete properly\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">transactionRequired</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!transactionDebugging) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (verboseTransactionDebugging) &#123;</span><br><span class=\"line\">            showTransactionStatus(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过观察发现，问题函数内的事务确实没有生效</li>\n<li>仔细思考，@Transactional事务，依赖SpringAOP实现，那么不如在AOP事务源码处加上断点，看看到底进入什么逻辑导致事物没生效</li>\n<li>结果发现，连AOP外层逻辑都没进去</li>\n<li>再想想，AOP实际通过动态代理实现，而动态代理实际通过spring容器实现，也就是函数对应的类实例可能未被容器所管理</li>\n<li>想到这里，问题点很容器就找到了，AnimalFactory工厂中register()加注册逻辑反转给具体的工厂中的类，而Dog实际通过put的方式将自己存入了<code>cachedHandlers</code>中，脱离了容器的管控</li>\n<li>对于上面一点，有必要解释下，spring实现动态代理是通过代理类+被代理类 两个实例的方式实现的，而不是只有一个代理类，故注册进工厂的是原始Dog实例，而不是被代理类</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>既然没有通过spring容器注册实例导致了当前问题，那么咱通过spring容器拿就是了</li>\n<li>register不注册实例，改为注册beanName</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"Dog\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AnimalFactory animalFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// insert</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeExection(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t    <span class=\"comment\">// update</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"wangwang\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        animalFactory.register(Animal.TypeEnum.Dog.getValue(), <span class=\"string\">\"Dog\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>工厂类load时通过容器获取对应的实例</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; cachedAnimals = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(String animalType, String beanName)</span></span>&#123;</span><br><span class=\"line\">        cachedAnimals.put(animalType, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">loadAnimal</span><span class=\"params\">(String animalType)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cachedAnimals.containsKey(animalType)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"未找到类型为【\"</span> + animalType + <span class=\"string\">\"】的动物\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      String beanName = cachedAnimals.get(msgType.toLowerCase());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (Animal)applicationContext.getBean(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>问题在复盘时，顺着捋总是会显得<code>easy and stupid</code>，希望能通过不断的总结优化既有的问题思考方法论，以至于以后能少走点弯路</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>spring事务@Transactional失效问题排查。</p></div>","more":"<h4 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h4><ul>\n<li>简述下问题<ul>\n<li>实际业务编码中遇到的问题，代码敏感，替换为类似结构的栗子</li>\n<li>通过工厂类AnimalFactory获取动物实例，调用Animal.action()方法，该方法中存在对数据库的CURD</li>\n<li>针对方法action()打上Transactional注解，然而在抛出异常时却没有事务回滚作用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AnimalFactory animalFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// insert</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeExection(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t    <span class=\"comment\">// update</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"wangwang\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        animalFactory.register(Animal.TypeEnum.Dog.getValue(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Animal&gt; cachedAnimals = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(String animalType, Animal animal)</span></span>&#123;</span><br><span class=\"line\">        cachedAnimals.put(animalType, animal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">loadAnimal</span><span class=\"params\">(String animalType)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cachedAnimals.containsKey(animalType)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"未找到类型为【\"</span> + animalType + <span class=\"string\">\"】的动物\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cachedAnimals.get(msgType.toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zoo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">showDog</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Animal animal = AnimalFactory.</span><br><span class=\"line\">    animal.action();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"问题环境\"><a href=\"#问题环境\" class=\"headerlink\" title=\"问题环境\"></a>问题环境</h4><ul>\n<li>事务配置</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.Advisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.support.DefaultPointcutAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.interceptor.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TxConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 切面 Service</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String AOP_POINTCUT_EXPRESSION = <span class=\"string\">\"execution(* cn.tongdun.bond..service..*.*(..))\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager transactionManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">txManager</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 事务拦截器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TransactionInterceptor <span class=\"title\">txAdvice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        NameMatchTransactionAttributeSource source = <span class=\"keyword\">new</span> NameMatchTransactionAttributeSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*只读事务，不做更新操作*/</span></span><br><span class=\"line\">        RuleBasedTransactionAttribute readOnlyTx = <span class=\"keyword\">new</span> RuleBasedTransactionAttribute();</span><br><span class=\"line\">        readOnlyTx.setReadOnly(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务*/</span></span><br><span class=\"line\">        RuleBasedTransactionAttribute requiredTx = <span class=\"keyword\">new</span> RuleBasedTransactionAttribute();</span><br><span class=\"line\">        requiredTx.setRollbackRules(Collections.singletonList(<span class=\"keyword\">new</span> RollbackRuleAttribute(Exception.class)));</span><br><span class=\"line\">        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, TransactionAttribute&gt; txMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*配置事务方法的前缀*/</span></span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"add*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"save*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"insert*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"create*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"batch*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"update*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"modify*\"</span>, requiredTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"delete*\"</span>, requiredTx);</span><br><span class=\"line\">        <span class=\"comment\">/*配置只读事务方法的前缀*/</span></span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"get*\"</span>, readOnlyTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"query*\"</span>, readOnlyTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"count*\"</span>, readOnlyTx);</span><br><span class=\"line\">        txMap.put(<span class=\"string\">\"select*\"</span>, readOnlyTx);</span><br><span class=\"line\">        source.setNameMap(txMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransactionInterceptor(transactionManager, source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册事务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Advisor <span class=\"title\">txAdviceAdvisor</span><span class=\"params\">(TransactionInterceptor txAdvice)</span> </span>&#123;</span><br><span class=\"line\">        AspectJExpressionPointcut pointcut = <span class=\"keyword\">new</span> AspectJExpressionPointcut();</span><br><span class=\"line\">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultPointcutAdvisor(pointcut, txAdvice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>action命令未AOP事务的规则，故次配置不会在action()中生效，正因如此才加上了</code></li>\n<li>Spring默认propagation属性为Propagation.REQUIRED</li>\n</ul>\n<h4 id=\"排查思路\"><a href=\"#排查思路\" class=\"headerlink\" title=\"排查思路\"></a>排查思路</h4><ul>\n<li>@Transactional失效场景<ol>\n<li>@Transactional 应用在非 public 修饰的方法上</li>\n<li>@Transactional 注解属性 propagation 设置错误</li>\n<li>@Transactional  注解属性 rollbackFor 设置错误</li>\n<li>同一个类中方法调用，导致 @Transactional 失效</li>\n<li>异常被 catch“吃了”导致 @Transactional 失效</li>\n<li>数据库引擎不支持事务</li>\n</ol>\n</li>\n<li>然而网上常见的几种@Transactional失效场景均无法匹配当前问题场景</li>\n<li><p>即使把问题函数名<code>aciton</code>改为<code>addaction</code>也仍然没有事务回滚</p>\n</li>\n<li><p>通过在代码中加入工具类<code>TransactionTestUtils.transactionRequired</code>，直观看出当前函数内是否存在事务</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TransactionTestUtils.transactionRequired(<span class=\"string\">\"action\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionTestUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> transactionDebugging = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> verboseTransactionDebugging = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showTransactionStatus</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(((transactionActive()) ? <span class=\"string\">\"[+] \"</span> : <span class=\"string\">\"[-] \"</span>) + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transactionActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">            Class tsmClass = contextClassLoader.loadClass(<span class=\"string\">\"org.springframework.transaction.support.TransactionSynchronizationManager\"</span>);</span><br><span class=\"line\">            Boolean isActive = (Boolean) tsmClass.getMethod(<span class=\"string\">\"isActualTransactionActive\"</span>, <span class=\"keyword\">null</span>).invoke(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> isActive;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"ServerUtils.transactionActive was unable to complete properly\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">transactionRequired</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!transactionDebugging) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (verboseTransactionDebugging) &#123;</span><br><span class=\"line\">            showTransactionStatus(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过观察发现，问题函数内的事务确实没有生效</li>\n<li>仔细思考，@Transactional事务，依赖SpringAOP实现，那么不如在AOP事务源码处加上断点，看看到底进入什么逻辑导致事物没生效</li>\n<li>结果发现，连AOP外层逻辑都没进去</li>\n<li>再想想，AOP实际通过动态代理实现，而动态代理实际通过spring容器实现，也就是函数对应的类实例可能未被容器所管理</li>\n<li>想到这里，问题点很容器就找到了，AnimalFactory工厂中register()加注册逻辑反转给具体的工厂中的类，而Dog实际通过put的方式将自己存入了<code>cachedHandlers</code>中，脱离了容器的管控</li>\n<li>对于上面一点，有必要解释下，spring实现动态代理是通过代理类+被代理类 两个实例的方式实现的，而不是只有一个代理类，故注册进工厂的是原始Dog实例，而不是被代理类</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>既然没有通过spring容器注册实例导致了当前问题，那么咱通过spring容器拿就是了</li>\n<li>register不注册实例，改为注册beanName</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"Dog\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AnimalFactory animalFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// insert</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeExection(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t    <span class=\"comment\">// update</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"wangwang\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        animalFactory.register(Animal.TypeEnum.Dog.getValue(), <span class=\"string\">\"Dog\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>工厂类load时通过容器获取对应的实例</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; cachedAnimals = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(String animalType, String beanName)</span></span>&#123;</span><br><span class=\"line\">        cachedAnimals.put(animalType, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">loadAnimal</span><span class=\"params\">(String animalType)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cachedAnimals.containsKey(animalType)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"未找到类型为【\"</span> + animalType + <span class=\"string\">\"】的动物\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      String beanName = cachedAnimals.get(msgType.toLowerCase());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (Animal)applicationContext.getBean(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>问题在复盘时，顺着捋总是会显得<code>easy and stupid</code>，希望能通过不断的总结优化既有的问题思考方法论，以至于以后能少走点弯路</li>\n</ul>"},{"title":"spring5框架学习总结","date":"2020-10-26T09:09:06.000Z","_content":"\n{%note info%}\n\njava后段必备技术栈\n\n{%endnote%}\n<!--more-->\n\n\n\n### Spring 框架概述\n\n- 轻量级开源 JavaEE 框架，为了解决企业复杂性，两个核心组成： IOC 和 AOP\n- 整体架构如下\n\n\n\n![20201022145213.jpg](https://i.loli.net/2020/10/22/JKBwDbgmORQLvFp.jpg)\n\n---\n\n### IOC 容器\n\n#### what\n\n1. 控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理\n2. 使用 IOC 目的：为了耦合度降低\n\n#### ioc原理\nxml 解析、工厂模式、反射\n\n#### ioc接口\n\n1. BeanFactory： IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用\n    - 加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象\n2. ApplicationContext： `BeanFactory 接口的子接口`，提供更多更强大的功能，一般由开发人员进行使用\n    - 加载配置文件时候就会把在配置文件对象进行创建\n\n#### Bean 管理\n\n- 基于 xml\n\n  - 创建对象\n          ``` \n          <bean id=\"user\" class=\"com.zipee.spring5.User\"></bean>\n          ```\n  - 注入属性\n      - DI：依赖注入，就是注入属性\n          - 手动注入（xml中指定）\n          - `自动注入`（自动装配）\n\n- 基于注解\n\n  - 创建对象\n\n      - 注解类型（以下四个注解功能是一样的，都可以用来创建 bean 实例）      \n        - @Component\n           - @Service\n        - @Controller\n           - @Repository\n\n      1. 引入依赖（spring-aop jar包）\n\n      2. 开启组件扫描\n\n            - 如果扫描多个包，多个包使用逗号隔开\n\n         - 扫描包上层目录\n\n               ``` java\n              <context:component-scan base-package=\"com.zipee\"></context:component-scan>\n               ```\n\n      3. 创建类，在类上面添加创建对象注解\n      4. 开启组件扫描细节配置（可以指定扫描过滤器）\n\n  - 注入属性\n\n       - @Autowired\n            - 根据属性类型进行自动装配\n       - @Qualifier\n            - 根据名称进行注入（需要和@Autowired 一起使用）\n       - @Resource（javax中定义，建议使用Autowired和Qualifier）\n            - 可以根据类型注入，可以根据名称注入\n       - @Value\n            - 注入普通类型属性\n\n   - 完全注解开发（springboot）\n\n     1. 完全注解开发\n                 ``` java\n             @Configuration //作为配置类，替代 xml 配置文件\n             @ComponentScan(basePackages = {\"com.zipee\"})\n             public class SpringConfig {\n             }\n                 ```\n\n     2. 通过配置类获取ioc容器\n                 ``` java\n             ApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class);\n                 ```\n\n### bean分类\n- 普通bean\n    \n    - 在配置文件中定义 bean 类型就是返回类型\n- 工厂bean（FactoryBean）\n    - 在配置文件定义 bean ==类型可以和返回类型不一样==\n    1. 创建类，让这个类作为工厂 bean，实现接口 FactoryBean\n    2. 实现接口里面的方法，在实现的方法中定义返回的 bean 类型\n    \n### bean作用域\n1. 在 Spring 里面，设置创建 bean 实例是单实例还是多实例\n2. 在 Spring 里面，默认情况下， bean 是单实例对象\n3. scope 属性值\n    - singleton\n        - 加载 spring 配置文件时候就会创建单实例对象\n    - prototype\n        - 在调用getBean 方法时候创建多实例对象\n\n### bean 生命周期\n1. 通过构造器创建 bean 实例（无参数构造）\n2. 为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）\n3. 把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization\n4. 调用 bean 的初始化的方法（需要进行配置初始化的方法）\n5. 把 bean 实例传递 bean 后置处理器的方法 ostProcessAfterInitialization\n6. bean 可以使用了（对象获取到了）\n7. 当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）\n\n- 使用后置处理器\n    1. 创建类，实现接口 BeanPostProcessor，创建后置处理器 \n    2. 后置处理器对所有的bean都会生效\n\n---\n\n### Aop\n\n#### 实现原理\n\n1. 有接口情况，使用 JDK 动态代理\n    - 创建接口实现类代理对象，增强类的方法\n    - 实际使用Proxy动态创建代理对象\n2. 没有接口情况，使用 CGLIB 动态代理\n    - 创建子类的代理对象，增强类的方法\n\n#### 术语\n\n1. 连接点\n    \n    - 类里面可以被增强的方法\n2. 切入点\n    - 实际被真正增强的方法\n    - 使用\n        - 语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )（返回类型一般可省略为空格）\n        - 对 com.atguigu.dao.BookDao 类里面的 add 进行增强\n            ``` \n            execution(* com.zipee.dao.BookDao.add(..))\n            ```\n        - 对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强\n            ``` \n            execution(* com.zipee.dao.BookDao.*(..))\n            ```\n        - 对 com.atguigu.dao包里面所有类，类里面所有方法进行增强\n            ``` \n            execution(* com.zipee.dao.*.*(..))\n            ```\n    \n3. 通知（增强）\n    - 实际增强的逻辑\n    - 通知种类\n        - 前置通知\n        - 后置通知\n        - 环绕通知\n        - 异常通知\n        - 最终通知\n4. 切面\n    \n    - 把通知应用到切入点的过程\n\n#### AspectJ\n\n- AspectJ为独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作\n- 使用\n    - 基于 xml 配置文件实现\n    - 基于注解方式实现\n\n#### aop使用步骤\n\n1. 创建类，在类里面定义方法\n2. 创建增强类（编写增强逻辑）\n    - 在增强类上面添加注解 @Aspect\n    - 在增强类的里面，在作为通知方法上面添加通知类型注解（@Before，@After...），使用切入点表达式配置\n3. 进行通知的配置\n    - 开启注解扫描 @ComponentScan(basePackages = {\"com.zipee\"})\n    - 在 spring 配置文件中开启生成代理对象 @EnableAspectJAutoProxy(proxyTargetClass = true)\n4. 相同的切入点抽取 @Pointcut\n5. 有多个增强类多同一个方法进行增强，设置增强类优先级 @Order，数字类型值越小优先级越高\n\n---\n\n### 事务管理\n\n#### 注解声明式事务管理\n1. 在 spring 配置文件配置事务管理器\n    ``` java\n    <!--创建事务管理器-->\n    <bean id=\"transactionManager\"\n    class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--注入数据源-->\n    <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n    ```\n2. 在 spring 配置文件，开启事务注解\n    - 在 spring 配置文件引入名称空间 tx\n    - 开启事务注解\n    - 在 service 类上面（ 或者 service 类里面方法上面）添加事务注解(@Transactional)\n3. 参数配置说明\n    - propagation：事务传播行为\n        - REQUIRED 若已有事物则复用，无则新建\n        - REQUIRED_NEW 若已有事物则挂起，无则新建\n        - SUPPORTS\n        - NOT_SUPPORTED\n        - MANDATORY\n    - ioslation：事务隔离级别\n        - 有三个读问题\n            - 脏读\n                - 一个未提交事务读取到另一个未提交事务的数据\n            - 不可重复读\n                - 一个未提交事务读取到另一提交事务修改数据\n            - 虚（幻）读\n                - 一个未提交事务读取到另一提交事务添加数据\n    - timeout：超时时间\n        - 事务需要在一定时间内进行提交，如果不提交进行回滚\n        - 默认值是 -1 ，设置时间以秒单位进行计算\n    - readOnly：是否只读\n        - 读：查询操作，写：添加修改删除操作\n        - readOnly 默认值 false，表示可以查询，可以添加修改删除操作\n        - 设置 readOnly 值是 true，设置成 true 之后，只能查询\n    - rollbackFor：回滚\n        - 设置出现哪些异常进行事务回滚\n    - noRollbackFor：不回滚\n        - 设置出现哪些异常不进行事务回滚\n        \n|                               | 脏读 | 不可重复度 | 幻读 |\n| :---------------------------- | :--: | :--------: | :--: |\n| READ UNCOMMITTED （读未提交） |  Y   |     Y      |  Y   |\n| READ COMMITTED （读已提交）   |  N   |     Y      |  Y   |\n| REPEATABLE READ （可重复度）  |  N   |     N      |  Y   |\n| SERIALIZABLE （串行化）       |  N   |     N      |  N   |\n\n\n\n#### XML 声明式事务管理\n- 在 spring 配置文件中进行配置\n    - 配置事务管理器\n    - 配置通知\n    - 配置切入点和切面\n\n#### 完全注解声明式事务管理\n1. 创建配置类，使用配置类替代 xml 配置文件 @Configuration\n2. 开启组建扫描 @ComponentScan\n3. 开启事物 @EnableTransactionManagement\n4. 创建数据库连接池\n5. 创建 JdbcTemplate 对象\n6. 创建事务管理器\n``` java\n@Configuration //配置类\n@ComponentScan(basePackages = \"com.zipee\") //组件扫描\n@EnableTransactionManagement //开启事务\npublic class TxConfig {\n    //创建数据库连接池\n    @Bean\n    public DruidDataSource getDruidDataSource() {\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        dataSource.setUrl(\"jdbc:mysql:///user_db\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"root\");\n        return dataSource;\n    }\n    //创建 JdbcTemplate 对象\n    @Bean\n    public JdbcTemplate getJdbcTemplate(DataSource dataSource) {\n        //到 ioc 容器中根据类型找到 dataSource\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        //注入 dataSource\n        jdbcTemplate.setDataSource(dataSource);\n        return jdbcTemplate;\n    }\n    //创建事务管理器\n    @Bean\n    public DataSourceTransactionManager\n        getDataSourceTransactionManager(DataSource dataSource) {\n        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();\n        transactionManager.setDataSource(dataSource);\n        return transactionManager;\n    }\n}\n```\n\n---\n\n### Spring5 新功能\n- 支持@Nullable 注解\n     - @Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空\n\n- 支持函数式风格\n- 整合 JUnit5 单元测试框架\n- 新增SpringWebflux ","source":"_posts/2020-10-26-spring5框架学习总结.md","raw":"---\ntitle: spring5框架学习总结\ndate: 2020-10-26 17:09:06\ntags: spring\ncategories: java\n---\n\n{%note info%}\n\njava后段必备技术栈\n\n{%endnote%}\n<!--more-->\n\n\n\n### Spring 框架概述\n\n- 轻量级开源 JavaEE 框架，为了解决企业复杂性，两个核心组成： IOC 和 AOP\n- 整体架构如下\n\n\n\n![20201022145213.jpg](https://i.loli.net/2020/10/22/JKBwDbgmORQLvFp.jpg)\n\n---\n\n### IOC 容器\n\n#### what\n\n1. 控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理\n2. 使用 IOC 目的：为了耦合度降低\n\n#### ioc原理\nxml 解析、工厂模式、反射\n\n#### ioc接口\n\n1. BeanFactory： IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用\n    - 加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象\n2. ApplicationContext： `BeanFactory 接口的子接口`，提供更多更强大的功能，一般由开发人员进行使用\n    - 加载配置文件时候就会把在配置文件对象进行创建\n\n#### Bean 管理\n\n- 基于 xml\n\n  - 创建对象\n          ``` \n          <bean id=\"user\" class=\"com.zipee.spring5.User\"></bean>\n          ```\n  - 注入属性\n      - DI：依赖注入，就是注入属性\n          - 手动注入（xml中指定）\n          - `自动注入`（自动装配）\n\n- 基于注解\n\n  - 创建对象\n\n      - 注解类型（以下四个注解功能是一样的，都可以用来创建 bean 实例）      \n        - @Component\n           - @Service\n        - @Controller\n           - @Repository\n\n      1. 引入依赖（spring-aop jar包）\n\n      2. 开启组件扫描\n\n            - 如果扫描多个包，多个包使用逗号隔开\n\n         - 扫描包上层目录\n\n               ``` java\n              <context:component-scan base-package=\"com.zipee\"></context:component-scan>\n               ```\n\n      3. 创建类，在类上面添加创建对象注解\n      4. 开启组件扫描细节配置（可以指定扫描过滤器）\n\n  - 注入属性\n\n       - @Autowired\n            - 根据属性类型进行自动装配\n       - @Qualifier\n            - 根据名称进行注入（需要和@Autowired 一起使用）\n       - @Resource（javax中定义，建议使用Autowired和Qualifier）\n            - 可以根据类型注入，可以根据名称注入\n       - @Value\n            - 注入普通类型属性\n\n   - 完全注解开发（springboot）\n\n     1. 完全注解开发\n                 ``` java\n             @Configuration //作为配置类，替代 xml 配置文件\n             @ComponentScan(basePackages = {\"com.zipee\"})\n             public class SpringConfig {\n             }\n                 ```\n\n     2. 通过配置类获取ioc容器\n                 ``` java\n             ApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class);\n                 ```\n\n### bean分类\n- 普通bean\n    \n    - 在配置文件中定义 bean 类型就是返回类型\n- 工厂bean（FactoryBean）\n    - 在配置文件定义 bean ==类型可以和返回类型不一样==\n    1. 创建类，让这个类作为工厂 bean，实现接口 FactoryBean\n    2. 实现接口里面的方法，在实现的方法中定义返回的 bean 类型\n    \n### bean作用域\n1. 在 Spring 里面，设置创建 bean 实例是单实例还是多实例\n2. 在 Spring 里面，默认情况下， bean 是单实例对象\n3. scope 属性值\n    - singleton\n        - 加载 spring 配置文件时候就会创建单实例对象\n    - prototype\n        - 在调用getBean 方法时候创建多实例对象\n\n### bean 生命周期\n1. 通过构造器创建 bean 实例（无参数构造）\n2. 为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）\n3. 把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization\n4. 调用 bean 的初始化的方法（需要进行配置初始化的方法）\n5. 把 bean 实例传递 bean 后置处理器的方法 ostProcessAfterInitialization\n6. bean 可以使用了（对象获取到了）\n7. 当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）\n\n- 使用后置处理器\n    1. 创建类，实现接口 BeanPostProcessor，创建后置处理器 \n    2. 后置处理器对所有的bean都会生效\n\n---\n\n### Aop\n\n#### 实现原理\n\n1. 有接口情况，使用 JDK 动态代理\n    - 创建接口实现类代理对象，增强类的方法\n    - 实际使用Proxy动态创建代理对象\n2. 没有接口情况，使用 CGLIB 动态代理\n    - 创建子类的代理对象，增强类的方法\n\n#### 术语\n\n1. 连接点\n    \n    - 类里面可以被增强的方法\n2. 切入点\n    - 实际被真正增强的方法\n    - 使用\n        - 语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )（返回类型一般可省略为空格）\n        - 对 com.atguigu.dao.BookDao 类里面的 add 进行增强\n            ``` \n            execution(* com.zipee.dao.BookDao.add(..))\n            ```\n        - 对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强\n            ``` \n            execution(* com.zipee.dao.BookDao.*(..))\n            ```\n        - 对 com.atguigu.dao包里面所有类，类里面所有方法进行增强\n            ``` \n            execution(* com.zipee.dao.*.*(..))\n            ```\n    \n3. 通知（增强）\n    - 实际增强的逻辑\n    - 通知种类\n        - 前置通知\n        - 后置通知\n        - 环绕通知\n        - 异常通知\n        - 最终通知\n4. 切面\n    \n    - 把通知应用到切入点的过程\n\n#### AspectJ\n\n- AspectJ为独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作\n- 使用\n    - 基于 xml 配置文件实现\n    - 基于注解方式实现\n\n#### aop使用步骤\n\n1. 创建类，在类里面定义方法\n2. 创建增强类（编写增强逻辑）\n    - 在增强类上面添加注解 @Aspect\n    - 在增强类的里面，在作为通知方法上面添加通知类型注解（@Before，@After...），使用切入点表达式配置\n3. 进行通知的配置\n    - 开启注解扫描 @ComponentScan(basePackages = {\"com.zipee\"})\n    - 在 spring 配置文件中开启生成代理对象 @EnableAspectJAutoProxy(proxyTargetClass = true)\n4. 相同的切入点抽取 @Pointcut\n5. 有多个增强类多同一个方法进行增强，设置增强类优先级 @Order，数字类型值越小优先级越高\n\n---\n\n### 事务管理\n\n#### 注解声明式事务管理\n1. 在 spring 配置文件配置事务管理器\n    ``` java\n    <!--创建事务管理器-->\n    <bean id=\"transactionManager\"\n    class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <!--注入数据源-->\n    <property name=\"dataSource\" ref=\"dataSource\"></property>\n    </bean>\n    ```\n2. 在 spring 配置文件，开启事务注解\n    - 在 spring 配置文件引入名称空间 tx\n    - 开启事务注解\n    - 在 service 类上面（ 或者 service 类里面方法上面）添加事务注解(@Transactional)\n3. 参数配置说明\n    - propagation：事务传播行为\n        - REQUIRED 若已有事物则复用，无则新建\n        - REQUIRED_NEW 若已有事物则挂起，无则新建\n        - SUPPORTS\n        - NOT_SUPPORTED\n        - MANDATORY\n    - ioslation：事务隔离级别\n        - 有三个读问题\n            - 脏读\n                - 一个未提交事务读取到另一个未提交事务的数据\n            - 不可重复读\n                - 一个未提交事务读取到另一提交事务修改数据\n            - 虚（幻）读\n                - 一个未提交事务读取到另一提交事务添加数据\n    - timeout：超时时间\n        - 事务需要在一定时间内进行提交，如果不提交进行回滚\n        - 默认值是 -1 ，设置时间以秒单位进行计算\n    - readOnly：是否只读\n        - 读：查询操作，写：添加修改删除操作\n        - readOnly 默认值 false，表示可以查询，可以添加修改删除操作\n        - 设置 readOnly 值是 true，设置成 true 之后，只能查询\n    - rollbackFor：回滚\n        - 设置出现哪些异常进行事务回滚\n    - noRollbackFor：不回滚\n        - 设置出现哪些异常不进行事务回滚\n        \n|                               | 脏读 | 不可重复度 | 幻读 |\n| :---------------------------- | :--: | :--------: | :--: |\n| READ UNCOMMITTED （读未提交） |  Y   |     Y      |  Y   |\n| READ COMMITTED （读已提交）   |  N   |     Y      |  Y   |\n| REPEATABLE READ （可重复度）  |  N   |     N      |  Y   |\n| SERIALIZABLE （串行化）       |  N   |     N      |  N   |\n\n\n\n#### XML 声明式事务管理\n- 在 spring 配置文件中进行配置\n    - 配置事务管理器\n    - 配置通知\n    - 配置切入点和切面\n\n#### 完全注解声明式事务管理\n1. 创建配置类，使用配置类替代 xml 配置文件 @Configuration\n2. 开启组建扫描 @ComponentScan\n3. 开启事物 @EnableTransactionManagement\n4. 创建数据库连接池\n5. 创建 JdbcTemplate 对象\n6. 创建事务管理器\n``` java\n@Configuration //配置类\n@ComponentScan(basePackages = \"com.zipee\") //组件扫描\n@EnableTransactionManagement //开启事务\npublic class TxConfig {\n    //创建数据库连接池\n    @Bean\n    public DruidDataSource getDruidDataSource() {\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        dataSource.setUrl(\"jdbc:mysql:///user_db\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"root\");\n        return dataSource;\n    }\n    //创建 JdbcTemplate 对象\n    @Bean\n    public JdbcTemplate getJdbcTemplate(DataSource dataSource) {\n        //到 ioc 容器中根据类型找到 dataSource\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        //注入 dataSource\n        jdbcTemplate.setDataSource(dataSource);\n        return jdbcTemplate;\n    }\n    //创建事务管理器\n    @Bean\n    public DataSourceTransactionManager\n        getDataSourceTransactionManager(DataSource dataSource) {\n        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();\n        transactionManager.setDataSource(dataSource);\n        return transactionManager;\n    }\n}\n```\n\n---\n\n### Spring5 新功能\n- 支持@Nullable 注解\n     - @Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空\n\n- 支持函数式风格\n- 整合 JUnit5 单元测试框架\n- 新增SpringWebflux ","slug":"spring5框架学习总结","published":1,"updated":"2020-10-26T12:56:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhqa6vzd003n16p7lrmyonrz","content":"<div class=\"note info\"><p>java后段必备技术栈</p></div>\n<a id=\"more\"></a>\n<h3 id=\"Spring-框架概述\"><a href=\"#Spring-框架概述\" class=\"headerlink\" title=\"Spring 框架概述\"></a>Spring 框架概述</h3><ul>\n<li>轻量级开源 JavaEE 框架，为了解决企业复杂性，两个核心组成： IOC 和 AOP</li>\n<li>整体架构如下</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/10/22/JKBwDbgmORQLvFp.jpg\" alt=\"20201022145213.jpg\"></p>\n<hr>\n<h3 id=\"IOC-容器\"><a href=\"#IOC-容器\" class=\"headerlink\" title=\"IOC 容器\"></a>IOC 容器</h3><h4 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h4><ol>\n<li>控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理</li>\n<li>使用 IOC 目的：为了耦合度降低</li>\n</ol>\n<h4 id=\"ioc原理\"><a href=\"#ioc原理\" class=\"headerlink\" title=\"ioc原理\"></a>ioc原理</h4><p>xml 解析、工厂模式、反射</p>\n<h4 id=\"ioc接口\"><a href=\"#ioc接口\" class=\"headerlink\" title=\"ioc接口\"></a>ioc接口</h4><ol>\n<li>BeanFactory： IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用<ul>\n<li>加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</li>\n</ul>\n</li>\n<li>ApplicationContext： <code>BeanFactory 接口的子接口</code>，提供更多更强大的功能，一般由开发人员进行使用<ul>\n<li>加载配置文件时候就会把在配置文件对象进行创建</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Bean-管理\"><a href=\"#Bean-管理\" class=\"headerlink\" title=\"Bean 管理\"></a>Bean 管理</h4><ul>\n<li><p>基于 xml</p>\n<ul>\n<li><p>创建对象</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;user&quot; class=&quot;com.zipee.spring5.User&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>注入属性</p>\n<ul>\n<li>DI：依赖注入，就是注入属性<ul>\n<li>手动注入（xml中指定）</li>\n<li><code>自动注入</code>（自动装配）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于注解</p>\n<ul>\n<li><p>创建对象</p>\n<ul>\n<li>注解类型（以下四个注解功能是一样的，都可以用来创建 bean 实例）      <ul>\n<li>@Component<ul>\n<li>@Service</li>\n</ul>\n</li>\n<li>@Controller<ul>\n<li>@Repository</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>引入依赖（spring-aop jar包）</p>\n</li>\n<li><p>开启组件扫描</p>\n<ul>\n<li>如果扫描多个包，多个包使用逗号隔开</li>\n</ul>\n<ul>\n<li><p>扫描包上层目录</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:component-scan base-package=\"com.zipee\"&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n<li><p>创建类，在类上面添加创建对象注解</p>\n</li>\n<li>开启组件扫描细节配置（可以指定扫描过滤器）</li>\n</ol>\n</li>\n<li><p>注入属性</p>\n<ul>\n<li>@Autowired<ul>\n<li>根据属性类型进行自动装配</li>\n</ul>\n</li>\n<li>@Qualifier<ul>\n<li>根据名称进行注入（需要和@Autowired 一起使用）</li>\n</ul>\n</li>\n<li>@Resource（javax中定义，建议使用Autowired和Qualifier）<ul>\n<li>可以根据类型注入，可以根据名称注入</li>\n</ul>\n</li>\n<li>@Value<ul>\n<li>注入普通类型属性</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>完全注解开发（springboot）</p>\n<ol>\n<li><p>完全注解开发</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//作为配置类，替代 xml 配置文件</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123;<span class=\"string\">\"com.zipee\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>通过配置类获取ioc容器</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"bean分类\"><a href=\"#bean分类\" class=\"headerlink\" title=\"bean分类\"></a>bean分类</h3><ul>\n<li><p>普通bean</p>\n<ul>\n<li>在配置文件中定义 bean 类型就是返回类型</li>\n</ul>\n</li>\n<li>工厂bean（FactoryBean）<ul>\n<li>在配置文件定义 bean ==类型可以和返回类型不一样==</li>\n</ul>\n<ol>\n<li>创建类，让这个类作为工厂 bean，实现接口 FactoryBean</li>\n<li>实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"bean作用域\"><a href=\"#bean作用域\" class=\"headerlink\" title=\"bean作用域\"></a>bean作用域</h3><ol>\n<li>在 Spring 里面，设置创建 bean 实例是单实例还是多实例</li>\n<li>在 Spring 里面，默认情况下， bean 是单实例对象</li>\n<li>scope 属性值<ul>\n<li>singleton<ul>\n<li>加载 spring 配置文件时候就会创建单实例对象</li>\n</ul>\n</li>\n<li>prototype<ul>\n<li>在调用getBean 方法时候创建多实例对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"bean-生命周期\"><a href=\"#bean-生命周期\" class=\"headerlink\" title=\"bean 生命周期\"></a>bean 生命周期</h3><ol>\n<li>通过构造器创建 bean 实例（无参数构造）</li>\n<li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li>\n<li>把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</li>\n<li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li>\n<li>把 bean 实例传递 bean 后置处理器的方法 ostProcessAfterInitialization</li>\n<li>bean 可以使用了（对象获取到了）</li>\n<li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li>\n</ol>\n<ul>\n<li>使用后置处理器<ol>\n<li>创建类，实现接口 BeanPostProcessor，创建后置处理器 </li>\n<li>后置处理器对所有的bean都会生效</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"Aop\"><a href=\"#Aop\" class=\"headerlink\" title=\"Aop\"></a>Aop</h3><h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><ol>\n<li>有接口情况，使用 JDK 动态代理<ul>\n<li>创建接口实现类代理对象，增强类的方法</li>\n<li>实际使用Proxy动态创建代理对象</li>\n</ul>\n</li>\n<li>没有接口情况，使用 CGLIB 动态代理<ul>\n<li>创建子类的代理对象，增强类的方法</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h4><ol>\n<li><p>连接点</p>\n<ul>\n<li>类里面可以被增强的方法</li>\n</ul>\n</li>\n<li><p>切入点</p>\n<ul>\n<li>实际被真正增强的方法</li>\n<li><p>使用</p>\n<ul>\n<li>语法结构： execution([权限修饰符] [返回类型] [类全路径] <a href=\"[参数列表]\">方法名称</a> )（返回类型一般可省略为空格）</li>\n<li><p>对 com.atguigu.dao.BookDao 类里面的 add 进行增强</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.zipee.dao.BookDao.add(..))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.zipee.dao.BookDao.*(..))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对 com.atguigu.dao包里面所有类，类里面所有方法进行增强</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.zipee.dao.*.*(..))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>通知（增强）<ul>\n<li>实际增强的逻辑</li>\n<li>通知种类<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>环绕通知</li>\n<li>异常通知</li>\n<li>最终通知</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>切面</p>\n<ul>\n<li>把通知应用到切入点的过程</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"AspectJ\"><a href=\"#AspectJ\" class=\"headerlink\" title=\"AspectJ\"></a>AspectJ</h4><ul>\n<li>AspectJ为独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</li>\n<li>使用<ul>\n<li>基于 xml 配置文件实现</li>\n<li>基于注解方式实现</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"aop使用步骤\"><a href=\"#aop使用步骤\" class=\"headerlink\" title=\"aop使用步骤\"></a>aop使用步骤</h4><ol>\n<li>创建类，在类里面定义方法</li>\n<li>创建增强类（编写增强逻辑）<ul>\n<li>在增强类上面添加注解 @Aspect</li>\n<li>在增强类的里面，在作为通知方法上面添加通知类型注解（@Before，@After…），使用切入点表达式配置</li>\n</ul>\n</li>\n<li>进行通知的配置<ul>\n<li>开启注解扫描 @ComponentScan(basePackages = {“com.zipee”})</li>\n<li>在 spring 配置文件中开启生成代理对象 @EnableAspectJAutoProxy(proxyTargetClass = true)</li>\n</ul>\n</li>\n<li>相同的切入点抽取 @Pointcut</li>\n<li>有多个增强类多同一个方法进行增强，设置增强类优先级 @Order，数字类型值越小优先级越高</li>\n</ol>\n<hr>\n<h3 id=\"事务管理\"><a href=\"#事务管理\" class=\"headerlink\" title=\"事务管理\"></a>事务管理</h3><h4 id=\"注解声明式事务管理\"><a href=\"#注解声明式事务管理\" class=\"headerlink\" title=\"注解声明式事务管理\"></a>注解声明式事务管理</h4><ol>\n<li><p>在 spring 配置文件配置事务管理器</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--创建事务管理器--&gt;</span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"transactionManager\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span><br><span class=\"line\">&lt;!--注入数据源--&gt;</span><br><span class=\"line\">&lt;property name=\"dataSource\" ref=\"dataSource\"&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 spring 配置文件，开启事务注解</p>\n<ul>\n<li>在 spring 配置文件引入名称空间 tx</li>\n<li>开启事务注解</li>\n<li>在 service 类上面（ 或者 service 类里面方法上面）添加事务注解(@Transactional)</li>\n</ul>\n</li>\n<li>参数配置说明<ul>\n<li>propagation：事务传播行为<ul>\n<li>REQUIRED 若已有事物则复用，无则新建</li>\n<li>REQUIRED_NEW 若已有事物则挂起，无则新建</li>\n<li>SUPPORTS</li>\n<li>NOT_SUPPORTED</li>\n<li>MANDATORY</li>\n</ul>\n</li>\n<li>ioslation：事务隔离级别<ul>\n<li>有三个读问题<ul>\n<li>脏读<ul>\n<li>一个未提交事务读取到另一个未提交事务的数据</li>\n</ul>\n</li>\n<li>不可重复读<ul>\n<li>一个未提交事务读取到另一提交事务修改数据</li>\n</ul>\n</li>\n<li>虚（幻）读<ul>\n<li>一个未提交事务读取到另一提交事务添加数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>timeout：超时时间<ul>\n<li>事务需要在一定时间内进行提交，如果不提交进行回滚</li>\n<li>默认值是 -1 ，设置时间以秒单位进行计算</li>\n</ul>\n</li>\n<li>readOnly：是否只读<ul>\n<li>读：查询操作，写：添加修改删除操作</li>\n<li>readOnly 默认值 false，表示可以查询，可以添加修改删除操作</li>\n<li>设置 readOnly 值是 true，设置成 true 之后，只能查询</li>\n</ul>\n</li>\n<li>rollbackFor：回滚<ul>\n<li>设置出现哪些异常进行事务回滚</li>\n</ul>\n</li>\n<li>noRollbackFor：不回滚<ul>\n<li>设置出现哪些异常不进行事务回滚</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复度</th>\n<th style=\"text-align:center\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">READ UNCOMMITTED （读未提交）</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">READ COMMITTED （读已提交）</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REPEATABLE READ （可重复度）</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SERIALIZABLE （串行化）</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">N</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"XML-声明式事务管理\"><a href=\"#XML-声明式事务管理\" class=\"headerlink\" title=\"XML 声明式事务管理\"></a>XML 声明式事务管理</h4><ul>\n<li>在 spring 配置文件中进行配置<ul>\n<li>配置事务管理器</li>\n<li>配置通知</li>\n<li>配置切入点和切面</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"完全注解声明式事务管理\"><a href=\"#完全注解声明式事务管理\" class=\"headerlink\" title=\"完全注解声明式事务管理\"></a>完全注解声明式事务管理</h4><ol>\n<li>创建配置类，使用配置类替代 xml 配置文件 @Configuration</li>\n<li>开启组建扫描 @ComponentScan</li>\n<li>开启事物 @EnableTransactionManagement</li>\n<li>创建数据库连接池</li>\n<li>创建 JdbcTemplate 对象</li>\n<li>创建事务管理器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//配置类</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = <span class=\"string\">\"com.zipee\"</span>) <span class=\"comment\">//组件扫描</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span> <span class=\"comment\">//开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TxConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建数据库连接池</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DruidDataSource <span class=\"title\">getDruidDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource dataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        dataSource.setDriverClassName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</span><br><span class=\"line\">        dataSource.setUrl(<span class=\"string\">\"jdbc:mysql:///user_db\"</span>);</span><br><span class=\"line\">        dataSource.setUsername(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        dataSource.setPassword(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建 JdbcTemplate 对象</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">getJdbcTemplate</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//到 ioc 容器中根据类型找到 dataSource</span></span><br><span class=\"line\">        JdbcTemplate jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate();</span><br><span class=\"line\">        <span class=\"comment\">//注入 dataSource</span></span><br><span class=\"line\">        jdbcTemplate.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建事务管理器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSourceTransactionManager</span><br><span class=\"line\">        getDataSourceTransactionManager(DataSource dataSource) &#123;</span><br><span class=\"line\">        DataSourceTransactionManager transactionManager = <span class=\"keyword\">new</span> DataSourceTransactionManager();</span><br><span class=\"line\">        transactionManager.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transactionManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"Spring5-新功能\"><a href=\"#Spring5-新功能\" class=\"headerlink\" title=\"Spring5 新功能\"></a>Spring5 新功能</h3><ul>\n<li><p>支持@Nullable 注解</p>\n<ul>\n<li>@Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</li>\n</ul>\n</li>\n<li><p>支持函数式风格</p>\n</li>\n<li>整合 JUnit5 单元测试框架</li>\n<li>新增SpringWebflux </li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>java后段必备技术栈</p></div>","more":"<h3 id=\"Spring-框架概述\"><a href=\"#Spring-框架概述\" class=\"headerlink\" title=\"Spring 框架概述\"></a>Spring 框架概述</h3><ul>\n<li>轻量级开源 JavaEE 框架，为了解决企业复杂性，两个核心组成： IOC 和 AOP</li>\n<li>整体架构如下</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/10/22/JKBwDbgmORQLvFp.jpg\" alt=\"20201022145213.jpg\"></p>\n<hr>\n<h3 id=\"IOC-容器\"><a href=\"#IOC-容器\" class=\"headerlink\" title=\"IOC 容器\"></a>IOC 容器</h3><h4 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h4><ol>\n<li>控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理</li>\n<li>使用 IOC 目的：为了耦合度降低</li>\n</ol>\n<h4 id=\"ioc原理\"><a href=\"#ioc原理\" class=\"headerlink\" title=\"ioc原理\"></a>ioc原理</h4><p>xml 解析、工厂模式、反射</p>\n<h4 id=\"ioc接口\"><a href=\"#ioc接口\" class=\"headerlink\" title=\"ioc接口\"></a>ioc接口</h4><ol>\n<li>BeanFactory： IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用<ul>\n<li>加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</li>\n</ul>\n</li>\n<li>ApplicationContext： <code>BeanFactory 接口的子接口</code>，提供更多更强大的功能，一般由开发人员进行使用<ul>\n<li>加载配置文件时候就会把在配置文件对象进行创建</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Bean-管理\"><a href=\"#Bean-管理\" class=\"headerlink\" title=\"Bean 管理\"></a>Bean 管理</h4><ul>\n<li><p>基于 xml</p>\n<ul>\n<li><p>创建对象</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;user&quot; class=&quot;com.zipee.spring5.User&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>注入属性</p>\n<ul>\n<li>DI：依赖注入，就是注入属性<ul>\n<li>手动注入（xml中指定）</li>\n<li><code>自动注入</code>（自动装配）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于注解</p>\n<ul>\n<li><p>创建对象</p>\n<ul>\n<li>注解类型（以下四个注解功能是一样的，都可以用来创建 bean 实例）      <ul>\n<li>@Component<ul>\n<li>@Service</li>\n</ul>\n</li>\n<li>@Controller<ul>\n<li>@Repository</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>引入依赖（spring-aop jar包）</p>\n</li>\n<li><p>开启组件扫描</p>\n<ul>\n<li>如果扫描多个包，多个包使用逗号隔开</li>\n</ul>\n<ul>\n<li><p>扫描包上层目录</p>\n<pre><code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:component-scan base-package=\"com.zipee\"&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n<li><p>创建类，在类上面添加创建对象注解</p>\n</li>\n<li>开启组件扫描细节配置（可以指定扫描过滤器）</li>\n</ol>\n</li>\n<li><p>注入属性</p>\n<ul>\n<li>@Autowired<ul>\n<li>根据属性类型进行自动装配</li>\n</ul>\n</li>\n<li>@Qualifier<ul>\n<li>根据名称进行注入（需要和@Autowired 一起使用）</li>\n</ul>\n</li>\n<li>@Resource（javax中定义，建议使用Autowired和Qualifier）<ul>\n<li>可以根据类型注入，可以根据名称注入</li>\n</ul>\n</li>\n<li>@Value<ul>\n<li>注入普通类型属性</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>完全注解开发（springboot）</p>\n<ol>\n<li><p>完全注解开发</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//作为配置类，替代 xml 配置文件</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123;<span class=\"string\">\"com.zipee\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>通过配置类获取ioc容器</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"bean分类\"><a href=\"#bean分类\" class=\"headerlink\" title=\"bean分类\"></a>bean分类</h3><ul>\n<li><p>普通bean</p>\n<ul>\n<li>在配置文件中定义 bean 类型就是返回类型</li>\n</ul>\n</li>\n<li>工厂bean（FactoryBean）<ul>\n<li>在配置文件定义 bean ==类型可以和返回类型不一样==</li>\n</ul>\n<ol>\n<li>创建类，让这个类作为工厂 bean，实现接口 FactoryBean</li>\n<li>实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"bean作用域\"><a href=\"#bean作用域\" class=\"headerlink\" title=\"bean作用域\"></a>bean作用域</h3><ol>\n<li>在 Spring 里面，设置创建 bean 实例是单实例还是多实例</li>\n<li>在 Spring 里面，默认情况下， bean 是单实例对象</li>\n<li>scope 属性值<ul>\n<li>singleton<ul>\n<li>加载 spring 配置文件时候就会创建单实例对象</li>\n</ul>\n</li>\n<li>prototype<ul>\n<li>在调用getBean 方法时候创建多实例对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"bean-生命周期\"><a href=\"#bean-生命周期\" class=\"headerlink\" title=\"bean 生命周期\"></a>bean 生命周期</h3><ol>\n<li>通过构造器创建 bean 实例（无参数构造）</li>\n<li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li>\n<li>把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</li>\n<li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li>\n<li>把 bean 实例传递 bean 后置处理器的方法 ostProcessAfterInitialization</li>\n<li>bean 可以使用了（对象获取到了）</li>\n<li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li>\n</ol>\n<ul>\n<li>使用后置处理器<ol>\n<li>创建类，实现接口 BeanPostProcessor，创建后置处理器 </li>\n<li>后置处理器对所有的bean都会生效</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"Aop\"><a href=\"#Aop\" class=\"headerlink\" title=\"Aop\"></a>Aop</h3><h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><ol>\n<li>有接口情况，使用 JDK 动态代理<ul>\n<li>创建接口实现类代理对象，增强类的方法</li>\n<li>实际使用Proxy动态创建代理对象</li>\n</ul>\n</li>\n<li>没有接口情况，使用 CGLIB 动态代理<ul>\n<li>创建子类的代理对象，增强类的方法</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h4><ol>\n<li><p>连接点</p>\n<ul>\n<li>类里面可以被增强的方法</li>\n</ul>\n</li>\n<li><p>切入点</p>\n<ul>\n<li>实际被真正增强的方法</li>\n<li><p>使用</p>\n<ul>\n<li>语法结构： execution([权限修饰符] [返回类型] [类全路径] <a href=\"[参数列表]\">方法名称</a> )（返回类型一般可省略为空格）</li>\n<li><p>对 com.atguigu.dao.BookDao 类里面的 add 进行增强</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.zipee.dao.BookDao.add(..))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.zipee.dao.BookDao.*(..))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对 com.atguigu.dao包里面所有类，类里面所有方法进行增强</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.zipee.dao.*.*(..))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>通知（增强）<ul>\n<li>实际增强的逻辑</li>\n<li>通知种类<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>环绕通知</li>\n<li>异常通知</li>\n<li>最终通知</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>切面</p>\n<ul>\n<li>把通知应用到切入点的过程</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"AspectJ\"><a href=\"#AspectJ\" class=\"headerlink\" title=\"AspectJ\"></a>AspectJ</h4><ul>\n<li>AspectJ为独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</li>\n<li>使用<ul>\n<li>基于 xml 配置文件实现</li>\n<li>基于注解方式实现</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"aop使用步骤\"><a href=\"#aop使用步骤\" class=\"headerlink\" title=\"aop使用步骤\"></a>aop使用步骤</h4><ol>\n<li>创建类，在类里面定义方法</li>\n<li>创建增强类（编写增强逻辑）<ul>\n<li>在增强类上面添加注解 @Aspect</li>\n<li>在增强类的里面，在作为通知方法上面添加通知类型注解（@Before，@After…），使用切入点表达式配置</li>\n</ul>\n</li>\n<li>进行通知的配置<ul>\n<li>开启注解扫描 @ComponentScan(basePackages = {“com.zipee”})</li>\n<li>在 spring 配置文件中开启生成代理对象 @EnableAspectJAutoProxy(proxyTargetClass = true)</li>\n</ul>\n</li>\n<li>相同的切入点抽取 @Pointcut</li>\n<li>有多个增强类多同一个方法进行增强，设置增强类优先级 @Order，数字类型值越小优先级越高</li>\n</ol>\n<hr>\n<h3 id=\"事务管理\"><a href=\"#事务管理\" class=\"headerlink\" title=\"事务管理\"></a>事务管理</h3><h4 id=\"注解声明式事务管理\"><a href=\"#注解声明式事务管理\" class=\"headerlink\" title=\"注解声明式事务管理\"></a>注解声明式事务管理</h4><ol>\n<li><p>在 spring 配置文件配置事务管理器</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--创建事务管理器--&gt;</span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"transactionManager\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span><br><span class=\"line\">&lt;!--注入数据源--&gt;</span><br><span class=\"line\">&lt;property name=\"dataSource\" ref=\"dataSource\"&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 spring 配置文件，开启事务注解</p>\n<ul>\n<li>在 spring 配置文件引入名称空间 tx</li>\n<li>开启事务注解</li>\n<li>在 service 类上面（ 或者 service 类里面方法上面）添加事务注解(@Transactional)</li>\n</ul>\n</li>\n<li>参数配置说明<ul>\n<li>propagation：事务传播行为<ul>\n<li>REQUIRED 若已有事物则复用，无则新建</li>\n<li>REQUIRED_NEW 若已有事物则挂起，无则新建</li>\n<li>SUPPORTS</li>\n<li>NOT_SUPPORTED</li>\n<li>MANDATORY</li>\n</ul>\n</li>\n<li>ioslation：事务隔离级别<ul>\n<li>有三个读问题<ul>\n<li>脏读<ul>\n<li>一个未提交事务读取到另一个未提交事务的数据</li>\n</ul>\n</li>\n<li>不可重复读<ul>\n<li>一个未提交事务读取到另一提交事务修改数据</li>\n</ul>\n</li>\n<li>虚（幻）读<ul>\n<li>一个未提交事务读取到另一提交事务添加数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>timeout：超时时间<ul>\n<li>事务需要在一定时间内进行提交，如果不提交进行回滚</li>\n<li>默认值是 -1 ，设置时间以秒单位进行计算</li>\n</ul>\n</li>\n<li>readOnly：是否只读<ul>\n<li>读：查询操作，写：添加修改删除操作</li>\n<li>readOnly 默认值 false，表示可以查询，可以添加修改删除操作</li>\n<li>设置 readOnly 值是 true，设置成 true 之后，只能查询</li>\n</ul>\n</li>\n<li>rollbackFor：回滚<ul>\n<li>设置出现哪些异常进行事务回滚</li>\n</ul>\n</li>\n<li>noRollbackFor：不回滚<ul>\n<li>设置出现哪些异常不进行事务回滚</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复度</th>\n<th style=\"text-align:center\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">READ UNCOMMITTED （读未提交）</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">READ COMMITTED （读已提交）</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REPEATABLE READ （可重复度）</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SERIALIZABLE （串行化）</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">N</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"XML-声明式事务管理\"><a href=\"#XML-声明式事务管理\" class=\"headerlink\" title=\"XML 声明式事务管理\"></a>XML 声明式事务管理</h4><ul>\n<li>在 spring 配置文件中进行配置<ul>\n<li>配置事务管理器</li>\n<li>配置通知</li>\n<li>配置切入点和切面</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"完全注解声明式事务管理\"><a href=\"#完全注解声明式事务管理\" class=\"headerlink\" title=\"完全注解声明式事务管理\"></a>完全注解声明式事务管理</h4><ol>\n<li>创建配置类，使用配置类替代 xml 配置文件 @Configuration</li>\n<li>开启组建扫描 @ComponentScan</li>\n<li>开启事物 @EnableTransactionManagement</li>\n<li>创建数据库连接池</li>\n<li>创建 JdbcTemplate 对象</li>\n<li>创建事务管理器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//配置类</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = <span class=\"string\">\"com.zipee\"</span>) <span class=\"comment\">//组件扫描</span></span><br><span class=\"line\"><span class=\"meta\">@EnableTransactionManagement</span> <span class=\"comment\">//开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TxConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建数据库连接池</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DruidDataSource <span class=\"title\">getDruidDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource dataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        dataSource.setDriverClassName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</span><br><span class=\"line\">        dataSource.setUrl(<span class=\"string\">\"jdbc:mysql:///user_db\"</span>);</span><br><span class=\"line\">        dataSource.setUsername(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        dataSource.setPassword(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建 JdbcTemplate 对象</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">getJdbcTemplate</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//到 ioc 容器中根据类型找到 dataSource</span></span><br><span class=\"line\">        JdbcTemplate jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate();</span><br><span class=\"line\">        <span class=\"comment\">//注入 dataSource</span></span><br><span class=\"line\">        jdbcTemplate.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建事务管理器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSourceTransactionManager</span><br><span class=\"line\">        getDataSourceTransactionManager(DataSource dataSource) &#123;</span><br><span class=\"line\">        DataSourceTransactionManager transactionManager = <span class=\"keyword\">new</span> DataSourceTransactionManager();</span><br><span class=\"line\">        transactionManager.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transactionManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"Spring5-新功能\"><a href=\"#Spring5-新功能\" class=\"headerlink\" title=\"Spring5 新功能\"></a>Spring5 新功能</h3><ul>\n<li><p>支持@Nullable 注解</p>\n<ul>\n<li>@Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</li>\n</ul>\n</li>\n<li><p>支持函数式风格</p>\n</li>\n<li>整合 JUnit5 单元测试框架</li>\n<li>新增SpringWebflux </li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhqa6uyp000216p7bbyjuykc","category_id":"ckhqa6uzd000416p70gzkn3bv","_id":"ckhqa6v0j000916p7fiy9efrp"},{"post_id":"ckhqa6uz7000316p7xujqv6y3","category_id":"ckhqa6v08000616p7h0v3d7i2","_id":"ckhqa6v0l000b16p7w2bjsek0"},{"post_id":"ckhqa6v1r000e16p71cqryryg","category_id":"ckhqa6v2f000i16p7xyrjkahq","_id":"ckhqa6v4r000r16p7pgtprc7x"},{"post_id":"ckhqa6v26000g16p7foddjk5r","category_id":"ckhqa6v3n000n16p74c3pa1h4","_id":"ckhqa6v5m000y16p72clo8j2f"},{"post_id":"ckhqa6v51000v16p720l061qk","category_id":"ckhqa6v2f000i16p7xyrjkahq","_id":"ckhqa6v6c001416p7dlf2slv2"},{"post_id":"ckhqa6v33000l16p72vtz83un","category_id":"ckhqa6v4s000s16p78iteozjk","_id":"ckhqa6v6q001816p72tr7bwwd"},{"post_id":"ckhqa6v3k000m16p7nlp2pud0","category_id":"ckhqa6v3n000n16p74c3pa1h4","_id":"ckhqa6v73001a16p7ln1u0cwj"},{"post_id":"ckhqa6v6m001716p763vcugjd","category_id":"ckhqa6uzd000416p70gzkn3bv","_id":"ckhqa6v7n001g16p7f76iycud"},{"post_id":"ckhqa6v4j000q16p7o9s4gd3i","category_id":"ckhqa6v6e001516p7fpzv8zl4","_id":"ckhqa6v7z001k16p79ms9v5qf"},{"post_id":"ckhqa6v76001d16p7yhsg7xyq","category_id":"ckhqa6uzd000416p70gzkn3bv","_id":"ckhqa6v85001o16p79zk7grzx"},{"post_id":"ckhqa6v5d000x16p7svj2cqho","category_id":"ckhqa6v73001b16p7qefxq35b","_id":"ckhqa6v8b001q16p76y3xc2c9"},{"post_id":"ckhqa6v5s001216p7qky7jgmi","category_id":"ckhqa6v80001l16p7gdp3hk3k","_id":"ckhqa6v8o001x16p7qr5uq1ga"},{"post_id":"ckhqa6v7b001f16p7np8lz2k5","category_id":"ckhqa6v8c001s16p7c0bv8d3l","_id":"ckhqa6v9b002316p77suhlm30"},{"post_id":"ckhqa6v7r001j16p7s6zf20np","category_id":"ckhqa6v8p001z16p778e5kf80","_id":"ckhqa6v9d002716p7ph1dwjxj"},{"post_id":"ckhqa6v82001n16p7y2xkuyay","category_id":"ckhqa6v9c002516p7pea97psm","_id":"ckhqa6v9f002c16p72k8dai6e"},{"post_id":"ckhqa6v88001p16p7kabqppvj","category_id":"ckhqa6v9e002816p7akkpgw55","_id":"ckhqa6v9i002i16p7xvhzc2n7"},{"post_id":"ckhqa6v8f001u16p78cckp6ot","category_id":"ckhqa6v9e002816p7akkpgw55","_id":"ckhqa6v9j002j16p74s4pgwxj"},{"post_id":"ckhqa6v8l001w16p7cn6nw77a","category_id":"ckhqa6v9i002h16p7z326sjnt","_id":"ckhqa6v9m002o16p71zanb2mc"},{"post_id":"ckhqa6v8v002116p7f17cxmz5","category_id":"ckhqa6v9i002h16p7z326sjnt","_id":"ckhqa6v9p002r16p7oe0qf7vc"},{"post_id":"ckhqa6vzd003n16p7lrmyonrz","category_id":"ckhqa6v9i002h16p7z326sjnt","_id":"ckhqa6vzk003q16p7xkmgte99"},{"post_id":"ckhqa6vz8003m16p7hed4e8b0","category_id":"ckhqa6vzf003o16p7hfmru2fr","_id":"ckhqa6vzo003t16p7q1a5ojf3"}],"PostTag":[{"post_id":"ckhqa6uyp000216p7bbyjuykc","tag_id":"ckhqa6v03000516p71i251y1o","_id":"ckhqa6v0e000816p7mw0bqgid"},{"post_id":"ckhqa6uz7000316p7xujqv6y3","tag_id":"ckhqa6v0b000716p76tic75xp","_id":"ckhqa6v0n000c16p7shk3can4"},{"post_id":"ckhqa6uz7000316p7xujqv6y3","tag_id":"ckhqa6v0j000a16p7ups2itrw","_id":"ckhqa6v0n000d16p763hnhk5m"},{"post_id":"ckhqa6v41000p16p7jyjmbmdm","tag_id":"ckhqa6v03000516p71i251y1o","_id":"ckhqa6v4z000u16p7x2n4qt4z"},{"post_id":"ckhqa6v1r000e16p71cqryryg","tag_id":"ckhqa6v2g000j16p7z8vx20pq","_id":"ckhqa6v5b000w16p7uwd69753"},{"post_id":"ckhqa6v1r000e16p71cqryryg","tag_id":"ckhqa6v3o000o16p76al3kjjr","_id":"ckhqa6v5o001116p7w4jnz3s6"},{"post_id":"ckhqa6v26000g16p7foddjk5r","tag_id":"ckhqa6v2g000j16p7z8vx20pq","_id":"ckhqa6v7b001e16p73fkm69jx"},{"post_id":"ckhqa6v26000g16p7foddjk5r","tag_id":"ckhqa6v5m000z16p7j223jm51","_id":"ckhqa6v7o001h16p7uozdd5eu"},{"post_id":"ckhqa6v26000g16p7foddjk5r","tag_id":"ckhqa6v6j001616p7pad4fdej","_id":"ckhqa6v81001m16p7fhea8zs6"},{"post_id":"ckhqa6v2h000k16p7e7hj69si","tag_id":"ckhqa6v2g000j16p7z8vx20pq","_id":"ckhqa6v8e001t16p7u2sqnvcn"},{"post_id":"ckhqa6v2h000k16p7e7hj69si","tag_id":"ckhqa6v03000516p71i251y1o","_id":"ckhqa6v8l001v16p7t4j3zpwl"},{"post_id":"ckhqa6v2h000k16p7e7hj69si","tag_id":"ckhqa6v7p001i16p733pr40qp","_id":"ckhqa6v8v002016p774zq3pi9"},{"post_id":"ckhqa6v33000l16p72vtz83un","tag_id":"ckhqa6v8b001r16p76mkaxnjn","_id":"ckhqa6v9a002216p79663usfv"},{"post_id":"ckhqa6v3k000m16p7nlp2pud0","tag_id":"ckhqa6v8p001y16p7mexljffp","_id":"ckhqa6v9e002916p7bx375h3i"},{"post_id":"ckhqa6v3k000m16p7nlp2pud0","tag_id":"ckhqa6v5m000z16p7j223jm51","_id":"ckhqa6v9e002a16p7v4vidl8y"},{"post_id":"ckhqa6v4j000q16p7o9s4gd3i","tag_id":"ckhqa6v03000516p71i251y1o","_id":"ckhqa6v9h002e16p7l348xeu6"},{"post_id":"ckhqa6v4j000q16p7o9s4gd3i","tag_id":"ckhqa6v9d002616p7jwlmnocc","_id":"ckhqa6v9h002f16p7n667ndks"},{"post_id":"ckhqa6v51000v16p720l061qk","tag_id":"ckhqa6v2g000j16p7z8vx20pq","_id":"ckhqa6v9l002m16p7zqsig86b"},{"post_id":"ckhqa6v51000v16p720l061qk","tag_id":"ckhqa6v9f002b16p7xzn6iwpp","_id":"ckhqa6v9m002n16p7afd9xwvt"},{"post_id":"ckhqa6v51000v16p720l061qk","tag_id":"ckhqa6v9h002g16p7gr7l4xvn","_id":"ckhqa6v9o002q16p70pd9bmpx"},{"post_id":"ckhqa6v5d000x16p7svj2cqho","tag_id":"ckhqa6v9j002k16p7l4bgtsza","_id":"ckhqa6v9q002t16p7ocj92g8f"},{"post_id":"ckhqa6v5d000x16p7svj2cqho","tag_id":"ckhqa6v9m002p16p79meb7ket","_id":"ckhqa6v9q002u16p7a9a5my80"},{"post_id":"ckhqa6v5s001216p7qky7jgmi","tag_id":"ckhqa6v9p002s16p744rmhkgd","_id":"ckhqa6v9x002y16p7xc5wa02d"},{"post_id":"ckhqa6v5s001216p7qky7jgmi","tag_id":"ckhqa6v9q002v16p7leq060ft","_id":"ckhqa6v9x002z16p75cz21fga"},{"post_id":"ckhqa6v5s001216p7qky7jgmi","tag_id":"ckhqa6v9w002w16p797gziix1","_id":"ckhqa6v9y003116p7als4dsf9"},{"post_id":"ckhqa6v67001316p7zh2eky0s","tag_id":"ckhqa6v9q002v16p7leq060ft","_id":"ckhqa6v9y003216p7y1xfpr0v"},{"post_id":"ckhqa6v6m001716p763vcugjd","tag_id":"ckhqa6v9x003016p7w6ohok4m","_id":"ckhqa6v9z003516p7g8ugw8j1"},{"post_id":"ckhqa6v6m001716p763vcugjd","tag_id":"ckhqa6v9y003316p7rai5rz2u","_id":"ckhqa6v9z003616p7n1j91yen"},{"post_id":"ckhqa6v6t001916p7loh87fwq","tag_id":"ckhqa6v9z003416p7l72si55g","_id":"ckhqa6va0003816p7hbbqzp5v"},{"post_id":"ckhqa6v76001d16p7yhsg7xyq","tag_id":"ckhqa6v9y003316p7rai5rz2u","_id":"ckhqa6va0003a16p74shoblcb"},{"post_id":"ckhqa6v7b001f16p7np8lz2k5","tag_id":"ckhqa6va0003916p7usyix81u","_id":"ckhqa6va1003c16p77y5ww4oe"},{"post_id":"ckhqa6v82001n16p7y2xkuyay","tag_id":"ckhqa6va1003b16p7kk5ywfjo","_id":"ckhqa6va1003e16p7p09hjju9"},{"post_id":"ckhqa6v88001p16p7kabqppvj","tag_id":"ckhqa6va1003d16p70kry7lvh","_id":"ckhqa6va2003g16p7b9crw0ij"},{"post_id":"ckhqa6v8f001u16p78cckp6ot","tag_id":"ckhqa6va1003d16p70kry7lvh","_id":"ckhqa6va3003i16p7e9wt2opv"},{"post_id":"ckhqa6v8l001w16p7cn6nw77a","tag_id":"ckhqa6va2003h16p7eygi3kc9","_id":"ckhqa6va4003k16p7e77v7zzo"},{"post_id":"ckhqa6v8v002116p7f17cxmz5","tag_id":"ckhqa6va3003j16p7p8anogzv","_id":"ckhqa6va4003l16p73h19fvky"},{"post_id":"ckhqa6vz8003m16p7hed4e8b0","tag_id":"ckhqa6vzg003p16p7qgpl23ma","_id":"ckhqa6vzm003s16p7wcujc45y"},{"post_id":"ckhqa6vzd003n16p7lrmyonrz","tag_id":"ckhqa6vzl003r16p7t27fulnt","_id":"ckhqa6vzp003u16p7uybk7k8h"}],"Tag":[{"name":"python","_id":"ckhqa6v03000516p71i251y1o"},{"name":"docker","_id":"ckhqa6v0b000716p76tic75xp"},{"name":"wins10","_id":"ckhqa6v0j000a16p7ups2itrw"},{"name":"flask","_id":"ckhqa6v2g000j16p7z8vx20pq"},{"name":"sse","_id":"ckhqa6v3o000o16p76al3kjjr"},{"name":"问题分析","_id":"ckhqa6v5m000z16p7j223jm51"},{"name":"linux","_id":"ckhqa6v6j001616p7pad4fdej"},{"name":"源码浅析","_id":"ckhqa6v7p001i16p733pr40qp"},{"name":"兼职运维","_id":"ckhqa6v8b001r16p76mkaxnjn"},{"name":"mysql","_id":"ckhqa6v8p001y16p7mexljffp"},{"name":"coding-tools","_id":"ckhqa6v9d002616p7jwlmnocc"},{"name":"session","_id":"ckhqa6v9f002b16p7xzn6iwpp"},{"name":"分布式","_id":"ckhqa6v9h002g16p7gr7l4xvn"},{"name":"algorithm","_id":"ckhqa6v9j002k16p7l4bgtsza"},{"name":"datastructure","_id":"ckhqa6v9m002p16p79meb7ket"},{"name":"shell","_id":"ckhqa6v9p002s16p744rmhkgd"},{"name":"部署","_id":"ckhqa6v9q002v16p7leq060ft"},{"name":"运维","_id":"ckhqa6v9w002w16p797gziix1"},{"name":"pysqark","_id":"ckhqa6v9x003016p7w6ohok4m"},{"name":"pandas","_id":"ckhqa6v9y003316p7rai5rz2u"},{"name":"hexo","_id":"ckhqa6v9z003416p7l72si55g"},{"name":"jenkins","_id":"ckhqa6va0003916p7usyix81u"},{"name":"nfc","_id":"ckhqa6va1003b16p7kk5ywfjo"},{"name":"数据仓库","_id":"ckhqa6va1003d16p70kry7lvh"},{"name":"mybatis","_id":"ckhqa6va2003h16p7eygi3kc9"},{"name":"spring cloud","_id":"ckhqa6va3003j16p7p8anogzv"},{"name":"事务","_id":"ckhqa6vzg003p16p7qgpl23ma"},{"name":"spring","_id":"ckhqa6vzl003r16p7t27fulnt"}]}}