<<<<<<< HEAD
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[],"Category":[],"Data":[],"Page":[],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}
=======
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6d8bb775e2ff6e2af243668c41ddbc028d8cd50c","modified":1579008122000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1537084373000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1537084373000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1537084373000},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1537084373000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1537084373000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1537084373000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1537084373000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1537084373000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1537084373000},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1537084373000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1537084373000},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1537084373000},{"_id":"themes/next/_config.yml","hash":"ff0566251496c2191719027c43a124179a8514e6","modified":1541330804000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1537084373000},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1537084373000},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1537084373000},{"_id":"source/_drafts/draft-file.md","hash":"af1aca1581def8249e90b995ad0503d20ffd3edc","modified":1537886874000},{"_id":"source/_posts/2018-11-04-win10docker使用填坑.md","hash":"ff5ef779480eb8b721d9fbddbeaaac2b9c10946b","modified":1541339150000},{"_id":"source/_posts/2018-12-30-python代码加密部署.md","hash":"b8698d5ff32a5ed120edeb3e48afd0798acc9253","modified":1546163902000},{"_id":"source/_posts/2018-11-25-flask服务端推送.md","hash":"79b6520a36b7a599ccd2c7600563b84d6439aee6","modified":1543134724000},{"_id":"source/_posts/2019-01-22-sqlalchemy数据库连接数异常.md","hash":"60cad9211f18c1b3fc26670d86760b7fd9092e46","modified":1552219741000},{"_id":"source/_posts/2019-03-10-webserver异常-TooManyOpenFiles.md","hash":"89e7beaf4477c54ff78fb97a99f864c86bd3f4f1","modified":1552219754000},{"_id":"source/_posts/2019-03-25-flask分布式部署及flask-session.md","hash":"5f02e8a8c39d047610feff6243f077b19cb8aa38","modified":1556323344000},{"_id":"source/_posts/2019-04-27-pycharm远程调试.md","hash":"400986cf18531a842e4267f75873a221c71951b4","modified":1556942729000},{"_id":"source/_posts/2019-06-09-python程序员开发规范.md","hash":"04875f8423883b7745a58d9a1103ce97b1eed3ca","modified":1560070177000},{"_id":"source/_posts/2019-12-22-hexo容器化部署.md","hash":"d3c55f6170fe04589b8d5fd0725717f9a5a09f13","modified":1577523981000},{"_id":"source/_posts/2019-07-14-flask-caching源码浅析.md","hash":"4b16fe5510f7c3c0e5e29423f3c3a8141745e0d3","modified":1577283209000},{"_id":"source/_posts/2019-06-16-数据结构与算法总结.md","hash":"5902c9f5047f8a407d757d068f15b28477bf1c09","modified":1560673141000},{"_id":"source/_posts/2019-12-23-fabric使用总结.md","hash":"14614f706e3f7a4e186d91f4e6abfa707e3d1069","modified":1577523981000},{"_id":"source/_posts/2019-12-27-兼职运维之ulimit-u.md","hash":"601ac3dad2af65d67d8cd0f7a80ad0b654b320fd","modified":1579007704000},{"_id":"source/_posts/2020-01-13-shell编码整理.md","hash":"74077c87d74b84af1d673279790f513ea8c9b429","modified":1579012453000},{"_id":"source/about/index.md","hash":"2b958cce6b377e26f44a2a0f71e2f33157b789ec","modified":1537886874000},{"_id":"source/tags/index.md","hash":"24bbf92a1375f4719e42de71c25b2bfb34e4d834","modified":1537886874000},{"_id":"source/categories/index.md","hash":"14c5ea719245f4dca43c9a99a57fc41b325b4834","modified":1537886874000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1537084373000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1537084373000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537084373000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1537084373000},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1537084373000},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1537084373000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1537084373000},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1537084373000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1537084373000},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1537084373000},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1537084373000},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1537084373000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1537084373000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1537084373000},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1537084373000},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1537084373000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1537084373000},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1537084373000},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1537084373000},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1537084373000},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1537084373000},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1537084373000},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1537084373000},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1537084373000},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1537084373000},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1537084373000},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1537084373000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1537084373000},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1537084373000},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1537084373000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1537084373000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1537084373000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1537084373000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1537084373000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1537084373000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1537084373000},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1537084373000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1537084373000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1537084373000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1537084373000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1537084373000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1537084373000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1537084373000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1537084373000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1537084373000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"b811a3cd64ecc90533048d12e0d96cec2515d262","modified":1537103202000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1537084373000},{"_id":"themes/next/layout/_macro/post.swig","hash":"a4901c488c36c1349948b4486545fbd9355c6834","modified":1537103263000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1537084373000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1537084373000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1537084373000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1537084373000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1537084373000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1537084373000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1537084373000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1537084373000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1537084373000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1537084373000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1537084373000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1537084373000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1537084373000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1537084373000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"5f155ea8a9d792dba84727141859d0a4c1705582","modified":1537453320000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1537084373000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1537084373000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1537084373000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1537084373000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1537084373000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1537084373000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1537084373000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537084373000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537084373000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1537084373000},{"_id":"themes/next/source/images/alipay.jpg","hash":"30f5cded3686ee70d56144f06b8547e3ace3cd8d","modified":1537090871000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1537084373000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1537084373000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1537084373000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1537084373000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1537084373000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1537084373000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1537084373000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537084373000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537084373000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537084373000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1537084373000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537084373000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1537084373000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537084373000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537084373000},{"_id":"themes/next/source/images/avatar.jpeg","hash":"48414fbdb4a202ee77595083a0a00cdcb3a99fbc","modified":1537104256000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"3e223daecbb37196edbbeb937ce23063d305aa7b","modified":1537090859000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1537084373000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1537084373000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1537084373000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1537084373000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1537084373000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1537084373000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1537084373000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1537084373000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1537084373000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1537084373000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1537084373000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1537084373000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1537084373000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1537084373000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1537084373000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1537084373000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1537084373000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1537084373000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1537084373000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1537084373000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1537084373000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5b1805ccffe7a6cc42050f77b0078d02c30b1853","modified":1579009192000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1537084373000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1537084373000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1537084373000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1537084373000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1537084373000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1537084373000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1537084373000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1537084373000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1537084373000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1537084373000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1537084373000},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1537084373000},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1537084373000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1537084373000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1537084373000},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1537084373000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1537084373000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1537084373000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1537084373000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1537084373000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1537084373000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1537084373000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1537084373000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1537084373000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1537084373000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1537084373000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1537084373000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1537084373000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1537084373000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1537084373000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1537084373000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1537084373000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1537084373000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1537084373000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1537084373000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1537084373000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1537084373000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1537084373000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1537084373000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1537084373000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1537084373000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1537084373000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1537084373000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1537084373000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1537084373000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1537084373000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1537084373000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1537084373000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1537084373000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1537084373000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1537084373000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1537084373000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1537084373000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1537084373000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1537084373000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1537084373000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"bdcd8e4acbc6e51f28fa95d8a02f65fd1c80f242","modified":1537103790000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"51f70ba4e2dd1c2bc5ff1f8f16ddf93a286c3e4f","modified":1537104879000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1537084373000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1537084373000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1537084373000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1537084373000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1537084373000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537084373000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1537084373000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1537084373000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1537084373000},{"_id":"themes/next/.DS_Store","hash":"1e1b81b66a29bed5fdf53271b7623acd59173140","modified":1579009109000},{"_id":"themes/next/source/.DS_Store","hash":"71de49345b332e02516e8cd5f553d3a97c7c0bf7","modified":1579008923000},{"_id":"themes/next/source/css/.DS_Store","hash":"52546cdd0ad6a7650fc10b1374bc97fd3d01be15","modified":1579009075000},{"_id":"public/atom.xml","hash":"ca5910d6e9cc5dbbcc0321961879b8a27a95bf8c","modified":1579012486788},{"_id":"public/tags/index.html","hash":"dec8327dbd089619756d427a370cc07d9d70bf8b","modified":1579012492405},{"_id":"public/categories/index.html","hash":"43f83ddb91084593b0cc380a978ddf068ec2d3a3","modified":1579012492411},{"_id":"public/about/index.html","hash":"298658cec8d572680fdf8cc4104baefd8668176e","modified":1579012492411},{"_id":"public/categories/docker/index.html","hash":"6c16ed01ab53815eb9d376b1b94e220b97c6dae6","modified":1579012492412},{"_id":"public/categories/问题分析/index.html","hash":"cab4a1716be37424302ad7df4e6ac8ed0482b054","modified":1579012492412},{"_id":"public/categories/flask/index.html","hash":"f10cdfb33838b1c4da0bde9e190667d341c252f5","modified":1579012492412},{"_id":"public/categories/python/index.html","hash":"0d4ded9f3332b395293cd3f849ce5168eb1ff996","modified":1579012492413},{"_id":"public/categories/coding-tools/index.html","hash":"012a82567158df8b33b0ee38c3985fe64d04e179","modified":1579012492413},{"_id":"public/categories/algorithm-datastructure/index.html","hash":"6abcaa6e9ba61d36208af4f292ee4420c41767e2","modified":1579012492413},{"_id":"public/categories/linux/index.html","hash":"7535ea34780770b4fdf5d1d948a5e862fd5605cb","modified":1579012492413},{"_id":"public/2020/01/13/shell编码整理/index.html","hash":"0c5bf96029aed454abef81be35ee1d73e67f505c","modified":1579012492413},{"_id":"public/2019/12/27/兼职运维之ulimit-u/index.html","hash":"cfb7fac1307fff54660efbf80fbb4a23877e56d1","modified":1579012492413},{"_id":"public/2019/12/23/fabric使用总结/index.html","hash":"a47f7d6c3d444e11f5e5d517c3c4da810d5b7640","modified":1579012492413},{"_id":"public/2019/12/22/hexo容器化部署/index.html","hash":"151d3133b2bccba65eeb5263bc5f2b9fad04f114","modified":1579012492414},{"_id":"public/2019/07/14/flask-caching源码浅析/index.html","hash":"138f8463e9ec50f281cea5db122a6fdec3682c54","modified":1579012492414},{"_id":"public/2019/06/16/数据结构与算法总结/index.html","hash":"bfd67628f86f3f00644c1708ef40635813288010","modified":1579012492414},{"_id":"public/2019/06/09/python程序员开发规范/index.html","hash":"e251e584dc355c02440996b3ba9d7b5a7de09468","modified":1579012492414},{"_id":"public/2019/04/27/pycharm远程调试/index.html","hash":"33c5091f3272e2290ddcd0d4219865e7b3ca12a7","modified":1579012492414},{"_id":"public/2019/03/25/flask分布式部署及flask-session/index.html","hash":"516263e8528b81865896e389631940513ce977be","modified":1579012492414},{"_id":"public/2019/03/10/webserver异常-TooManyOpenFiles/index.html","hash":"eca8b5769f9c3e105d6a07a9a0f256dba9b2661c","modified":1579012492414},{"_id":"public/2019/01/22/sqlalchemy数据库连接数异常/index.html","hash":"ec1c9d8ad20258c1cf81547722681c8b1296570a","modified":1579012492414},{"_id":"public/2018/12/30/python代码加密部署/index.html","hash":"bde523dcf6b208698d25e2413f8b8e728fb0508f","modified":1579012492414},{"_id":"public/2018/11/25/flask服务端推送/index.html","hash":"7194109cd5a2cdab92fd14617a49c98b3b902308","modified":1579012492415},{"_id":"public/2018/11/04/win10docker使用填坑/index.html","hash":"e712071b5d48d5796a0f6afa8dee298283986df7","modified":1579012492415},{"_id":"public/archives/2018/index.html","hash":"89ed62a6db4c481e6293c4bda21f39e9f3520b72","modified":1579012492697},{"_id":"public/archives/page/2/index.html","hash":"f2559ae4a253deb21a22cc3b5970cdc64aa8f5e0","modified":1579012492698},{"_id":"public/archives/2018/11/index.html","hash":"f42ec07a16f953cd60028d4857022909f1382731","modified":1579012492699},{"_id":"public/archives/2018/12/index.html","hash":"80d1d751666f164d73616fee0a2dc365b95fc073","modified":1579012492699},{"_id":"public/archives/2019/03/index.html","hash":"4e63a7ab9e6ebfb00e657c3fa97484b3ce5accd8","modified":1579012492699},{"_id":"public/archives/2019/01/index.html","hash":"58abcc08a505a77a87855dfb78c01c9ab6e0328d","modified":1579012492699},{"_id":"public/archives/2019/04/index.html","hash":"8bb45bdbe1575223082c03c135bbc89f1727c85f","modified":1579012492699},{"_id":"public/archives/2019/06/index.html","hash":"011a276ba8608b9833f59c0551149f64d8b75e0a","modified":1579012492699},{"_id":"public/archives/2019/07/index.html","hash":"8abebcd3b6c51d948a9e425c2106097b0f0b91e1","modified":1579012492699},{"_id":"public/archives/2020/index.html","hash":"e531bc8b589b56fe409e490ce87e52fdf18092fe","modified":1579012492699},{"_id":"public/archives/2019/12/index.html","hash":"cfd0118693dc43e47a79ae8a6c009dc250b7e097","modified":1579012492699},{"_id":"public/archives/2020/01/index.html","hash":"9531c3f89c5bf673bf0b7014ebf53f3dee69cbd9","modified":1579012492699},{"_id":"public/tags/docker/index.html","hash":"1c9e8f4351180a3ef784c977a367be2d7aa7924b","modified":1579012492699},{"_id":"public/tags/wins10/index.html","hash":"c31f063d07bc75707f16570b8ecb9441b91c733b","modified":1579012492699},{"_id":"public/tags/mysql/index.html","hash":"09b47d5b0b5a98774f37fb32e66dfd4fa5157929","modified":1579012492699},{"_id":"public/tags/问题分析/index.html","hash":"4e4000ad8e506ca47fd2407d3f1b6a2ebaf8b1af","modified":1579012492699},{"_id":"public/tags/flask/index.html","hash":"937ba70286a9094e106069fe102f7d6a73e1fa62","modified":1579012492699},{"_id":"public/tags/sse/index.html","hash":"2714c251899d3baee53b2e71036b619958622191","modified":1579012492699},{"_id":"public/tags/python/index.html","hash":"5acb7012b954b620c765d8a3006f095703b67f91","modified":1579012492699},{"_id":"public/tags/linux/index.html","hash":"fcfe466932f98119421c5388a69568a909134534","modified":1579012492699},{"_id":"public/tags/session/index.html","hash":"3038e79e25535f26a51411881611a9e243deecf5","modified":1579012492699},{"_id":"public/tags/分布式/index.html","hash":"1158e662d9101fcf4ed534d1602ae0921f8704f4","modified":1579012492699},{"_id":"public/tags/coding-tools/index.html","hash":"9a9737a7fa6831cf50dcb839f71573d077fd30e1","modified":1579012492699},{"_id":"public/tags/hexo/index.html","hash":"522c4326df43fa37a4aa8283166d816cb57797b4","modified":1579012492699},{"_id":"public/tags/algorithm/index.html","hash":"2bbda85b325c3688f9d4509dca32858f82968939","modified":1579012492699},{"_id":"public/tags/datastructure/index.html","hash":"4209cf873a4173abcc7071b0dcab9c03c69d8db3","modified":1579012492700},{"_id":"public/tags/源码浅析/index.html","hash":"b2416a3a73962c955d20e1cc4d1c589ad80c91ec","modified":1579012492700},{"_id":"public/tags/兼职运维/index.html","hash":"23eff6dca65bc22e642795d1b98062dfe6fd7f89","modified":1579012492700},{"_id":"public/tags/部署/index.html","hash":"c4e9a060187c7264126f96ba7172930b37f17f06","modified":1579012492700},{"_id":"public/archives/index.html","hash":"05e6c7f19c8024ef43b2427af7f3b96237f19ae7","modified":1579012492700},{"_id":"public/archives/2019/index.html","hash":"a66d5e65cdf5b40a927322ba71d5218570018f1f","modified":1579012492700},{"_id":"public/index.html","hash":"ee3b0fd70862c7f6ac72d5dbc7c6aa74a4f8c20a","modified":1579012492700},{"_id":"public/page/2/index.html","hash":"2686832333f0699865a8b6d27d8ca1dcb64a9a7e","modified":1579012492700},{"_id":"public/categories/shell/index.html","hash":"ac5aa9f3f215f912aec37788755d983dbc529125","modified":1579012492701},{"_id":"public/tags/shell/index.html","hash":"419dbd03a7eaae4fa74dce77766a279e219f10e4","modified":1579012492701},{"_id":"public/tags/运维/index.html","hash":"6b71defcf904fc4a73ada18257df1bbdf7ad60be","modified":1579012492701}],"Category":[{"name":"docker","_id":"ck5dwvme500030tqkkx0t3hfd"},{"name":"问题分析","_id":"ck5dwvme800050tqk87p4et6j"},{"name":"flask","_id":"ck5dwvmjq000j0tqkgbqix6zy"},{"name":"python","_id":"ck5dwvmjx000p0tqks3g3cu5a"},{"name":"coding-tools","_id":"ck5dwvmk0000v0tqk7t6c2bl2"},{"name":"algorithm&datastructure","_id":"ck5dwvmk400140tqk5vo48htq"},{"name":"linux","_id":"ck5dwvmkb001b0tqk6y05yh5v"},{"name":"shell","_id":"ck5dwvmkd001f0tqkj6rk0s5m"}],"Data":[],"Page":[{"title":"tags","date":"2018-09-16T09:16:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-16 17:16:53\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-09-25T14:47:54.000Z","path":"tags/index.html","layout":"page","_id":"ck5dwvmjn000g0tqkr9sz5zzb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-16T09:17:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-16 17:17:00\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-25T14:47:54.000Z","path":"categories/index.html","layout":"page","_id":"ck5dwvmjp000i0tqk1du9psod","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-09-16T09:18:34.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-16 17:18:34\n---\n","updated":"2018-09-25T14:47:54.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck5dwvmjr000m0tqkcp70ohvm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"draft_file","_content":"","source":"_drafts/draft-file.md","raw":"---\ntitle: draft_file\ntags:\n---\n","slug":"draft-file","published":0,"date":"2020-01-04T13:33:07.000Z","updated":"2018-09-25T14:47:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmco00000tqk9upn1w4f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"win10docker使用填坑","date":"2018-11-04T05:17:09.000Z","_content":"{%note info%}\n本文用以记录在`docker win10`环境使用中踩到的坑及解决方案。\n{%endnote%}\n\n<!--more-->\n\n## 问题一：docker修改配置或者镜像的存储位置后启动异常\n### *解决方案*：\n{%note warning%}\n- 移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑\n{%endnote%}\n***\n\n\n\n## 问题二：修改镜像存储位置\n### *解决方案*：\n{%note warning%}\n- 默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx\n- 修改：Hyper-V管理器**Hyper-v设置**虚拟硬盘修改路径\n{%endnote%}\n\n\n***\n\n## 问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\n### *解决方案*：\n{%note warning%}\n- 进入容器\ndocker exec -it mysql bash\n- 进入mysql\nmysql -u root -p\n- 创建root用户\n CREATE USER 'root'@'%' IDENTIFIED IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 设置root用户访问权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n- 重置密码\nALTER USER 'root'@'%' IDENTIFIED WITH `mysql_native_password` BY '123456';\nALTER USER 'root'@'localhost' IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 提交修改\nFLUSH PRIVILEGES;\n{%endnote%}","source":"_posts/2018-11-04-win10docker使用填坑.md","raw":"---\ntitle: win10docker使用填坑\ndate: 2018-11-04 13:17:09\ntags:\n- docker\n- wins10\ncategories:\n- docker\n---\n{%note info%}\n本文用以记录在`docker win10`环境使用中踩到的坑及解决方案。\n{%endnote%}\n\n<!--more-->\n\n## 问题一：docker修改配置或者镜像的存储位置后启动异常\n### *解决方案*：\n{%note warning%}\n- 移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑\n{%endnote%}\n***\n\n\n\n## 问题二：修改镜像存储位置\n### *解决方案*：\n{%note warning%}\n- 默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx\n- 修改：Hyper-V管理器**Hyper-v设置**虚拟硬盘修改路径\n{%endnote%}\n\n\n***\n\n## 问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\n### *解决方案*：\n{%note warning%}\n- 进入容器\ndocker exec -it mysql bash\n- 进入mysql\nmysql -u root -p\n- 创建root用户\n CREATE USER 'root'@'%' IDENTIFIED IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 设置root用户访问权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n- 重置密码\nALTER USER 'root'@'%' IDENTIFIED WITH `mysql_native_password` BY '123456';\nALTER USER 'root'@'localhost' IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 提交修改\nFLUSH PRIVILEGES;\n{%endnote%}","slug":"win10docker使用填坑","published":1,"updated":"2018-11-04T13:45:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvme200010tqkk9tuqw3x","content":"<div class=\"note info\"><p>本文用以记录在<code>docker win10</code>环境使用中踩到的坑及解决方案。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"><a href=\"#问题一：docker修改配置或者镜像的存储位置后启动异常\" class=\"headerlink\" title=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"></a>问题一：docker修改配置或者镜像的存储位置后启动异常</h2><h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑</li>\n</ul></div>\n<hr>\n<h2 id=\"问题二：修改镜像存储位置\"><a href=\"#问题二：修改镜像存储位置\" class=\"headerlink\" title=\"问题二：修改镜像存储位置\"></a>问题二：修改镜像存储位置</h2><h3 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx</li>\n<li>修改：Hyper-V管理器<strong>Hyper-v设置</strong>虚拟硬盘修改路径</li>\n</ul></div>\n<hr>\n<h2 id=\"问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\"><a href=\"#问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\" class=\"headerlink\" title=\"问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\"></a>问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client</h2><h3 id=\"解决方案：-2\"><a href=\"#解决方案：-2\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>进入容器<br>docker exec -it mysql bash</li>\n<li>进入mysql<br>mysql -u root -p</li>\n<li>创建root用户<br>CREATE USER ‘root‘@’%’ IDENTIFIED IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>设置root用户访问权限<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ WITH GRANT OPTION;</li>\n<li>重置密码<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>提交修改<br>FLUSH PRIVILEGES;</li>\n</ul></div>","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文用以记录在<code>docker win10</code>环境使用中踩到的坑及解决方案。</p></div>","more":"<h2 id=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"><a href=\"#问题一：docker修改配置或者镜像的存储位置后启动异常\" class=\"headerlink\" title=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"></a>问题一：docker修改配置或者镜像的存储位置后启动异常</h2><h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑</li>\n</ul></div>\n<hr>\n<h2 id=\"问题二：修改镜像存储位置\"><a href=\"#问题二：修改镜像存储位置\" class=\"headerlink\" title=\"问题二：修改镜像存储位置\"></a>问题二：修改镜像存储位置</h2><h3 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx</li>\n<li>修改：Hyper-V管理器<strong>Hyper-v设置</strong>虚拟硬盘修改路径</li>\n</ul></div>\n<hr>\n<h2 id=\"问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\"><a href=\"#问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\" class=\"headerlink\" title=\"问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\"></a>问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client</h2><h3 id=\"解决方案：-2\"><a href=\"#解决方案：-2\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>进入容器<br>docker exec -it mysql bash</li>\n<li>进入mysql<br>mysql -u root -p</li>\n<li>创建root用户<br>CREATE USER ‘root‘@’%’ IDENTIFIED IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>设置root用户访问权限<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ WITH GRANT OPTION;</li>\n<li>重置密码<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>提交修改<br>FLUSH PRIVILEGES;</li>\n</ul></div>"},{"title":"sqlalchemy数据库连接数异常","date":"2019-01-22T13:03:19.000Z","_content":"\n### 问题现象：\n{%note warning%}\n- web端调用flask接口阻塞，最终超时返回系统异常\n- 查询日志得知具体异常为超出数据库最大连接数\n- 重新flask webserver后数据库连接数正常释放\n- 持续使用系统一段时间后数据库连接数再次封顶\n- 环境操作用户寥寥无几\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用flask搭建webserver的运行环境\n- 使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30\n- mysql设置最大连接数200\n- 宿主机CPU 2核心\n- 通过进程数2*2+1 = 5\n{%endnote%}\n***\n\n### 问题分析：\n\n1. 怀疑对flask-sqlalchemy使用不当导致\n  - 问题原因明显是数据库连接使用后没有释放\n  - 数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放\n  - flask-sqlalchemy的连接释放由`teardown_appcontext`钩子统一处理\n  ```python\n\t@app.teardown_appcontext\n\tdef shutdown_session(response_or_exc):\n\t    if app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']:\n\t        if response_or_exc is None:\n\t            self.session.commit()\n\t\n\t    self.session.remove()\n\t    return response_or_exc\n\t```\n2. mysql数据库连接超出首因\n\t- (2\\*2+1) * 64 > 200 \n\t- 困惑连接数回收已经指定`SQLALCHEMY_POOL_RECYCLE=30`但未生效\n\t- 对`SQLALCHEMY_POOL_RECYCLE`理解错误，该项真实含义为queue_pool可用连接的回收时间\n\t- 当前问题为连接未释放，顾与`SQLALCHEMY_POOL_RECYCLE`无关\n3. 若(2\\*2+1) * 64 < 200 会不会好点？\n\t- 异常改为`QueuePool limit of size <x> overflow <y> reached, connection timed out, timeout <z>\n`\n\t- 达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”\n\t\n**分析到这里仍旧没有头绪...**\n\n***\n\n### 问题排查：\n- **查询数据库连接数** \n  ```shell\n\tSELECT * FROM INFORMATION_SCHEMA. PROCESSLIST\n\t```\n- **linux下查询连接端口对应的进程**\n\t```shell\n\tlsof -i:48057|grep celery|awk   '{print$2}'|xargs -I{} echo 'ps -ef|grep {}'|bash\n\t```\n- **windows下查询连接端口对应的进程**\n  ```shell\n\tnetstat -ano|findstr \"8080\"\n\ttasklist|findstr [进程号]\n\t```\n***\n\n### 问题解决：\n- 问题调试发现单接口调用连接数并未按预期增长\n- 通过页面使用操作连接数会不规则的增长\n- 逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1\n- 分析sse仅操作了redis，并未存在对mysql的相关操作\n- 调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库\n- 到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈\n***\n\n### 问题总结：\n- 最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题\n***\n","source":"_posts/2019-01-22-sqlalchemy数据库连接数异常.md","raw":"---\ntitle: sqlalchemy数据库连接数异常\ndate: 2019-01-22 21:03:19\ntags:\n- mysql\n- 问题分析\ncategories:\n- 问题分析\n---\n\n### 问题现象：\n{%note warning%}\n- web端调用flask接口阻塞，最终超时返回系统异常\n- 查询日志得知具体异常为超出数据库最大连接数\n- 重新flask webserver后数据库连接数正常释放\n- 持续使用系统一段时间后数据库连接数再次封顶\n- 环境操作用户寥寥无几\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用flask搭建webserver的运行环境\n- 使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30\n- mysql设置最大连接数200\n- 宿主机CPU 2核心\n- 通过进程数2*2+1 = 5\n{%endnote%}\n***\n\n### 问题分析：\n\n1. 怀疑对flask-sqlalchemy使用不当导致\n  - 问题原因明显是数据库连接使用后没有释放\n  - 数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放\n  - flask-sqlalchemy的连接释放由`teardown_appcontext`钩子统一处理\n  ```python\n\t@app.teardown_appcontext\n\tdef shutdown_session(response_or_exc):\n\t    if app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']:\n\t        if response_or_exc is None:\n\t            self.session.commit()\n\t\n\t    self.session.remove()\n\t    return response_or_exc\n\t```\n2. mysql数据库连接超出首因\n\t- (2\\*2+1) * 64 > 200 \n\t- 困惑连接数回收已经指定`SQLALCHEMY_POOL_RECYCLE=30`但未生效\n\t- 对`SQLALCHEMY_POOL_RECYCLE`理解错误，该项真实含义为queue_pool可用连接的回收时间\n\t- 当前问题为连接未释放，顾与`SQLALCHEMY_POOL_RECYCLE`无关\n3. 若(2\\*2+1) * 64 < 200 会不会好点？\n\t- 异常改为`QueuePool limit of size <x> overflow <y> reached, connection timed out, timeout <z>\n`\n\t- 达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”\n\t\n**分析到这里仍旧没有头绪...**\n\n***\n\n### 问题排查：\n- **查询数据库连接数** \n  ```shell\n\tSELECT * FROM INFORMATION_SCHEMA. PROCESSLIST\n\t```\n- **linux下查询连接端口对应的进程**\n\t```shell\n\tlsof -i:48057|grep celery|awk   '{print$2}'|xargs -I{} echo 'ps -ef|grep {}'|bash\n\t```\n- **windows下查询连接端口对应的进程**\n  ```shell\n\tnetstat -ano|findstr \"8080\"\n\ttasklist|findstr [进程号]\n\t```\n***\n\n### 问题解决：\n- 问题调试发现单接口调用连接数并未按预期增长\n- 通过页面使用操作连接数会不规则的增长\n- 逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1\n- 分析sse仅操作了redis，并未存在对mysql的相关操作\n- 调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库\n- 到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈\n***\n\n### 问题总结：\n- 最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题\n***\n","slug":"sqlalchemy数据库连接数异常","published":1,"updated":"2019-03-10T12:09:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvme400020tqkkyw9rx5g","content":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>web端调用flask接口阻塞，最终超时返回系统异常</li>\n<li>查询日志得知具体异常为超出数据库最大连接数</li>\n<li>重新flask webserver后数据库连接数正常释放</li>\n<li>持续使用系统一段时间后数据库连接数再次封顶</li>\n<li>环境操作用户寥寥无几</li>\n</ul></div>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用flask搭建webserver的运行环境</li>\n<li>使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30</li>\n<li>mysql设置最大连接数200</li>\n<li>宿主机CPU 2核心</li>\n<li>通过进程数2*2+1 = 5</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li><p>怀疑对flask-sqlalchemy使用不当导致</p>\n<ul>\n<li>问题原因明显是数据库连接使用后没有释放</li>\n<li>数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放</li>\n<li>flask-sqlalchemy的连接释放由<code>teardown_appcontext</code>钩子统一处理<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_appcontext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shutdown_session</span><span class=\"params\">(response_or_exc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> app.config[<span class=\"string\">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> response_or_exc <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    self.session.remove()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response_or_exc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mysql数据库连接超出首因</p>\n<ul>\n<li>(2*2+1) * 64 &gt; 200 </li>\n<li>困惑连接数回收已经指定<code>SQLALCHEMY_POOL_RECYCLE=30</code>但未生效</li>\n<li>对<code>SQLALCHEMY_POOL_RECYCLE</code>理解错误，该项真实含义为queue_pool可用连接的回收时间</li>\n<li>当前问题为连接未释放，顾与<code>SQLALCHEMY_POOL_RECYCLE</code>无关</li>\n</ul>\n</li>\n<li>若(2*2+1) * 64 &lt; 200 会不会好点？<ul>\n<li>异常改为<code>QueuePool limit of size &lt;x&gt; overflow &lt;y&gt; reached, connection timed out, timeout &lt;z&gt;</code></li>\n<li>达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”</li>\n</ul>\n</li>\n</ol>\n<p><strong>分析到这里仍旧没有头绪…</strong></p>\n<hr>\n<h3 id=\"问题排查：\"><a href=\"#问题排查：\" class=\"headerlink\" title=\"问题排查：\"></a>问题排查：</h3><ul>\n<li><p><strong>查询数据库连接数</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA. PROCESSLIST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>linux下查询连接端口对应的进程</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:48057|grep celery|awk   '&#123;print$2&#125;'|xargs -I&#123;&#125; echo 'ps -ef|grep &#123;&#125;'|bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>windows下查询连接端口对应的进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr \"8080\"</span><br><span class=\"line\">tasklist|findstr [进程号]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>问题调试发现单接口调用连接数并未按预期增长</li>\n<li>通过页面使用操作连接数会不规则的增长</li>\n<li>逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1</li>\n<li>分析sse仅操作了redis，并未存在对mysql的相关操作</li>\n<li>调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库</li>\n<li>到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li>最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>web端调用flask接口阻塞，最终超时返回系统异常</li>\n<li>查询日志得知具体异常为超出数据库最大连接数</li>\n<li>重新flask webserver后数据库连接数正常释放</li>\n<li>持续使用系统一段时间后数据库连接数再次封顶</li>\n<li>环境操作用户寥寥无几</li>\n</ul></div>","more":"<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用flask搭建webserver的运行环境</li>\n<li>使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30</li>\n<li>mysql设置最大连接数200</li>\n<li>宿主机CPU 2核心</li>\n<li>通过进程数2*2+1 = 5</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li><p>怀疑对flask-sqlalchemy使用不当导致</p>\n<ul>\n<li>问题原因明显是数据库连接使用后没有释放</li>\n<li>数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放</li>\n<li>flask-sqlalchemy的连接释放由<code>teardown_appcontext</code>钩子统一处理<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_appcontext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shutdown_session</span><span class=\"params\">(response_or_exc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> app.config[<span class=\"string\">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> response_or_exc <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    self.session.remove()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response_or_exc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mysql数据库连接超出首因</p>\n<ul>\n<li>(2*2+1) * 64 &gt; 200 </li>\n<li>困惑连接数回收已经指定<code>SQLALCHEMY_POOL_RECYCLE=30</code>但未生效</li>\n<li>对<code>SQLALCHEMY_POOL_RECYCLE</code>理解错误，该项真实含义为queue_pool可用连接的回收时间</li>\n<li>当前问题为连接未释放，顾与<code>SQLALCHEMY_POOL_RECYCLE</code>无关</li>\n</ul>\n</li>\n<li>若(2*2+1) * 64 &lt; 200 会不会好点？<ul>\n<li>异常改为<code>QueuePool limit of size &lt;x&gt; overflow &lt;y&gt; reached, connection timed out, timeout &lt;z&gt;</code></li>\n<li>达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”</li>\n</ul>\n</li>\n</ol>\n<p><strong>分析到这里仍旧没有头绪…</strong></p>\n<hr>\n<h3 id=\"问题排查：\"><a href=\"#问题排查：\" class=\"headerlink\" title=\"问题排查：\"></a>问题排查：</h3><ul>\n<li><p><strong>查询数据库连接数</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA. PROCESSLIST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>linux下查询连接端口对应的进程</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:48057|grep celery|awk   '&#123;print$2&#125;'|xargs -I&#123;&#125; echo 'ps -ef|grep &#123;&#125;'|bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>windows下查询连接端口对应的进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr \"8080\"</span><br><span class=\"line\">tasklist|findstr [进程号]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>问题调试发现单接口调用连接数并未按预期增长</li>\n<li>通过页面使用操作连接数会不规则的增长</li>\n<li>逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1</li>\n<li>分析sse仅操作了redis，并未存在对mysql的相关操作</li>\n<li>调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库</li>\n<li>到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li>最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题</li>\n</ul>\n<hr>"},{"title":"flask服务端推送","date":"2018-11-25T07:09:26.000Z","_content":"{%note info%}\n本文用以记录在`flask-sse`使用中踩到的坑及解决方案。\n{%endnote%}\n<!--more-->\n\n### 当前主流的服务端推送方案\n1. 客户端短连接轮询\n2. websocket\n3. Server Send Event（SSE）\n\n相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。\n在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。\n***\n\n### 使用过程中遇到的困难\n- **`flask-sse` redis连接释放问题**\n该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新`new EventSource`，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。\n唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生`GeneratorExit`异常\n因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：\n```python\n@stream_with_context\ndef generator():\n    for message in self.messages(channel=channel):\n        yield str(message)\n        self.redis.connection_pool.disconnect()\n```\n\t修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。\n\n\t`redis连接数查看`\n```\nredis-cli -a pwd -h *.*.*.* info | grep client\n```\n\n- **程序阻塞问题**\n由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。\n\n\t另外还有一点现象，当使用flask自带的http服务器进行多线程`threaded=True`调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次`最多`能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用`celery`。\n\n- **网关超时问题**\n网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。\n\t因此需要针对超时异常进行特殊处理。\n\t这里给出[nginx配置](https://github.com/BotBotMe/botbot-web/issues/2)\n```\t\nlocation /eventsource {\ninclude uwsgi_params;\nuwsgi_pass eventsource-botbot-backend;\nuwsgi_buffering off;\nchunked_transfer_encoding off;\nproxy_cache off;\naccess_log  /var/log/nginx/eventsource_botbot.access.log;\nerror_page 504 =200 @eventsource-close-graceful;\n}\n\nlocation @eventsource-close-graceful {\nadd_header Content-Type text/event-stream;\nreturn 200;\n}\n```\n\t`注意`每个nginx网关就需要配置\n\n***\n\n### 参考资料\n- [官方用例](https://github.com/singingwolfboy/flask-sse)","source":"_posts/2018-11-25-flask服务端推送.md","raw":"---\ntitle: flask服务端推送\ndate: 2018-11-25 15:09:26\ntags:\n- flask\n- sse\ncategories:\n- flask\n---\n{%note info%}\n本文用以记录在`flask-sse`使用中踩到的坑及解决方案。\n{%endnote%}\n<!--more-->\n\n### 当前主流的服务端推送方案\n1. 客户端短连接轮询\n2. websocket\n3. Server Send Event（SSE）\n\n相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。\n在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。\n***\n\n### 使用过程中遇到的困难\n- **`flask-sse` redis连接释放问题**\n该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新`new EventSource`，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。\n唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生`GeneratorExit`异常\n因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：\n```python\n@stream_with_context\ndef generator():\n    for message in self.messages(channel=channel):\n        yield str(message)\n        self.redis.connection_pool.disconnect()\n```\n\t修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。\n\n\t`redis连接数查看`\n```\nredis-cli -a pwd -h *.*.*.* info | grep client\n```\n\n- **程序阻塞问题**\n由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。\n\n\t另外还有一点现象，当使用flask自带的http服务器进行多线程`threaded=True`调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次`最多`能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用`celery`。\n\n- **网关超时问题**\n网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。\n\t因此需要针对超时异常进行特殊处理。\n\t这里给出[nginx配置](https://github.com/BotBotMe/botbot-web/issues/2)\n```\t\nlocation /eventsource {\ninclude uwsgi_params;\nuwsgi_pass eventsource-botbot-backend;\nuwsgi_buffering off;\nchunked_transfer_encoding off;\nproxy_cache off;\naccess_log  /var/log/nginx/eventsource_botbot.access.log;\nerror_page 504 =200 @eventsource-close-graceful;\n}\n\nlocation @eventsource-close-graceful {\nadd_header Content-Type text/event-stream;\nreturn 200;\n}\n```\n\t`注意`每个nginx网关就需要配置\n\n***\n\n### 参考资料\n- [官方用例](https://github.com/singingwolfboy/flask-sse)","slug":"flask服务端推送","published":1,"updated":"2018-11-25T08:32:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmjm000f0tqkk9g0jq4c","content":"<div class=\"note info\"><p>本文用以记录在<code>flask-sse</code>使用中踩到的坑及解决方案。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"当前主流的服务端推送方案\"><a href=\"#当前主流的服务端推送方案\" class=\"headerlink\" title=\"当前主流的服务端推送方案\"></a>当前主流的服务端推送方案</h3><ol>\n<li>客户端短连接轮询</li>\n<li>websocket</li>\n<li>Server Send Event（SSE）</li>\n</ol>\n<p>相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。<br>在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。</p>\n<hr>\n<h3 id=\"使用过程中遇到的困难\"><a href=\"#使用过程中遇到的困难\" class=\"headerlink\" title=\"使用过程中遇到的困难\"></a>使用过程中遇到的困难</h3><ul>\n<li><p><strong><code>flask-sse</code> redis连接释放问题</strong><br>该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新<code>new EventSource</code>，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。<br>唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生<code>GeneratorExit</code>异常<br>因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@stream_with_context</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> self.messages(channel=channel):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> str(message)</span><br><span class=\"line\">        self.redis.connection_pool.disconnect()</span><br></pre></td></tr></table></figure>\n<p>  修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。</p>\n<p>  <code>redis连接数查看</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -a pwd -h *.*.*.* info | grep client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>程序阻塞问题</strong><br>由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。</p>\n<p>  另外还有一点现象，当使用flask自带的http服务器进行多线程<code>threaded=True</code>调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次<code>最多</code>能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用<code>celery</code>。</p>\n</li>\n<li><p><strong>网关超时问题</strong><br>网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。<br>  因此需要针对超时异常进行特殊处理。<br>  这里给出<a href=\"https://github.com/BotBotMe/botbot-web/issues/2\" target=\"_blank\" rel=\"noopener\">nginx配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /eventsource &#123;</span><br><span class=\"line\">include uwsgi_params;</span><br><span class=\"line\">uwsgi_pass eventsource-botbot-backend;</span><br><span class=\"line\">uwsgi_buffering off;</span><br><span class=\"line\">chunked_transfer_encoding off;</span><br><span class=\"line\">proxy_cache off;</span><br><span class=\"line\">access_log  /var/log/nginx/eventsource_botbot.access.log;</span><br><span class=\"line\">error_page 504 =200 @eventsource-close-graceful;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location @eventsource-close-graceful &#123;</span><br><span class=\"line\">add_header Content-Type text/event-stream;</span><br><span class=\"line\">return 200;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <code>注意</code>每个nginx网关就需要配置</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/singingwolfboy/flask-sse\" target=\"_blank\" rel=\"noopener\">官方用例</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文用以记录在<code>flask-sse</code>使用中踩到的坑及解决方案。</p></div>","more":"<h3 id=\"当前主流的服务端推送方案\"><a href=\"#当前主流的服务端推送方案\" class=\"headerlink\" title=\"当前主流的服务端推送方案\"></a>当前主流的服务端推送方案</h3><ol>\n<li>客户端短连接轮询</li>\n<li>websocket</li>\n<li>Server Send Event（SSE）</li>\n</ol>\n<p>相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。<br>在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。</p>\n<hr>\n<h3 id=\"使用过程中遇到的困难\"><a href=\"#使用过程中遇到的困难\" class=\"headerlink\" title=\"使用过程中遇到的困难\"></a>使用过程中遇到的困难</h3><ul>\n<li><p><strong><code>flask-sse</code> redis连接释放问题</strong><br>该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新<code>new EventSource</code>，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。<br>唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生<code>GeneratorExit</code>异常<br>因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@stream_with_context</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> self.messages(channel=channel):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> str(message)</span><br><span class=\"line\">        self.redis.connection_pool.disconnect()</span><br></pre></td></tr></table></figure>\n<p>  修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。</p>\n<p>  <code>redis连接数查看</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -a pwd -h *.*.*.* info | grep client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>程序阻塞问题</strong><br>由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。</p>\n<p>  另外还有一点现象，当使用flask自带的http服务器进行多线程<code>threaded=True</code>调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次<code>最多</code>能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用<code>celery</code>。</p>\n</li>\n<li><p><strong>网关超时问题</strong><br>网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。<br>  因此需要针对超时异常进行特殊处理。<br>  这里给出<a href=\"https://github.com/BotBotMe/botbot-web/issues/2\" target=\"_blank\" rel=\"noopener\">nginx配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /eventsource &#123;</span><br><span class=\"line\">include uwsgi_params;</span><br><span class=\"line\">uwsgi_pass eventsource-botbot-backend;</span><br><span class=\"line\">uwsgi_buffering off;</span><br><span class=\"line\">chunked_transfer_encoding off;</span><br><span class=\"line\">proxy_cache off;</span><br><span class=\"line\">access_log  /var/log/nginx/eventsource_botbot.access.log;</span><br><span class=\"line\">error_page 504 =200 @eventsource-close-graceful;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location @eventsource-close-graceful &#123;</span><br><span class=\"line\">add_header Content-Type text/event-stream;</span><br><span class=\"line\">return 200;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <code>注意</code>每个nginx网关就需要配置</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/singingwolfboy/flask-sse\" target=\"_blank\" rel=\"noopener\">官方用例</a></li>\n</ul>"},{"title":"python代码pyc化加密部署","date":"2018-12-30T08:45:56.000Z","_content":"\n{%note info%}\npython不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。\n{%endnote%}\n<!--more-->\n\n### 为什么转换为pyc？\n- pyc官方的解释还请自行google\n- 简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同\n- pyc文件运行效率高于py文件（少了解释器对源码的转换）\n- pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的\n\n### 如何转换为pyc？\n```shell\npython -m compileall (file or dir) -b\n```\n- -b 支持生成pyc文件于当前目录而非`__pycache__`\n\n### 配合jenkins进行自动集成发布\n- 基于flask开发目录\n\n```\n/app\n/conf\n/tests\n...\n```\n\n```shell\n# /bin/sh\n\nfunction timeoutController(){\n    cmd=$1\n    timeout=$2\n    mod=$3\n    count=1\n    while [ $count -le 3 ]; do\n        timeout $timeout $cmd\n        exitCode=$?\n        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then\n            break\n        fi\n\n        if [ $exitCode == 124 ]; then\n            echo \"module: {$mod} timeout {$timeout} s and start to {$count} time retry\"\n        fi\n        count=`expr $count + 1`\n    done\n\n    if [ $exitCode -ne 0 ]; then\n        echo $mod \"=====================>unittest failed\"\n        exit 1\n    fi\n}\n\nfunction code_encrypt(){\n    release_dir=$1\n    pyc_dir=$2\n\n    # release svn del .svn\n    find $release_dir -name \".svn\" | xargs rm -rf\n\n    # svn del pyc\n    cd $pyc_dir\n    svn rm * --force\n    svn ci -m \"pyc delete\"\n\n    # cp release code to pyc && encrypt code\n    cp $release_dir/* $pyc_dir -R\n    python -m compileall . -b\n    find . -name \"*.py\" | xargs rm\n    rm tests/report -rf\n    # replace gunicorn.pyc with gunicorn.py\n    rm $pyc_dir/conf/gunicorn.pyc\n    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/\n\n    # pyc svn commit\n    svn add . --no-ignore --force\n    svn ci -m \"pyc commit\"\n}\n\nfunction main(){\n    echo \"========================== init env =============\"\n    source /root/anaconda3/bin/activate py3\n    release_dir=\"/home/pro/pro_release\"\n    pyc_dir=\"/home/pro/pro_pyc\"\n    release_svn_dir=\"http://*.*.*.*/\"\n\n    # update tag:release code\n    rm $release_dir -rf\n    svn co $release_svn_dir\n\n    echo \"========================== flake8 ===============\"\n    cd $release_dir\n    timeoutController \"flake8 --config=${release_dir}/.config/flake8 ${release_dir}\" 60 \"flake8\"\n\n    echo \"========================== pytest ===============\"\n    cd $release_dir/tests\n    timeoutController \"pytest .\"\n\n    echo \"========================== code encrypt =============\"\n    code_encrypt $release_dir $pyc_dir\n}\n\nmain\n```\n\n{%note warning%}\n- 以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密\n- gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉\n{%endnote%}","source":"_posts/2018-12-30-python代码加密部署.md","raw":"---\ntitle: python代码pyc化加密部署\ndate: 2018-12-30 16:45:56\ntags:\n- python\ncategories:\n- python\n---\n\n{%note info%}\npython不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。\n{%endnote%}\n<!--more-->\n\n### 为什么转换为pyc？\n- pyc官方的解释还请自行google\n- 简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同\n- pyc文件运行效率高于py文件（少了解释器对源码的转换）\n- pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的\n\n### 如何转换为pyc？\n```shell\npython -m compileall (file or dir) -b\n```\n- -b 支持生成pyc文件于当前目录而非`__pycache__`\n\n### 配合jenkins进行自动集成发布\n- 基于flask开发目录\n\n```\n/app\n/conf\n/tests\n...\n```\n\n```shell\n# /bin/sh\n\nfunction timeoutController(){\n    cmd=$1\n    timeout=$2\n    mod=$3\n    count=1\n    while [ $count -le 3 ]; do\n        timeout $timeout $cmd\n        exitCode=$?\n        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then\n            break\n        fi\n\n        if [ $exitCode == 124 ]; then\n            echo \"module: {$mod} timeout {$timeout} s and start to {$count} time retry\"\n        fi\n        count=`expr $count + 1`\n    done\n\n    if [ $exitCode -ne 0 ]; then\n        echo $mod \"=====================>unittest failed\"\n        exit 1\n    fi\n}\n\nfunction code_encrypt(){\n    release_dir=$1\n    pyc_dir=$2\n\n    # release svn del .svn\n    find $release_dir -name \".svn\" | xargs rm -rf\n\n    # svn del pyc\n    cd $pyc_dir\n    svn rm * --force\n    svn ci -m \"pyc delete\"\n\n    # cp release code to pyc && encrypt code\n    cp $release_dir/* $pyc_dir -R\n    python -m compileall . -b\n    find . -name \"*.py\" | xargs rm\n    rm tests/report -rf\n    # replace gunicorn.pyc with gunicorn.py\n    rm $pyc_dir/conf/gunicorn.pyc\n    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/\n\n    # pyc svn commit\n    svn add . --no-ignore --force\n    svn ci -m \"pyc commit\"\n}\n\nfunction main(){\n    echo \"========================== init env =============\"\n    source /root/anaconda3/bin/activate py3\n    release_dir=\"/home/pro/pro_release\"\n    pyc_dir=\"/home/pro/pro_pyc\"\n    release_svn_dir=\"http://*.*.*.*/\"\n\n    # update tag:release code\n    rm $release_dir -rf\n    svn co $release_svn_dir\n\n    echo \"========================== flake8 ===============\"\n    cd $release_dir\n    timeoutController \"flake8 --config=${release_dir}/.config/flake8 ${release_dir}\" 60 \"flake8\"\n\n    echo \"========================== pytest ===============\"\n    cd $release_dir/tests\n    timeoutController \"pytest .\"\n\n    echo \"========================== code encrypt =============\"\n    code_encrypt $release_dir $pyc_dir\n}\n\nmain\n```\n\n{%note warning%}\n- 以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密\n- gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉\n{%endnote%}","slug":"python代码加密部署","published":1,"updated":"2018-12-30T09:58:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmjo000h0tqk3gnkozax","content":"<div class=\"note info\"><p>python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"为什么转换为pyc？\"><a href=\"#为什么转换为pyc？\" class=\"headerlink\" title=\"为什么转换为pyc？\"></a>为什么转换为pyc？</h3><ul>\n<li>pyc官方的解释还请自行google</li>\n<li>简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同</li>\n<li>pyc文件运行效率高于py文件（少了解释器对源码的转换）</li>\n<li>pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的</li>\n</ul>\n<h3 id=\"如何转换为pyc？\"><a href=\"#如何转换为pyc？\" class=\"headerlink\" title=\"如何转换为pyc？\"></a>如何转换为pyc？</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m compileall (file or dir) -b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b 支持生成pyc文件于当前目录而非<code>__pycache__</code></li>\n</ul>\n<h3 id=\"配合jenkins进行自动集成发布\"><a href=\"#配合jenkins进行自动集成发布\" class=\"headerlink\" title=\"配合jenkins进行自动集成发布\"></a>配合jenkins进行自动集成发布</h3><ul>\n<li>基于flask开发目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app</span><br><span class=\"line\">/conf</span><br><span class=\"line\">/tests</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">function timeoutController()&#123;</span><br><span class=\"line\">    cmd=$1</span><br><span class=\"line\">    timeout=$2</span><br><span class=\"line\">    mod=$3</span><br><span class=\"line\">    count=1</span><br><span class=\"line\">    while [ $count -le 3 ]; do</span><br><span class=\"line\">        timeout $timeout $cmd</span><br><span class=\"line\">        exitCode=$?</span><br><span class=\"line\">        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        if [ $exitCode == 124 ]; then</span><br><span class=\"line\">            echo \"module: &#123;$mod&#125; timeout &#123;$timeout&#125; s and start to &#123;$count&#125; time retry\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        count=`expr $count + 1`</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $exitCode -ne 0 ]; then</span><br><span class=\"line\">        echo $mod \"=====================&gt;unittest failed\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function code_encrypt()&#123;</span><br><span class=\"line\">    release_dir=$1</span><br><span class=\"line\">    pyc_dir=$2</span><br><span class=\"line\"></span><br><span class=\"line\">    # release svn del .svn</span><br><span class=\"line\">    find $release_dir -name \".svn\" | xargs rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    # svn del pyc</span><br><span class=\"line\">    cd $pyc_dir</span><br><span class=\"line\">    svn rm * --force</span><br><span class=\"line\">    svn ci -m \"pyc delete\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # cp release code to pyc &amp;&amp; encrypt code</span><br><span class=\"line\">    cp $release_dir/* $pyc_dir -R</span><br><span class=\"line\">    python -m compileall . -b</span><br><span class=\"line\">    find . -name \"*.py\" | xargs rm</span><br><span class=\"line\">    rm tests/report -rf</span><br><span class=\"line\">    # replace gunicorn.pyc with gunicorn.py</span><br><span class=\"line\">    rm $pyc_dir/conf/gunicorn.pyc</span><br><span class=\"line\">    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">    # pyc svn commit</span><br><span class=\"line\">    svn add . --no-ignore --force</span><br><span class=\"line\">    svn ci -m \"pyc commit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function main()&#123;</span><br><span class=\"line\">    echo \"========================== init env =============\"</span><br><span class=\"line\">    source /root/anaconda3/bin/activate py3</span><br><span class=\"line\">    release_dir=\"/home/pro/pro_release\"</span><br><span class=\"line\">    pyc_dir=\"/home/pro/pro_pyc\"</span><br><span class=\"line\">    release_svn_dir=\"http://*.*.*.*/\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # update tag:release code</span><br><span class=\"line\">    rm $release_dir -rf</span><br><span class=\"line\">    svn co $release_svn_dir</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== flake8 ===============\"</span><br><span class=\"line\">    cd $release_dir</span><br><span class=\"line\">    timeoutController \"flake8 --config=$&#123;release_dir&#125;/.config/flake8 $&#123;release_dir&#125;\" 60 \"flake8\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== pytest ===============\"</span><br><span class=\"line\">    cd $release_dir/tests</span><br><span class=\"line\">    timeoutController \"pytest .\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== code encrypt =============\"</span><br><span class=\"line\">    code_encrypt $release_dir $pyc_dir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ul>\n<li>以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密</li>\n<li>gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉</li>\n</ul></div>","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。</p></div>","more":"<h3 id=\"为什么转换为pyc？\"><a href=\"#为什么转换为pyc？\" class=\"headerlink\" title=\"为什么转换为pyc？\"></a>为什么转换为pyc？</h3><ul>\n<li>pyc官方的解释还请自行google</li>\n<li>简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同</li>\n<li>pyc文件运行效率高于py文件（少了解释器对源码的转换）</li>\n<li>pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的</li>\n</ul>\n<h3 id=\"如何转换为pyc？\"><a href=\"#如何转换为pyc？\" class=\"headerlink\" title=\"如何转换为pyc？\"></a>如何转换为pyc？</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m compileall (file or dir) -b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b 支持生成pyc文件于当前目录而非<code>__pycache__</code></li>\n</ul>\n<h3 id=\"配合jenkins进行自动集成发布\"><a href=\"#配合jenkins进行自动集成发布\" class=\"headerlink\" title=\"配合jenkins进行自动集成发布\"></a>配合jenkins进行自动集成发布</h3><ul>\n<li>基于flask开发目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app</span><br><span class=\"line\">/conf</span><br><span class=\"line\">/tests</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">function timeoutController()&#123;</span><br><span class=\"line\">    cmd=$1</span><br><span class=\"line\">    timeout=$2</span><br><span class=\"line\">    mod=$3</span><br><span class=\"line\">    count=1</span><br><span class=\"line\">    while [ $count -le 3 ]; do</span><br><span class=\"line\">        timeout $timeout $cmd</span><br><span class=\"line\">        exitCode=$?</span><br><span class=\"line\">        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        if [ $exitCode == 124 ]; then</span><br><span class=\"line\">            echo \"module: &#123;$mod&#125; timeout &#123;$timeout&#125; s and start to &#123;$count&#125; time retry\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        count=`expr $count + 1`</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $exitCode -ne 0 ]; then</span><br><span class=\"line\">        echo $mod \"=====================&gt;unittest failed\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function code_encrypt()&#123;</span><br><span class=\"line\">    release_dir=$1</span><br><span class=\"line\">    pyc_dir=$2</span><br><span class=\"line\"></span><br><span class=\"line\">    # release svn del .svn</span><br><span class=\"line\">    find $release_dir -name \".svn\" | xargs rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    # svn del pyc</span><br><span class=\"line\">    cd $pyc_dir</span><br><span class=\"line\">    svn rm * --force</span><br><span class=\"line\">    svn ci -m \"pyc delete\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # cp release code to pyc &amp;&amp; encrypt code</span><br><span class=\"line\">    cp $release_dir/* $pyc_dir -R</span><br><span class=\"line\">    python -m compileall . -b</span><br><span class=\"line\">    find . -name \"*.py\" | xargs rm</span><br><span class=\"line\">    rm tests/report -rf</span><br><span class=\"line\">    # replace gunicorn.pyc with gunicorn.py</span><br><span class=\"line\">    rm $pyc_dir/conf/gunicorn.pyc</span><br><span class=\"line\">    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">    # pyc svn commit</span><br><span class=\"line\">    svn add . --no-ignore --force</span><br><span class=\"line\">    svn ci -m \"pyc commit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function main()&#123;</span><br><span class=\"line\">    echo \"========================== init env =============\"</span><br><span class=\"line\">    source /root/anaconda3/bin/activate py3</span><br><span class=\"line\">    release_dir=\"/home/pro/pro_release\"</span><br><span class=\"line\">    pyc_dir=\"/home/pro/pro_pyc\"</span><br><span class=\"line\">    release_svn_dir=\"http://*.*.*.*/\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # update tag:release code</span><br><span class=\"line\">    rm $release_dir -rf</span><br><span class=\"line\">    svn co $release_svn_dir</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== flake8 ===============\"</span><br><span class=\"line\">    cd $release_dir</span><br><span class=\"line\">    timeoutController \"flake8 --config=$&#123;release_dir&#125;/.config/flake8 $&#123;release_dir&#125;\" 60 \"flake8\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== pytest ===============\"</span><br><span class=\"line\">    cd $release_dir/tests</span><br><span class=\"line\">    timeoutController \"pytest .\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== code encrypt =============\"</span><br><span class=\"line\">    code_encrypt $release_dir $pyc_dir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ul>\n<li>以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密</li>\n<li>gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉</li>\n</ul></div>"},{"title":"webserver异常-TooManyOpenFiles","date":"2019-03-10T09:32:36.000Z","_content":"\n\n### 问题现象：\n{%note warning%}\n- webserver服务不可用\n- 查询日志得知异常为\"... Too Many Open Files\"\n- 重启webserver后服务正常可用\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用nginx+gunicorn+flask搭建webserver的运行环境\n- 环境进程文件句柄使用数上线未设置过为1024\n- gunicorn max-connections=2048 workers=9\n{%endnote%}\n***\n\n### 问题分析：\n\n1. ulimit -n 设置过小\n  - 问题原因比较好定位，google一下大概就确定了\n  - 调大open files应该就可以了\n2. gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？\n\t- 找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，`gunicorn max-connections指单个workers`。\n\n***\n\n### 问题解决：\n- 根据性能测试调大open files，并对数据数值添加监控。\n\n***\n\n### 问题总结：\n- **linux open files**\n```\n\t1. 查看系统最大可打开文件数\n\t\tcat /proc/sys/fs/file-max\n\t2. 查看进程最大可打开文件数\n\t\tcat /etc/security/limits.conf\n\t3. 查看指定进程文件打开数\n\t\tlsof -p pid | wc -l \n\t4. 查看gunicorn fork出所有进程的文件打开数\n\t\tlsof -n|awk '{print $1}'|sort|uniq -c|sort -nr|grep gunicorn\n\t5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定\n```\n- **gunicorn**\n```\n\t1. work_connections指gunicorn单进程并发数\n\t2. 若gunicorn worker_connections < 当前并发数，请求至多会超时，而不会报连接文件句柄异常\n\t3、当worker_connections > 1 时 且程序可异步操作越久（sleep），gevent作用越明显\n```\n- **异常再次发生处理步骤**\n```\n\t1. ps -ef |grep gunicorn -> pid\n\t2. cat /proc/pid/limits.conf\n\t3. lsof -p pid |wc -l\n\t4. sudo vi  /etc/security/limits.conf\n\t\tasset soft nofile 10240\n\t\tasset hard nofile 10240\n\t5. restart program && cat /proc/pid/limits.conf\n```\n- **性能测试**\n\t1. 性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。","source":"_posts/2019-03-10-webserver异常-TooManyOpenFiles.md","raw":"---\ntitle: webserver异常-TooManyOpenFiles\ndate: 2019-03-10 17:32:36\ntags:\n- flask\n- 问题分析\n- linux\ncategories:\n- 问题分析\n---\n\n\n### 问题现象：\n{%note warning%}\n- webserver服务不可用\n- 查询日志得知异常为\"... Too Many Open Files\"\n- 重启webserver后服务正常可用\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用nginx+gunicorn+flask搭建webserver的运行环境\n- 环境进程文件句柄使用数上线未设置过为1024\n- gunicorn max-connections=2048 workers=9\n{%endnote%}\n***\n\n### 问题分析：\n\n1. ulimit -n 设置过小\n  - 问题原因比较好定位，google一下大概就确定了\n  - 调大open files应该就可以了\n2. gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？\n\t- 找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，`gunicorn max-connections指单个workers`。\n\n***\n\n### 问题解决：\n- 根据性能测试调大open files，并对数据数值添加监控。\n\n***\n\n### 问题总结：\n- **linux open files**\n```\n\t1. 查看系统最大可打开文件数\n\t\tcat /proc/sys/fs/file-max\n\t2. 查看进程最大可打开文件数\n\t\tcat /etc/security/limits.conf\n\t3. 查看指定进程文件打开数\n\t\tlsof -p pid | wc -l \n\t4. 查看gunicorn fork出所有进程的文件打开数\n\t\tlsof -n|awk '{print $1}'|sort|uniq -c|sort -nr|grep gunicorn\n\t5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定\n```\n- **gunicorn**\n```\n\t1. work_connections指gunicorn单进程并发数\n\t2. 若gunicorn worker_connections < 当前并发数，请求至多会超时，而不会报连接文件句柄异常\n\t3、当worker_connections > 1 时 且程序可异步操作越久（sleep），gevent作用越明显\n```\n- **异常再次发生处理步骤**\n```\n\t1. ps -ef |grep gunicorn -> pid\n\t2. cat /proc/pid/limits.conf\n\t3. lsof -p pid |wc -l\n\t4. sudo vi  /etc/security/limits.conf\n\t\tasset soft nofile 10240\n\t\tasset hard nofile 10240\n\t5. restart program && cat /proc/pid/limits.conf\n```\n- **性能测试**\n\t1. 性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。","slug":"webserver异常-TooManyOpenFiles","published":1,"updated":"2019-03-10T12:09:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmjq000l0tqknbbgeoma","content":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>webserver服务不可用</li>\n<li>查询日志得知异常为”… Too Many Open Files”</li>\n<li>重启webserver后服务正常可用</li>\n</ul></div>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用nginx+gunicorn+flask搭建webserver的运行环境</li>\n<li>环境进程文件句柄使用数上线未设置过为1024</li>\n<li>gunicorn max-connections=2048 workers=9</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li>ulimit -n 设置过小<ul>\n<li>问题原因比较好定位，google一下大概就确定了</li>\n<li>调大open files应该就可以了</li>\n</ul>\n</li>\n<li>gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？<ul>\n<li>找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，<code>gunicorn max-connections指单个workers</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>根据性能测试调大open files，并对数据数值添加监控。</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li><p><strong>linux open files</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统最大可打开文件数</span><br><span class=\"line\">\tcat /proc/sys/fs/file-max</span><br><span class=\"line\">2. 查看进程最大可打开文件数</span><br><span class=\"line\">\tcat /etc/security/limits.conf</span><br><span class=\"line\">3. 查看指定进程文件打开数</span><br><span class=\"line\">\tlsof -p pid | wc -l </span><br><span class=\"line\">4. 查看gunicorn fork出所有进程的文件打开数</span><br><span class=\"line\">\tlsof -n|awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -nr|grep gunicorn</span><br><span class=\"line\">5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>gunicorn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. work_connections指gunicorn单进程并发数</span><br><span class=\"line\">2. 若gunicorn worker_connections &lt; 当前并发数，请求至多会超时，而不会报连接文件句柄异常</span><br><span class=\"line\">3、当worker_connections &gt; 1 时 且程序可异步操作越久（sleep），gevent作用越明显</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异常再次发生处理步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ps -ef |grep gunicorn -&gt; pid</span><br><span class=\"line\">2. cat /proc/pid/limits.conf</span><br><span class=\"line\">3. lsof -p pid |wc -l</span><br><span class=\"line\">4. sudo vi  /etc/security/limits.conf</span><br><span class=\"line\">\tasset soft nofile 10240</span><br><span class=\"line\">\tasset hard nofile 10240</span><br><span class=\"line\">5. restart program &amp;&amp; cat /proc/pid/limits.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>性能测试</strong></p>\n<ol>\n<li>性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>webserver服务不可用</li>\n<li>查询日志得知异常为”… Too Many Open Files”</li>\n<li>重启webserver后服务正常可用</li>\n</ul></div>","more":"<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用nginx+gunicorn+flask搭建webserver的运行环境</li>\n<li>环境进程文件句柄使用数上线未设置过为1024</li>\n<li>gunicorn max-connections=2048 workers=9</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li>ulimit -n 设置过小<ul>\n<li>问题原因比较好定位，google一下大概就确定了</li>\n<li>调大open files应该就可以了</li>\n</ul>\n</li>\n<li>gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？<ul>\n<li>找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，<code>gunicorn max-connections指单个workers</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>根据性能测试调大open files，并对数据数值添加监控。</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li><p><strong>linux open files</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统最大可打开文件数</span><br><span class=\"line\">\tcat /proc/sys/fs/file-max</span><br><span class=\"line\">2. 查看进程最大可打开文件数</span><br><span class=\"line\">\tcat /etc/security/limits.conf</span><br><span class=\"line\">3. 查看指定进程文件打开数</span><br><span class=\"line\">\tlsof -p pid | wc -l </span><br><span class=\"line\">4. 查看gunicorn fork出所有进程的文件打开数</span><br><span class=\"line\">\tlsof -n|awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -nr|grep gunicorn</span><br><span class=\"line\">5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>gunicorn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. work_connections指gunicorn单进程并发数</span><br><span class=\"line\">2. 若gunicorn worker_connections &lt; 当前并发数，请求至多会超时，而不会报连接文件句柄异常</span><br><span class=\"line\">3、当worker_connections &gt; 1 时 且程序可异步操作越久（sleep），gevent作用越明显</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异常再次发生处理步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ps -ef |grep gunicorn -&gt; pid</span><br><span class=\"line\">2. cat /proc/pid/limits.conf</span><br><span class=\"line\">3. lsof -p pid |wc -l</span><br><span class=\"line\">4. sudo vi  /etc/security/limits.conf</span><br><span class=\"line\">\tasset soft nofile 10240</span><br><span class=\"line\">\tasset hard nofile 10240</span><br><span class=\"line\">5. restart program &amp;&amp; cat /proc/pid/limits.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>性能测试</strong></p>\n<ol>\n<li>性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。</li>\n</ol>\n</li>\n</ul>"},{"title":"flask分布式部署及flask-session","date":"2019-03-25T13:12:52.000Z","_content":"\n{%note info%}\n随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。\n{%endnote%}\n<!--more-->\n\n### flask默认的session做了什么\nflask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。\n但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：\n```python\nclass SecureCookieSession(CallbackDict, SessionMixin):\n\t...\nclass SecureCookieSessionInterface(SessionInterface):\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n以上是flask.sessions.py实现的主要框架：\n- SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。\n- SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。\n\n### 常见的分布式部署session解决方案\n\n- 服务器间session复制\nsession复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。\n像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，`缺点`是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。\n- session与服务器绑定\n通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。\n`优点`：无需修改业务代码\n`缺点`：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器\n- 客户端session存储\n即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。\n`优点`：无需改造，flask默认支持\n`缺点`：\n\t- session数据存储在客户端，即使加密也还是一件存在泄露风险的事情\n\t- session数据占用外网带宽\n\t- 受cookie的大小限制，session能记录的数据有限\n- 服务端session统一存储\n对session进行统一的存储，所有服务器共享该存储服务上的数据\n`优点`：服务水平扩展性良好，服务端存储，安全\n`缺点`：\n\t- 每次请求至少需要一次内部网络请求，占用网络带宽\n\t- 需要侵入业务代码\n\n### flask-session服务端session存储\n通过比较不难发现，服务端session统一存储是最合适的解决方案。\n那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包`flask-session`，我们一起看看它的实现：\n代码大概500+行，但我们实际用到的可能就几十行。\n- 首先我们需要选择session寄存的服务，flask-session支持`redis`,`memcached`,`filesystem`,`mongodb`,`sqlalchemy`作为存储介质\n- 以redis举例，再看代码：\n```python\nclass RedisSessionInterface(SessionInterface):\n    serializer = pickle\n    session_class = RedisSession\n\n    def __init__(self, redis, key_prefix, use_signer=False, permanent=True):\n        if redis is None:\n            from redis import Redis\n            redis = Redis()\n        self.redis = redis\n        self.key_prefix = key_prefix\n        self.use_signer = use_signer\n        self.permanent = permanent\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n重写`open_session，save_session`，将session（dict）存储在redis并将session_id（key）返回给客户端\n\n\n### flask http请求-应答完整的数据流\n客户端http请求 \n-> 服务端负载均衡至随机服务器 \n-> 应用上下文入栈(app_ctx) \n-> 请求上下文入栈(request_ctx),同时生成session \n-> 通过request_ctx中的路由信息找到视图函数(view_func) \n-> view_func进行业务处理 \n-> 应用上下文出栈(app_ctx)\n-> 请求上下文出栈(request_ctx) \n-> 保存session或sessino_id进cookie \n-> 返回应答 \n-> 数据写入对应的文件描述符并刷新\n其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。","source":"_posts/2019-03-25-flask分布式部署及flask-session.md","raw":"---\ntitle: flask分布式部署及flask-session\ndate: 2019-03-25 21:12:52\ntags:\n- flask \n- session\n- 分布式\ncategories:\n- flask\n---\n\n{%note info%}\n随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。\n{%endnote%}\n<!--more-->\n\n### flask默认的session做了什么\nflask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。\n但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：\n```python\nclass SecureCookieSession(CallbackDict, SessionMixin):\n\t...\nclass SecureCookieSessionInterface(SessionInterface):\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n以上是flask.sessions.py实现的主要框架：\n- SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。\n- SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。\n\n### 常见的分布式部署session解决方案\n\n- 服务器间session复制\nsession复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。\n像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，`缺点`是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。\n- session与服务器绑定\n通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。\n`优点`：无需修改业务代码\n`缺点`：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器\n- 客户端session存储\n即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。\n`优点`：无需改造，flask默认支持\n`缺点`：\n\t- session数据存储在客户端，即使加密也还是一件存在泄露风险的事情\n\t- session数据占用外网带宽\n\t- 受cookie的大小限制，session能记录的数据有限\n- 服务端session统一存储\n对session进行统一的存储，所有服务器共享该存储服务上的数据\n`优点`：服务水平扩展性良好，服务端存储，安全\n`缺点`：\n\t- 每次请求至少需要一次内部网络请求，占用网络带宽\n\t- 需要侵入业务代码\n\n### flask-session服务端session存储\n通过比较不难发现，服务端session统一存储是最合适的解决方案。\n那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包`flask-session`，我们一起看看它的实现：\n代码大概500+行，但我们实际用到的可能就几十行。\n- 首先我们需要选择session寄存的服务，flask-session支持`redis`,`memcached`,`filesystem`,`mongodb`,`sqlalchemy`作为存储介质\n- 以redis举例，再看代码：\n```python\nclass RedisSessionInterface(SessionInterface):\n    serializer = pickle\n    session_class = RedisSession\n\n    def __init__(self, redis, key_prefix, use_signer=False, permanent=True):\n        if redis is None:\n            from redis import Redis\n            redis = Redis()\n        self.redis = redis\n        self.key_prefix = key_prefix\n        self.use_signer = use_signer\n        self.permanent = permanent\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n重写`open_session，save_session`，将session（dict）存储在redis并将session_id（key）返回给客户端\n\n\n### flask http请求-应答完整的数据流\n客户端http请求 \n-> 服务端负载均衡至随机服务器 \n-> 应用上下文入栈(app_ctx) \n-> 请求上下文入栈(request_ctx),同时生成session \n-> 通过request_ctx中的路由信息找到视图函数(view_func) \n-> view_func进行业务处理 \n-> 应用上下文出栈(app_ctx)\n-> 请求上下文出栈(request_ctx) \n-> 保存session或sessino_id进cookie \n-> 返回应答 \n-> 数据写入对应的文件描述符并刷新\n其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。","slug":"flask分布式部署及flask-session","published":1,"updated":"2019-04-27T00:02:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmjs000n0tqk6ks0t32g","content":"<div class=\"note info\"><p>随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"flask默认的session做了什么\"><a href=\"#flask默认的session做了什么\" class=\"headerlink\" title=\"flask默认的session做了什么\"></a>flask默认的session做了什么</h3><p>flask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。<br>但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSession</span><span class=\"params\">(CallbackDict, SessionMixin)</span>:</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure></p>\n<p>以上是flask.sessions.py实现的主要框架：</p>\n<ul>\n<li>SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。</li>\n<li>SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。</li>\n</ul>\n<h3 id=\"常见的分布式部署session解决方案\"><a href=\"#常见的分布式部署session解决方案\" class=\"headerlink\" title=\"常见的分布式部署session解决方案\"></a>常见的分布式部署session解决方案</h3><ul>\n<li>服务器间session复制<br>session复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。<br>像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，<code>缺点</code>是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。</li>\n<li>session与服务器绑定<br>通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。<br><code>优点</code>：无需修改业务代码<br><code>缺点</code>：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器</li>\n<li>客户端session存储<br>即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。<br><code>优点</code>：无需改造，flask默认支持<br><code>缺点</code>：<ul>\n<li>session数据存储在客户端，即使加密也还是一件存在泄露风险的事情</li>\n<li>session数据占用外网带宽</li>\n<li>受cookie的大小限制，session能记录的数据有限</li>\n</ul>\n</li>\n<li>服务端session统一存储<br>对session进行统一的存储，所有服务器共享该存储服务上的数据<br><code>优点</code>：服务水平扩展性良好，服务端存储，安全<br><code>缺点</code>：<ul>\n<li>每次请求至少需要一次内部网络请求，占用网络带宽</li>\n<li>需要侵入业务代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"flask-session服务端session存储\"><a href=\"#flask-session服务端session存储\" class=\"headerlink\" title=\"flask-session服务端session存储\"></a>flask-session服务端session存储</h3><p>通过比较不难发现，服务端session统一存储是最合适的解决方案。<br>那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包<code>flask-session</code>，我们一起看看它的实现：<br>代码大概500+行，但我们实际用到的可能就几十行。</p>\n<ul>\n<li>首先我们需要选择session寄存的服务，flask-session支持<code>redis</code>,<code>memcached</code>,<code>filesystem</code>,<code>mongodb</code>,<code>sqlalchemy</code>作为存储介质</li>\n<li>以redis举例，再看代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">    serializer = pickle</span><br><span class=\"line\">    session_class = RedisSession</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, redis, key_prefix, use_signer=False, permanent=True)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> redis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\">            redis = Redis()</span><br><span class=\"line\">        self.redis = redis</span><br><span class=\"line\">        self.key_prefix = key_prefix</span><br><span class=\"line\">        self.use_signer = use_signer</span><br><span class=\"line\">        self.permanent = permanent</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>重写<code>open_session，save_session</code>，将session（dict）存储在redis并将session_id（key）返回给客户端</p>\n<h3 id=\"flask-http请求-应答完整的数据流\"><a href=\"#flask-http请求-应答完整的数据流\" class=\"headerlink\" title=\"flask http请求-应答完整的数据流\"></a>flask http请求-应答完整的数据流</h3><p>客户端http请求<br>-&gt; 服务端负载均衡至随机服务器<br>-&gt; 应用上下文入栈(app_ctx)<br>-&gt; 请求上下文入栈(request_ctx),同时生成session<br>-&gt; 通过request_ctx中的路由信息找到视图函数(view_func)<br>-&gt; view_func进行业务处理<br>-&gt; 应用上下文出栈(app_ctx)<br>-&gt; 请求上下文出栈(request_ctx)<br>-&gt; 保存session或sessino_id进cookie<br>-&gt; 返回应答<br>-&gt; 数据写入对应的文件描述符并刷新<br>其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。</p></div>","more":"<h3 id=\"flask默认的session做了什么\"><a href=\"#flask默认的session做了什么\" class=\"headerlink\" title=\"flask默认的session做了什么\"></a>flask默认的session做了什么</h3><p>flask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。<br>但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSession</span><span class=\"params\">(CallbackDict, SessionMixin)</span>:</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure></p>\n<p>以上是flask.sessions.py实现的主要框架：</p>\n<ul>\n<li>SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。</li>\n<li>SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。</li>\n</ul>\n<h3 id=\"常见的分布式部署session解决方案\"><a href=\"#常见的分布式部署session解决方案\" class=\"headerlink\" title=\"常见的分布式部署session解决方案\"></a>常见的分布式部署session解决方案</h3><ul>\n<li>服务器间session复制<br>session复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。<br>像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，<code>缺点</code>是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。</li>\n<li>session与服务器绑定<br>通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。<br><code>优点</code>：无需修改业务代码<br><code>缺点</code>：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器</li>\n<li>客户端session存储<br>即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。<br><code>优点</code>：无需改造，flask默认支持<br><code>缺点</code>：<ul>\n<li>session数据存储在客户端，即使加密也还是一件存在泄露风险的事情</li>\n<li>session数据占用外网带宽</li>\n<li>受cookie的大小限制，session能记录的数据有限</li>\n</ul>\n</li>\n<li>服务端session统一存储<br>对session进行统一的存储，所有服务器共享该存储服务上的数据<br><code>优点</code>：服务水平扩展性良好，服务端存储，安全<br><code>缺点</code>：<ul>\n<li>每次请求至少需要一次内部网络请求，占用网络带宽</li>\n<li>需要侵入业务代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"flask-session服务端session存储\"><a href=\"#flask-session服务端session存储\" class=\"headerlink\" title=\"flask-session服务端session存储\"></a>flask-session服务端session存储</h3><p>通过比较不难发现，服务端session统一存储是最合适的解决方案。<br>那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包<code>flask-session</code>，我们一起看看它的实现：<br>代码大概500+行，但我们实际用到的可能就几十行。</p>\n<ul>\n<li>首先我们需要选择session寄存的服务，flask-session支持<code>redis</code>,<code>memcached</code>,<code>filesystem</code>,<code>mongodb</code>,<code>sqlalchemy</code>作为存储介质</li>\n<li>以redis举例，再看代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">    serializer = pickle</span><br><span class=\"line\">    session_class = RedisSession</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, redis, key_prefix, use_signer=False, permanent=True)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> redis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\">            redis = Redis()</span><br><span class=\"line\">        self.redis = redis</span><br><span class=\"line\">        self.key_prefix = key_prefix</span><br><span class=\"line\">        self.use_signer = use_signer</span><br><span class=\"line\">        self.permanent = permanent</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>重写<code>open_session，save_session</code>，将session（dict）存储在redis并将session_id（key）返回给客户端</p>\n<h3 id=\"flask-http请求-应答完整的数据流\"><a href=\"#flask-http请求-应答完整的数据流\" class=\"headerlink\" title=\"flask http请求-应答完整的数据流\"></a>flask http请求-应答完整的数据流</h3><p>客户端http请求<br>-&gt; 服务端负载均衡至随机服务器<br>-&gt; 应用上下文入栈(app_ctx)<br>-&gt; 请求上下文入栈(request_ctx),同时生成session<br>-&gt; 通过request_ctx中的路由信息找到视图函数(view_func)<br>-&gt; view_func进行业务处理<br>-&gt; 应用上下文出栈(app_ctx)<br>-&gt; 请求上下文出栈(request_ctx)<br>-&gt; 保存session或sessino_id进cookie<br>-&gt; 返回应答<br>-&gt; 数据写入对应的文件描述符并刷新<br>其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。</p>"},{"title":"pycharm远程调试","date":"2019-04-27T00:00:34.000Z","_content":"\n{%note info%}\npycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。\n请注意文中介绍的所有功能仅出现在pycharm专业版版中。\n{%endnote%}\n<!--more-->\n\n## 前置\n- `File`->`Settings`->`Project`->`Project Interpreter`->`add`\n- 配置mapping，本地代码与远程代码的映射，`此步骤是必须的`，方式可以通过挂载或者Tool->Configure->SFTP\n- Interpreter设置完后请确认`External Libraries`->`Remote Libraries`生成，若未出现，重启pycharm或许有奇迹\n\n## SSL Interpreter\n![pycharm.ssh.png](https://i.loli.net/2019/05/04/5ccd05b56616c.png)\n\n这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取`Remote Libraries`，从而无法远程debug\n## Docker\n- 开启docker守护进程的API调用\n- mapping需要另外挂载\n![pycharm.docker.png](https://i.loli.net/2019/05/04/5ccd06162dfdb.png)\n\n## Docker Compose（推荐）\n- mapping挂载可以直接在compose文件中指定\n- 镜像建议通过image，若为build将会每次都重新构建\n![pycharm.docker-compose.png](https://i.loli.net/2019/05/04/5ccd0605cbe19.png)\n\n```\nversion: \"3\"\nservices:\n\n  centos:\n    # build:\n    #   context: .\n    #   dockerfile: Dockerfile.centos\n    image: zipee/centos:latest\n    command: sh\n    volumes:\n      - E:\\code\\python3\\:/var/www/\n    ports:\n      - \"5000:5000\"\n    links:\n      - redis\n\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n\n```\n\n## celery remote-debug\n\n由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解\n\n简单的celery代码如下：\n```\nfrom celery import Celery\n\napp = Celery('simple', broker='redis://redis:6379/0')\n\n@app.task()\ndef add(x, y):\n    return x + y\n```\n\n配置celery的启动命令：\n![pycharm.celery.png](https://i.loli.net/2019/05/04/5ccd0ebb7816c.png)\n\n使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！","source":"_posts/2019-04-27-pycharm远程调试.md","raw":"---\ntitle: pycharm远程调试\ndate: 2019-04-27 08:00:34\ntags:\n- python \n- coding-tools\ncategories:\n- coding-tools\n---\n\n{%note info%}\npycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。\n请注意文中介绍的所有功能仅出现在pycharm专业版版中。\n{%endnote%}\n<!--more-->\n\n## 前置\n- `File`->`Settings`->`Project`->`Project Interpreter`->`add`\n- 配置mapping，本地代码与远程代码的映射，`此步骤是必须的`，方式可以通过挂载或者Tool->Configure->SFTP\n- Interpreter设置完后请确认`External Libraries`->`Remote Libraries`生成，若未出现，重启pycharm或许有奇迹\n\n## SSL Interpreter\n![pycharm.ssh.png](https://i.loli.net/2019/05/04/5ccd05b56616c.png)\n\n这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取`Remote Libraries`，从而无法远程debug\n## Docker\n- 开启docker守护进程的API调用\n- mapping需要另外挂载\n![pycharm.docker.png](https://i.loli.net/2019/05/04/5ccd06162dfdb.png)\n\n## Docker Compose（推荐）\n- mapping挂载可以直接在compose文件中指定\n- 镜像建议通过image，若为build将会每次都重新构建\n![pycharm.docker-compose.png](https://i.loli.net/2019/05/04/5ccd0605cbe19.png)\n\n```\nversion: \"3\"\nservices:\n\n  centos:\n    # build:\n    #   context: .\n    #   dockerfile: Dockerfile.centos\n    image: zipee/centos:latest\n    command: sh\n    volumes:\n      - E:\\code\\python3\\:/var/www/\n    ports:\n      - \"5000:5000\"\n    links:\n      - redis\n\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n\n```\n\n## celery remote-debug\n\n由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解\n\n简单的celery代码如下：\n```\nfrom celery import Celery\n\napp = Celery('simple', broker='redis://redis:6379/0')\n\n@app.task()\ndef add(x, y):\n    return x + y\n```\n\n配置celery的启动命令：\n![pycharm.celery.png](https://i.loli.net/2019/05/04/5ccd0ebb7816c.png)\n\n使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！","slug":"pycharm远程调试","published":1,"updated":"2019-05-04T04:05:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmjw000o0tqkvjm92moh","content":"<div class=\"note info\"><p>pycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。<br>请注意文中介绍的所有功能仅出现在pycharm专业版版中。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><ul>\n<li><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Project</code>-&gt;<code>Project Interpreter</code>-&gt;<code>add</code></li>\n<li>配置mapping，本地代码与远程代码的映射，<code>此步骤是必须的</code>，方式可以通过挂载或者Tool-&gt;Configure-&gt;SFTP</li>\n<li>Interpreter设置完后请确认<code>External Libraries</code>-&gt;<code>Remote Libraries</code>生成，若未出现，重启pycharm或许有奇迹</li>\n</ul>\n<h2 id=\"SSL-Interpreter\"><a href=\"#SSL-Interpreter\" class=\"headerlink\" title=\"SSL Interpreter\"></a>SSL Interpreter</h2><p><img src=\"https://i.loli.net/2019/05/04/5ccd05b56616c.png\" alt=\"pycharm.ssh.png\"></p>\n<p>这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取<code>Remote Libraries</code>，从而无法远程debug</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>开启docker守护进程的API调用</li>\n<li>mapping需要另外挂载<br><img src=\"https://i.loli.net/2019/05/04/5ccd06162dfdb.png\" alt=\"pycharm.docker.png\"></li>\n</ul>\n<h2 id=\"Docker-Compose（推荐）\"><a href=\"#Docker-Compose（推荐）\" class=\"headerlink\" title=\"Docker Compose（推荐）\"></a>Docker Compose（推荐）</h2><ul>\n<li>mapping挂载可以直接在compose文件中指定</li>\n<li>镜像建议通过image，若为build将会每次都重新构建<br><img src=\"https://i.loli.net/2019/05/04/5ccd0605cbe19.png\" alt=\"pycharm.docker-compose.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  centos:</span><br><span class=\"line\">    # build:</span><br><span class=\"line\">    #   context: .</span><br><span class=\"line\">    #   dockerfile: Dockerfile.centos</span><br><span class=\"line\">    image: zipee/centos:latest</span><br><span class=\"line\">    command: sh</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - E:\\code\\python3\\:/var/www/</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5000:5000&quot;</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - redis</span><br><span class=\"line\"></span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    image: &quot;redis:alpine&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6379:6379&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"celery-remote-debug\"><a href=\"#celery-remote-debug\" class=\"headerlink\" title=\"celery remote-debug\"></a>celery remote-debug</h2><p>由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解</p>\n<p>简单的celery代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery import Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&apos;simple&apos;, broker=&apos;redis://redis:6379/0&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task()</span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    return x + y</span><br></pre></td></tr></table></figure></p>\n<p>配置celery的启动命令：<br><img src=\"https://i.loli.net/2019/05/04/5ccd0ebb7816c.png\" alt=\"pycharm.celery.png\"></p>\n<p>使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>pycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。<br>请注意文中介绍的所有功能仅出现在pycharm专业版版中。</p></div>","more":"<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><ul>\n<li><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Project</code>-&gt;<code>Project Interpreter</code>-&gt;<code>add</code></li>\n<li>配置mapping，本地代码与远程代码的映射，<code>此步骤是必须的</code>，方式可以通过挂载或者Tool-&gt;Configure-&gt;SFTP</li>\n<li>Interpreter设置完后请确认<code>External Libraries</code>-&gt;<code>Remote Libraries</code>生成，若未出现，重启pycharm或许有奇迹</li>\n</ul>\n<h2 id=\"SSL-Interpreter\"><a href=\"#SSL-Interpreter\" class=\"headerlink\" title=\"SSL Interpreter\"></a>SSL Interpreter</h2><p><img src=\"https://i.loli.net/2019/05/04/5ccd05b56616c.png\" alt=\"pycharm.ssh.png\"></p>\n<p>这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取<code>Remote Libraries</code>，从而无法远程debug</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>开启docker守护进程的API调用</li>\n<li>mapping需要另外挂载<br><img src=\"https://i.loli.net/2019/05/04/5ccd06162dfdb.png\" alt=\"pycharm.docker.png\"></li>\n</ul>\n<h2 id=\"Docker-Compose（推荐）\"><a href=\"#Docker-Compose（推荐）\" class=\"headerlink\" title=\"Docker Compose（推荐）\"></a>Docker Compose（推荐）</h2><ul>\n<li>mapping挂载可以直接在compose文件中指定</li>\n<li>镜像建议通过image，若为build将会每次都重新构建<br><img src=\"https://i.loli.net/2019/05/04/5ccd0605cbe19.png\" alt=\"pycharm.docker-compose.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  centos:</span><br><span class=\"line\">    # build:</span><br><span class=\"line\">    #   context: .</span><br><span class=\"line\">    #   dockerfile: Dockerfile.centos</span><br><span class=\"line\">    image: zipee/centos:latest</span><br><span class=\"line\">    command: sh</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - E:\\code\\python3\\:/var/www/</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5000:5000&quot;</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - redis</span><br><span class=\"line\"></span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    image: &quot;redis:alpine&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6379:6379&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"celery-remote-debug\"><a href=\"#celery-remote-debug\" class=\"headerlink\" title=\"celery remote-debug\"></a>celery remote-debug</h2><p>由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解</p>\n<p>简单的celery代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery import Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&apos;simple&apos;, broker=&apos;redis://redis:6379/0&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task()</span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    return x + y</span><br></pre></td></tr></table></figure></p>\n<p>配置celery的启动命令：<br><img src=\"https://i.loli.net/2019/05/04/5ccd0ebb7816c.png\" alt=\"pycharm.celery.png\"></p>\n<p>使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！</p>"},{"title":"python程序员开发规范","date":"2019-06-09T07:12:51.000Z","_content":"\n\n{%note info%}\n本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。\n{%endnote%}\n<!--more-->\n\n## flake8\n- 基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。\n- 安装 `pip install flake8`\n- 指定文件检查 `flake8 path/code.py`\n- 指定目录检查 `flake8 path`\n- 忽略指定错误 `flake8 --ignore E24,W504 path`\n- 指定配置文件 `flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）`\n- 代码指定行忽略检查 `# noqa`\n- [异常快速定位](https://lintlyci.github.io/Flake8Rules/)\n\n**配置文件模版**：\n```\n[flake8]\nignore =\n    E203 # whitespace before ':'\n    E741 # ambiguous variable name 'l'\nfilename =\nexclude =\nmax-line-length = 89\nmax-complexity = 10  # 指定代码最高复杂度\n\n```\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.flake8.png](https://i.loli.net/2019/06/09/5cfcc0aac588786191.png)\n\n## black\n- flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑\n- 基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，\"产品来告诉你你真正想要的\"（产品决定需求）\n- 安装 `pip install black`\n- black --diff path/code.py `输出格式化差异`\n- black path/code.py `自动格式代码`（简单暴力）\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.black.png](https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png)\n\n\n## 配合使用pre-commit\n- 安装 `pip install pre_commit`\n- 创建配置文件 `touch .pre-commit-config.yaml`\n- 初始化 `pre-commit install`\n- 垃圾回收 `pre-commit gc`\n\n**配置模版**：\n```\nrepos:\n-   repo: https://github.com/ambv/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3.6\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.2.3\n    hooks:\n    - id: flake8\n\n```","source":"_posts/2019-06-09-python程序员开发规范.md","raw":"---\ntitle: python程序员开发规范\ndate: 2019-06-09 15:12:51\ntags:\n- python\ncategories:\n---\n\n\n{%note info%}\n本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。\n{%endnote%}\n<!--more-->\n\n## flake8\n- 基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。\n- 安装 `pip install flake8`\n- 指定文件检查 `flake8 path/code.py`\n- 指定目录检查 `flake8 path`\n- 忽略指定错误 `flake8 --ignore E24,W504 path`\n- 指定配置文件 `flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）`\n- 代码指定行忽略检查 `# noqa`\n- [异常快速定位](https://lintlyci.github.io/Flake8Rules/)\n\n**配置文件模版**：\n```\n[flake8]\nignore =\n    E203 # whitespace before ':'\n    E741 # ambiguous variable name 'l'\nfilename =\nexclude =\nmax-line-length = 89\nmax-complexity = 10  # 指定代码最高复杂度\n\n```\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.flake8.png](https://i.loli.net/2019/06/09/5cfcc0aac588786191.png)\n\n## black\n- flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑\n- 基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，\"产品来告诉你你真正想要的\"（产品决定需求）\n- 安装 `pip install black`\n- black --diff path/code.py `输出格式化差异`\n- black path/code.py `自动格式代码`（简单暴力）\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.black.png](https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png)\n\n\n## 配合使用pre-commit\n- 安装 `pip install pre_commit`\n- 创建配置文件 `touch .pre-commit-config.yaml`\n- 初始化 `pre-commit install`\n- 垃圾回收 `pre-commit gc`\n\n**配置模版**：\n```\nrepos:\n-   repo: https://github.com/ambv/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3.6\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.2.3\n    hooks:\n    - id: flake8\n\n```","slug":"python程序员开发规范","published":1,"updated":"2019-06-09T08:49:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmjy000r0tqkmxwrej73","content":"<div class=\"note info\"><p>本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"flake8\"><a href=\"#flake8\" class=\"headerlink\" title=\"flake8\"></a>flake8</h2><ul>\n<li>基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。</li>\n<li>安装 <code>pip install flake8</code></li>\n<li>指定文件检查 <code>flake8 path/code.py</code></li>\n<li>指定目录检查 <code>flake8 path</code></li>\n<li>忽略指定错误 <code>flake8 --ignore E24,W504 path</code></li>\n<li>指定配置文件 <code>flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）</code></li>\n<li>代码指定行忽略检查 <code># noqa</code></li>\n<li><a href=\"https://lintlyci.github.io/Flake8Rules/\" target=\"_blank\" rel=\"noopener\">异常快速定位</a></li>\n</ul>\n<p><strong>配置文件模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flake8]</span><br><span class=\"line\">ignore =</span><br><span class=\"line\">    E203 # whitespace before &apos;:&apos;</span><br><span class=\"line\">    E741 # ambiguous variable name &apos;l&apos;</span><br><span class=\"line\">filename =</span><br><span class=\"line\">exclude =</span><br><span class=\"line\">max-line-length = 89</span><br><span class=\"line\">max-complexity = 10  # 指定代码最高复杂度</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac588786191.png\" alt=\"pycharm.flake8.png\"></p>\n<h2 id=\"black\"><a href=\"#black\" class=\"headerlink\" title=\"black\"></a>black</h2><ul>\n<li>flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑</li>\n<li>基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，”产品来告诉你你真正想要的”（产品决定需求）</li>\n<li>安装 <code>pip install black</code></li>\n<li>black –diff path/code.py <code>输出格式化差异</code></li>\n<li>black path/code.py <code>自动格式代码</code>（简单暴力）</li>\n</ul>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png\" alt=\"pycharm.black.png\"></p>\n<h2 id=\"配合使用pre-commit\"><a href=\"#配合使用pre-commit\" class=\"headerlink\" title=\"配合使用pre-commit\"></a>配合使用pre-commit</h2><ul>\n<li>安装 <code>pip install pre_commit</code></li>\n<li>创建配置文件 <code>touch .pre-commit-config.yaml</code></li>\n<li>初始化 <code>pre-commit install</code></li>\n<li>垃圾回收 <code>pre-commit gc</code></li>\n</ul>\n<p><strong>配置模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repos:</span><br><span class=\"line\">-   repo: https://github.com/ambv/black</span><br><span class=\"line\">    rev: stable</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: black</span><br><span class=\"line\">      language_version: python3.6</span><br><span class=\"line\">-   repo: https://github.com/pre-commit/pre-commit-hooks</span><br><span class=\"line\">    rev: v2.2.3</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: flake8</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。</p></div>","more":"<h2 id=\"flake8\"><a href=\"#flake8\" class=\"headerlink\" title=\"flake8\"></a>flake8</h2><ul>\n<li>基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。</li>\n<li>安装 <code>pip install flake8</code></li>\n<li>指定文件检查 <code>flake8 path/code.py</code></li>\n<li>指定目录检查 <code>flake8 path</code></li>\n<li>忽略指定错误 <code>flake8 --ignore E24,W504 path</code></li>\n<li>指定配置文件 <code>flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）</code></li>\n<li>代码指定行忽略检查 <code># noqa</code></li>\n<li><a href=\"https://lintlyci.github.io/Flake8Rules/\" target=\"_blank\" rel=\"noopener\">异常快速定位</a></li>\n</ul>\n<p><strong>配置文件模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flake8]</span><br><span class=\"line\">ignore =</span><br><span class=\"line\">    E203 # whitespace before &apos;:&apos;</span><br><span class=\"line\">    E741 # ambiguous variable name &apos;l&apos;</span><br><span class=\"line\">filename =</span><br><span class=\"line\">exclude =</span><br><span class=\"line\">max-line-length = 89</span><br><span class=\"line\">max-complexity = 10  # 指定代码最高复杂度</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac588786191.png\" alt=\"pycharm.flake8.png\"></p>\n<h2 id=\"black\"><a href=\"#black\" class=\"headerlink\" title=\"black\"></a>black</h2><ul>\n<li>flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑</li>\n<li>基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，”产品来告诉你你真正想要的”（产品决定需求）</li>\n<li>安装 <code>pip install black</code></li>\n<li>black –diff path/code.py <code>输出格式化差异</code></li>\n<li>black path/code.py <code>自动格式代码</code>（简单暴力）</li>\n</ul>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png\" alt=\"pycharm.black.png\"></p>\n<h2 id=\"配合使用pre-commit\"><a href=\"#配合使用pre-commit\" class=\"headerlink\" title=\"配合使用pre-commit\"></a>配合使用pre-commit</h2><ul>\n<li>安装 <code>pip install pre_commit</code></li>\n<li>创建配置文件 <code>touch .pre-commit-config.yaml</code></li>\n<li>初始化 <code>pre-commit install</code></li>\n<li>垃圾回收 <code>pre-commit gc</code></li>\n</ul>\n<p><strong>配置模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repos:</span><br><span class=\"line\">-   repo: https://github.com/ambv/black</span><br><span class=\"line\">    rev: stable</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: black</span><br><span class=\"line\">      language_version: python3.6</span><br><span class=\"line\">-   repo: https://github.com/pre-commit/pre-commit-hooks</span><br><span class=\"line\">    rev: v2.2.3</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: flake8</span><br></pre></td></tr></table></figure></p>"},{"title":"hexo容器化部署","date":"2019-12-22T14:09:24.000Z","_content":"\n{%note info%}\nhexo容器化部署，从此再无系统环境迁移的烦恼。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 本文介绍从hexo windows环境改造为docker容器化运行环境。\n\n## 改造过程\nhexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。\n- 本着一切从简原则，直接搜了[dockerhub](https://hub.docker.com/search?q=hexo&type=image)，选了个最多下载的[ipple1986/hexo\n](https://hub.docker.com/r/ipple1986/hexo/dockerfile)，发现直接拉取镜像是可以用的：\n\n```bash\ndocker pull ipple1986/hexo\n```\n- 但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性\n- 于是拿着对方的dockerfile尝试重新构建镜像\n\n```\nFROM centos:7\nENV LANG C.UTF-8\nLABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn\nWORKDIR /opt/hexo\nRUN yum install -y  epel-release && \\\nyum install -y nodejs && npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo-cli -g  && hexo init ipple1986 && cd ipple1986 && npm install\nWORKDIR ipple1986\nEXPOSE 4000\nENTRYPOINT [\"hexo\",\"server\"]\n\n```\n- 结果hexo使用直接报错\n\n![nodejs版本过低异常.png](https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png)\n- google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可\n\n```\ncurl --location https://rpm.nodesource.com/setup_10.x | bash\n```\n- 于是，最终的dockerfile为：\n\n```\nFROM centos:7\nENV LC_ALL en_US.UTF-8\nENV TZ=Asia/Shanghai\n\nLABEL maintainer=\"liwei <839728919@qq.com>\"\n\nWORKDIR /opt/hexo\nRUN curl --location https://rpm.nodesource.com/setup_10.x | bash && \\\nyum install -y epel-release nodejs git && \\\nnpm config set registry https://registry.npm.taobao.org && \\\nnpm install hexo-cli -g\n\nEXPOSE 4000\nCMD [\"hexo\", \"server\"]\n```\n\n- 使用指令如下：\n\n```bash\n# 编译镜像\ndocker build -t blog .\n\n# 运行容器\ndocker run -it -v your-code-path:/opt/hexo --name blog blog:latest\n\n# 进入容器\ndocker exec -it blog bash\n\n# hexo部署\nhexo d # 注意需要配置git，亦可手动输入账号密码\n```\n\n## 其他问题\n- hexo在其他主机上的docker容器中`hexo d`部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并`hexo g -d`，成功修复\n","source":"_posts/2019-12-22-hexo容器化部署.md","raw":"---\ntitle: hexo容器化部署\ndate: 2019-12-22 22:09:24\ntags:\n- hexo\ncategories:\n---\n\n{%note info%}\nhexo容器化部署，从此再无系统环境迁移的烦恼。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 本文介绍从hexo windows环境改造为docker容器化运行环境。\n\n## 改造过程\nhexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。\n- 本着一切从简原则，直接搜了[dockerhub](https://hub.docker.com/search?q=hexo&type=image)，选了个最多下载的[ipple1986/hexo\n](https://hub.docker.com/r/ipple1986/hexo/dockerfile)，发现直接拉取镜像是可以用的：\n\n```bash\ndocker pull ipple1986/hexo\n```\n- 但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性\n- 于是拿着对方的dockerfile尝试重新构建镜像\n\n```\nFROM centos:7\nENV LANG C.UTF-8\nLABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn\nWORKDIR /opt/hexo\nRUN yum install -y  epel-release && \\\nyum install -y nodejs && npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo-cli -g  && hexo init ipple1986 && cd ipple1986 && npm install\nWORKDIR ipple1986\nEXPOSE 4000\nENTRYPOINT [\"hexo\",\"server\"]\n\n```\n- 结果hexo使用直接报错\n\n![nodejs版本过低异常.png](https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png)\n- google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可\n\n```\ncurl --location https://rpm.nodesource.com/setup_10.x | bash\n```\n- 于是，最终的dockerfile为：\n\n```\nFROM centos:7\nENV LC_ALL en_US.UTF-8\nENV TZ=Asia/Shanghai\n\nLABEL maintainer=\"liwei <839728919@qq.com>\"\n\nWORKDIR /opt/hexo\nRUN curl --location https://rpm.nodesource.com/setup_10.x | bash && \\\nyum install -y epel-release nodejs git && \\\nnpm config set registry https://registry.npm.taobao.org && \\\nnpm install hexo-cli -g\n\nEXPOSE 4000\nCMD [\"hexo\", \"server\"]\n```\n\n- 使用指令如下：\n\n```bash\n# 编译镜像\ndocker build -t blog .\n\n# 运行容器\ndocker run -it -v your-code-path:/opt/hexo --name blog blog:latest\n\n# 进入容器\ndocker exec -it blog bash\n\n# hexo部署\nhexo d # 注意需要配置git，亦可手动输入账号密码\n```\n\n## 其他问题\n- hexo在其他主机上的docker容器中`hexo d`部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并`hexo g -d`，成功修复\n","slug":"hexo容器化部署","published":1,"updated":"2019-12-28T09:06:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmjz000t0tqkczx1bj5t","content":"<div class=\"note info\"><p>hexo容器化部署，从此再无系统环境迁移的烦恼。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>本文介绍从hexo windows环境改造为docker容器化运行环境。</li>\n</ul>\n<h2 id=\"改造过程\"><a href=\"#改造过程\" class=\"headerlink\" title=\"改造过程\"></a>改造过程</h2><p>hexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。</p>\n<ul>\n<li>本着一切从简原则，直接搜了<a href=\"https://hub.docker.com/search?q=hexo&amp;type=image\" target=\"_blank\" rel=\"noopener\">dockerhub</a>，选了个最多下载的<a href=\"https://hub.docker.com/r/ipple1986/hexo/dockerfile\" target=\"_blank\" rel=\"noopener\">ipple1986/hexo\n</a>，发现直接拉取镜像是可以用的：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ipple1986/hexo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性</li>\n<li>于是拿着对方的dockerfile尝试重新构建镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">LABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn</span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN yum install -y  epel-release &amp;&amp; \\</span><br><span class=\"line\">yum install -y nodejs &amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-cli -g  &amp;&amp; hexo init ipple1986 &amp;&amp; cd ipple1986 &amp;&amp; npm install</span><br><span class=\"line\">WORKDIR ipple1986</span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">ENTRYPOINT [&quot;hexo&quot;,&quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果hexo使用直接报错</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png\" alt=\"nodejs版本过低异常.png\"></p>\n<ul>\n<li>google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location https://rpm.nodesource.com/setup_10.x | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>于是，最终的dockerfile为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LC_ALL en_US.UTF-8</span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;liwei &lt;839728919@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN curl --location https://rpm.nodesource.com/setup_10.x | bash &amp;&amp; \\</span><br><span class=\"line\">yum install -y epel-release nodejs git &amp;&amp; \\</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org &amp;&amp; \\</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">CMD [&quot;hexo&quot;, &quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用指令如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译镜像</span></span><br><span class=\"line\">docker build -t blog .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">docker run -it -v your-code-path:/opt/hexo --name blog blog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it blog bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo部署</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 注意需要配置git，亦可手动输入账号密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>hexo在其他主机上的docker容器中<code>hexo d</code>部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并<code>hexo g -d</code>，成功修复</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>hexo容器化部署，从此再无系统环境迁移的烦恼。</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>本文介绍从hexo windows环境改造为docker容器化运行环境。</li>\n</ul>\n<h2 id=\"改造过程\"><a href=\"#改造过程\" class=\"headerlink\" title=\"改造过程\"></a>改造过程</h2><p>hexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。</p>\n<ul>\n<li>本着一切从简原则，直接搜了<a href=\"https://hub.docker.com/search?q=hexo&amp;type=image\" target=\"_blank\" rel=\"noopener\">dockerhub</a>，选了个最多下载的<a href=\"https://hub.docker.com/r/ipple1986/hexo/dockerfile\" target=\"_blank\" rel=\"noopener\">ipple1986/hexo\n</a>，发现直接拉取镜像是可以用的：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ipple1986/hexo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性</li>\n<li>于是拿着对方的dockerfile尝试重新构建镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">LABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn</span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN yum install -y  epel-release &amp;&amp; \\</span><br><span class=\"line\">yum install -y nodejs &amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-cli -g  &amp;&amp; hexo init ipple1986 &amp;&amp; cd ipple1986 &amp;&amp; npm install</span><br><span class=\"line\">WORKDIR ipple1986</span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">ENTRYPOINT [&quot;hexo&quot;,&quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果hexo使用直接报错</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png\" alt=\"nodejs版本过低异常.png\"></p>\n<ul>\n<li>google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location https://rpm.nodesource.com/setup_10.x | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>于是，最终的dockerfile为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LC_ALL en_US.UTF-8</span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;liwei &lt;839728919@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN curl --location https://rpm.nodesource.com/setup_10.x | bash &amp;&amp; \\</span><br><span class=\"line\">yum install -y epel-release nodejs git &amp;&amp; \\</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org &amp;&amp; \\</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">CMD [&quot;hexo&quot;, &quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用指令如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译镜像</span></span><br><span class=\"line\">docker build -t blog .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">docker run -it -v your-code-path:/opt/hexo --name blog blog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it blog bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo部署</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 注意需要配置git，亦可手动输入账号密码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>hexo在其他主机上的docker容器中<code>hexo d</code>部署失败（gitpage bulid failed），已比对发现是.deploy_git没有同步更新，手动删除并<code>hexo g -d</code>，成功修复</li>\n</ul>"},{"title":"数据结构与算法总结","date":"2019-06-16T08:02:18.000Z","_content":"\n{%note info%}\n总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。\n{%endnote%}\n<!--more-->\n\n## 图例\n![优劣示意图.png](https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png)\n\n## 数据结构\n![数据结构复杂度.png](https://i.loli.net/2019/06/16/5d05fac1e674389225.png)\n\n## 排序算法\n![排序复杂度.png](https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png)\n\n## 堆操作\n![堆.png](https://i.loli.net/2019/06/16/5d05fac19111547738.png)","source":"_posts/2019-06-16-数据结构与算法总结.md","raw":"---\ntitle: 数据结构与算法总结\ndate: 2019-06-16 16:02:18\ntags:\n- algorithm\n- datastructure\ncategories:\n- algorithm&datastructure\n---\n\n{%note info%}\n总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。\n{%endnote%}\n<!--more-->\n\n## 图例\n![优劣示意图.png](https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png)\n\n## 数据结构\n![数据结构复杂度.png](https://i.loli.net/2019/06/16/5d05fac1e674389225.png)\n\n## 排序算法\n![排序复杂度.png](https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png)\n\n## 堆操作\n![堆.png](https://i.loli.net/2019/06/16/5d05fac19111547738.png)","slug":"数据结构与算法总结","published":1,"updated":"2019-06-16T08:19:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmk2000x0tqkf51blnbj","content":"<div class=\"note info\"><p>总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png\" alt=\"优劣示意图.png\"></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1e674389225.png\" alt=\"数据结构复杂度.png\"></p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png\" alt=\"排序复杂度.png\"></p>\n<h2 id=\"堆操作\"><a href=\"#堆操作\" class=\"headerlink\" title=\"堆操作\"></a>堆操作</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac19111547738.png\" alt=\"堆.png\"></p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。</p></div>","more":"<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png\" alt=\"优劣示意图.png\"></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1e674389225.png\" alt=\"数据结构复杂度.png\"></p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png\" alt=\"排序复杂度.png\"></p>\n<h2 id=\"堆操作\"><a href=\"#堆操作\" class=\"headerlink\" title=\"堆操作\"></a>堆操作</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac19111547738.png\" alt=\"堆.png\"></p>"},{"title":"flask-caching源码浅析","date":"2019-07-14T11:49:26.000Z","_content":"\n{%note info%}\nflask-caching源码浅析。\n{%endnote%}\n<!--more-->\n\n## 简介\n- flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。\n- flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：\n\t- simple 程序内部缓存\n\t- filesystem 系统文件缓存\n\t- redis\n\t- redissentinel\n\t- uwsgi\n\t- memcached\n\t- gaememcached\n\t- saslmemcached\n\t- spreadsaslmemcached\n\n## 简单使用\n```python\nfrom flask_caching import Cache\ncache = Cache()\n\nconfig = {\"CACHE_TYPE\": \"redis\", \"CACHE_REDIS_URL\": app.config[\"CACHE_REDIS_URL\"]}\n    cache.init_app(app, config=config)\n\n@app.route('/cache_test/<int:id>')\n@cache.cached(timeout=60 * 5)\ndef cache_test(id):\n    from flask import request\n    got_data = request.get_json()\n    import time\n\n    return f\"{got_data}.{id}.{time.time()}\"\n\n@cache.memoize(timeout=60 * 5)\ndef f_cache(a):\n    return a\n\n@app.route('/cache_test2/<int:id>')\ndef cache_test2(id):\n    return f\"{f_cache(id)}\"\n\n```\n\n\n## cache memoize源码解析\n### **cached**\n\n```python\n    def cached(\n        self,\n        timeout=None,\n        key_prefix=\"view/%s\",\n        unless=None,\n        forced_update=None,\n        response_filter=None,\n        query_string=False,\n        hash_method=hashlib.md5,\n    ):\n        \"\"\"...\"\"\"\n\n        def decorator(f):\n            @functools.wraps(f)\n            def decorated_function(*args, **kwargs):...\n\n                if not found:\n                    rv = f(*args, **kwargs)\n\n                    if response_filter is None or response_filter(rv):\n                        try:\n                            self.cache.set(\n                                cache_key,\n                                rv,\n                                timeout=decorated_function.cache_timeout,\n                            )\n                        except Exception:\n                            if self.app.debug:\n                                raise\n                            logger.exception(\n                                \"Exception possibly due to cache backend.\"\n                            )\n                return rv\n\n            def make_cache_key(*args, **kwargs):...\n\n            def _make_cache_key_query_string():...\n\n            def _make_cache_key(args, kwargs, use_request):...\n\n            decorated_function.uncached = f\n            decorated_function.cache_timeout = timeout\n            decorated_function.make_cache_key = make_cache_key\n\n            return decorated_function\n\n        return decorator\n```\n\n\n- cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：\n\t- timeout用于指定缓存失效的时间，设置0或-1则不失效\n\t- unless是一个函数，用于判断是否需要跳过缓存，可自定义实现\n\t\t\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n\n# ```\n\n- 默认情况下进入逻辑\"elif \"%s\" in key_prefix:\", 因此cached缓存只与requesturl相关，与视图函数的传参无关，`这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key`，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。\n\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n```\n- 另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。\n\n### **memoize**\n- memoize相较于cached的区别\n\t- cache_key实现不同，memoize对key进行了加密\n\t- 针对普通函数缓存结果使用\n\t- 支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现\n\n## 总结-如何写一个缓存框架\n从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：`判断是否跳过缓存，生成查询key，获取缓存数据`。\n我们如果要实现缓存框架，大体需要考虑一下几方面：\n- 支持使用不同的存储实例，**抽象缓存对象接口**，如`get，has，set`\n- 支持区分参数缓存\n- 支持缓存时效性\n- 支持缓存数据加密\n- 如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理\n\n\n## 使用缓存的注意事项（待补充）\n- 缓存穿透\n- 缓存雪崩\n- 缓存集群","source":"_posts/2019-07-14-flask-caching源码浅析.md","raw":"---\ntitle: flask-caching源码浅析\ndate: 2019-07-14 19:49:26\ntags:\n- flask\n- python\n- 源码浅析\ncategories:\n---\n\n{%note info%}\nflask-caching源码浅析。\n{%endnote%}\n<!--more-->\n\n## 简介\n- flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。\n- flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：\n\t- simple 程序内部缓存\n\t- filesystem 系统文件缓存\n\t- redis\n\t- redissentinel\n\t- uwsgi\n\t- memcached\n\t- gaememcached\n\t- saslmemcached\n\t- spreadsaslmemcached\n\n## 简单使用\n```python\nfrom flask_caching import Cache\ncache = Cache()\n\nconfig = {\"CACHE_TYPE\": \"redis\", \"CACHE_REDIS_URL\": app.config[\"CACHE_REDIS_URL\"]}\n    cache.init_app(app, config=config)\n\n@app.route('/cache_test/<int:id>')\n@cache.cached(timeout=60 * 5)\ndef cache_test(id):\n    from flask import request\n    got_data = request.get_json()\n    import time\n\n    return f\"{got_data}.{id}.{time.time()}\"\n\n@cache.memoize(timeout=60 * 5)\ndef f_cache(a):\n    return a\n\n@app.route('/cache_test2/<int:id>')\ndef cache_test2(id):\n    return f\"{f_cache(id)}\"\n\n```\n\n\n## cache memoize源码解析\n### **cached**\n\n```python\n    def cached(\n        self,\n        timeout=None,\n        key_prefix=\"view/%s\",\n        unless=None,\n        forced_update=None,\n        response_filter=None,\n        query_string=False,\n        hash_method=hashlib.md5,\n    ):\n        \"\"\"...\"\"\"\n\n        def decorator(f):\n            @functools.wraps(f)\n            def decorated_function(*args, **kwargs):...\n\n                if not found:\n                    rv = f(*args, **kwargs)\n\n                    if response_filter is None or response_filter(rv):\n                        try:\n                            self.cache.set(\n                                cache_key,\n                                rv,\n                                timeout=decorated_function.cache_timeout,\n                            )\n                        except Exception:\n                            if self.app.debug:\n                                raise\n                            logger.exception(\n                                \"Exception possibly due to cache backend.\"\n                            )\n                return rv\n\n            def make_cache_key(*args, **kwargs):...\n\n            def _make_cache_key_query_string():...\n\n            def _make_cache_key(args, kwargs, use_request):...\n\n            decorated_function.uncached = f\n            decorated_function.cache_timeout = timeout\n            decorated_function.make_cache_key = make_cache_key\n\n            return decorated_function\n\n        return decorator\n```\n\n\n- cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：\n\t- timeout用于指定缓存失效的时间，设置0或-1则不失效\n\t- unless是一个函数，用于判断是否需要跳过缓存，可自定义实现\n\t\t\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n\n# ```\n\n- 默认情况下进入逻辑\"elif \"%s\" in key_prefix:\", 因此cached缓存只与requesturl相关，与视图函数的传参无关，`这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key`，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。\n\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n```\n- 另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。\n\n### **memoize**\n- memoize相较于cached的区别\n\t- cache_key实现不同，memoize对key进行了加密\n\t- 针对普通函数缓存结果使用\n\t- 支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现\n\n## 总结-如何写一个缓存框架\n从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：`判断是否跳过缓存，生成查询key，获取缓存数据`。\n我们如果要实现缓存框架，大体需要考虑一下几方面：\n- 支持使用不同的存储实例，**抽象缓存对象接口**，如`get，has，set`\n- 支持区分参数缓存\n- 支持缓存时效性\n- 支持缓存数据加密\n- 如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理\n\n\n## 使用缓存的注意事项（待补充）\n- 缓存穿透\n- 缓存雪崩\n- 缓存集群","slug":"flask-caching源码浅析","published":1,"updated":"2019-12-25T14:13:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmk300100tqkeherzyb3","content":"<div class=\"note info\"><p>flask-caching源码浅析。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。</li>\n<li>flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：<ul>\n<li>simple 程序内部缓存</li>\n<li>filesystem 系统文件缓存</li>\n<li>redis</li>\n<li>redissentinel</li>\n<li>uwsgi</li>\n<li>memcached</li>\n<li>gaememcached</li>\n<li>saslmemcached</li>\n<li>spreadsaslmemcached</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_caching <span class=\"keyword\">import</span> Cache</span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;<span class=\"string\">\"CACHE_TYPE\"</span>: <span class=\"string\">\"redis\"</span>, <span class=\"string\">\"CACHE_REDIS_URL\"</span>: app.config[<span class=\"string\">\"CACHE_REDIS_URL\"</span>]&#125;</span><br><span class=\"line\">    cache.init_app(app, config=config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"meta\">@cache.cached(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\">    got_data = request.get_json()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;got_data&#125;</span>.<span class=\"subst\">&#123;id&#125;</span>.<span class=\"subst\">&#123;time.time()&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cache.memoize(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_cache</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test2/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test2</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;f_cache(id)&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"cache-memoize源码解析\"><a href=\"#cache-memoize源码解析\" class=\"headerlink\" title=\"cache memoize源码解析\"></a>cache memoize源码解析</h2><h3 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a><strong>cached</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cached</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    timeout=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key_prefix=<span class=\"string\">\"view/%s\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    unless=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    forced_update=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    response_filter=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    query_string=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    hash_method=hashlib.md5,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"...\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(f)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated_function</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">                rv = f(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> response_filter <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> response_filter(rv):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        self.cache.set(</span><br><span class=\"line\">                            cache_key,</span><br><span class=\"line\">                            rv,</span><br><span class=\"line\">                            timeout=decorated_function.cache_timeout,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> self.app.debug:</span><br><span class=\"line\">                            <span class=\"keyword\">raise</span></span><br><span class=\"line\">                        logger.exception(</span><br><span class=\"line\">                            <span class=\"string\">\"Exception possibly due to cache backend.\"</span></span><br><span class=\"line\">                        )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_cache_key</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key_query_string</span><span class=\"params\">()</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        decorated_function.uncached = f</span><br><span class=\"line\">        decorated_function.cache_timeout = timeout</span><br><span class=\"line\">        decorated_function.make_cache_key = make_cache_key</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：<ul>\n<li>timeout用于指定缓存失效的时间，设置0或-1则不失效</li>\n<li>unless是一个函数，用于判断是否需要跳过缓存，可自定义实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下进入逻辑”elif “%s” in key_prefix:”, 因此cached缓存只与requesturl相关，与视图函数的传参无关，<code>这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key</code>，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。</li>\n</ul>\n<h3 id=\"memoize\"><a href=\"#memoize\" class=\"headerlink\" title=\"memoize\"></a><strong>memoize</strong></h3><ul>\n<li>memoize相较于cached的区别<ul>\n<li>cache_key实现不同，memoize对key进行了加密</li>\n<li>针对普通函数缓存结果使用</li>\n<li>支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结-如何写一个缓存框架\"><a href=\"#总结-如何写一个缓存框架\" class=\"headerlink\" title=\"总结-如何写一个缓存框架\"></a>总结-如何写一个缓存框架</h2><p>从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：<code>判断是否跳过缓存，生成查询key，获取缓存数据</code>。<br>我们如果要实现缓存框架，大体需要考虑一下几方面：</p>\n<ul>\n<li>支持使用不同的存储实例，<strong>抽象缓存对象接口</strong>，如<code>get，has，set</code></li>\n<li>支持区分参数缓存</li>\n<li>支持缓存时效性</li>\n<li>支持缓存数据加密</li>\n<li>如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理</li>\n</ul>\n<h2 id=\"使用缓存的注意事项（待补充）\"><a href=\"#使用缓存的注意事项（待补充）\" class=\"headerlink\" title=\"使用缓存的注意事项（待补充）\"></a>使用缓存的注意事项（待补充）</h2><ul>\n<li>缓存穿透</li>\n<li>缓存雪崩</li>\n<li>缓存集群</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>flask-caching源码浅析。</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。</li>\n<li>flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：<ul>\n<li>simple 程序内部缓存</li>\n<li>filesystem 系统文件缓存</li>\n<li>redis</li>\n<li>redissentinel</li>\n<li>uwsgi</li>\n<li>memcached</li>\n<li>gaememcached</li>\n<li>saslmemcached</li>\n<li>spreadsaslmemcached</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_caching <span class=\"keyword\">import</span> Cache</span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;<span class=\"string\">\"CACHE_TYPE\"</span>: <span class=\"string\">\"redis\"</span>, <span class=\"string\">\"CACHE_REDIS_URL\"</span>: app.config[<span class=\"string\">\"CACHE_REDIS_URL\"</span>]&#125;</span><br><span class=\"line\">    cache.init_app(app, config=config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"meta\">@cache.cached(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\">    got_data = request.get_json()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;got_data&#125;</span>.<span class=\"subst\">&#123;id&#125;</span>.<span class=\"subst\">&#123;time.time()&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cache.memoize(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_cache</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test2/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test2</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;f_cache(id)&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"cache-memoize源码解析\"><a href=\"#cache-memoize源码解析\" class=\"headerlink\" title=\"cache memoize源码解析\"></a>cache memoize源码解析</h2><h3 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a><strong>cached</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cached</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    timeout=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key_prefix=<span class=\"string\">\"view/%s\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    unless=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    forced_update=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    response_filter=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    query_string=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    hash_method=hashlib.md5,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"...\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(f)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated_function</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">                rv = f(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> response_filter <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> response_filter(rv):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        self.cache.set(</span><br><span class=\"line\">                            cache_key,</span><br><span class=\"line\">                            rv,</span><br><span class=\"line\">                            timeout=decorated_function.cache_timeout,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> self.app.debug:</span><br><span class=\"line\">                            <span class=\"keyword\">raise</span></span><br><span class=\"line\">                        logger.exception(</span><br><span class=\"line\">                            <span class=\"string\">\"Exception possibly due to cache backend.\"</span></span><br><span class=\"line\">                        )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_cache_key</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key_query_string</span><span class=\"params\">()</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        decorated_function.uncached = f</span><br><span class=\"line\">        decorated_function.cache_timeout = timeout</span><br><span class=\"line\">        decorated_function.make_cache_key = make_cache_key</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：<ul>\n<li>timeout用于指定缓存失效的时间，设置0或-1则不失效</li>\n<li>unless是一个函数，用于判断是否需要跳过缓存，可自定义实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下进入逻辑”elif “%s” in key_prefix:”, 因此cached缓存只与requesturl相关，与视图函数的传参无关，<code>这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key</code>，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。</li>\n</ul>\n<h3 id=\"memoize\"><a href=\"#memoize\" class=\"headerlink\" title=\"memoize\"></a><strong>memoize</strong></h3><ul>\n<li>memoize相较于cached的区别<ul>\n<li>cache_key实现不同，memoize对key进行了加密</li>\n<li>针对普通函数缓存结果使用</li>\n<li>支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结-如何写一个缓存框架\"><a href=\"#总结-如何写一个缓存框架\" class=\"headerlink\" title=\"总结-如何写一个缓存框架\"></a>总结-如何写一个缓存框架</h2><p>从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：<code>判断是否跳过缓存，生成查询key，获取缓存数据</code>。<br>我们如果要实现缓存框架，大体需要考虑一下几方面：</p>\n<ul>\n<li>支持使用不同的存储实例，<strong>抽象缓存对象接口</strong>，如<code>get，has，set</code></li>\n<li>支持区分参数缓存</li>\n<li>支持缓存时效性</li>\n<li>支持缓存数据加密</li>\n<li>如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理</li>\n</ul>\n<h2 id=\"使用缓存的注意事项（待补充）\"><a href=\"#使用缓存的注意事项（待补充）\" class=\"headerlink\" title=\"使用缓存的注意事项（待补充）\"></a>使用缓存的注意事项（待补充）</h2><ul>\n<li>缓存穿透</li>\n<li>缓存雪崩</li>\n<li>缓存集群</li>\n</ul>"},{"title":"fabric使用总结","date":"2019-12-23T13:16:44.000Z","_content":"\n{%note info%}\nfabric可谓部署神器，在小规模集群环境部署方面简直就是`屠龙刀`的存在\n{%endnote%}\n<!--more-->\n\n## 简介\n\n- fabric目前存在两个版本，分别对应python2和python3\n- 本文主要介绍fabric两个版本的常用方法\n\n## fabric（python2）\n### 安装（python2环境）\n\n```python\npip install fabric\n```\n### 若要实现ssh跳转，需另外安装fexpect\n\n```python\npip install fexpect\n```\n### fabric2的API对应部署的对象定义比较明了\n- env（定义部署主机的ip，密码，节点属性，全局变量等）\n\t\n```python\ndef dev():\n    env.roledefs = {\n        \"manager\": [\"user@x.x.x.x:22\"],\n        \"worker\": [\"user@x.x.x.x:22\"],\n    }\n    env.passwords = {\"user@x.x.x.x:22\": \"123456\", \"user@x.x.x.x:22\": \"123456\"}\n    global ENV_PARAM\n    ENV_PARAM = \"dev\"\n```\n\n- roles\n    \n```python\n@roles(\"manager\")\ndef start_swarm(tag, compose_file=\"docker-compose.yml\"):\n    with cd(SRC_PATH):\n        with shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):\n            run(\n                \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n                    compose_file, PREFIX\n                )\n            )   \n```\n    \n   \n- run\n\n执行shell指令\n    \n- hide, settings \n\n配合使用，隐藏输出内容等\n        \n```python\nwith settings(hide(\"warnings\", \"running\", \"stdout\", \"stderr\"), warn_only=True):\n    \n```\n    \n    \n- cd，sudo\n\n同shell指令\n    \n- execute\n\n在本地任务中执行其他任务函数，提高代码复用率\n    \n- shell_env\n\n设置环境变量\n        \n```python\nwith shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):\n    run(\n        \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n            compose_file, PREFIX\n        )\n    )\n```\n    \n- 配合fexpect使用\n\n贴了段之前用过的代码，可用于修饰任务函数\n        \n```python\ndef env_init(f):\n    # 代码目录\n    global SRC_PATH\n    SRC_PATH = \"\"\n    # 私有镜像仓库\n    global REGISTRY_HOST\n    REGISTRY_HOST = \"\"\n    global REGISTRY_USER\n    REGISTRY_USER = \"\"\n    global REGISTRY_PWD\n    REGISTRY_PWD = \"\"\n    # 项目前缀\n    global PREFIX\n    PREFIX = \"asset\"\n    # 主节点ip\n    global MANAGER_IP, MANAGER_SSL, MANAGER_PWD\n    \n    def _get_manager_ip():\n        return env.roledefs[\"manager\"][0][6:-3]\n    \n    def _get_manager_ssl():\n        return env.roledefs[\"manager\"][0][:-3]\n    \n    # EXPECT\n    global PROMPTS\n    \n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        global MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS\n        MANAGER_IP = _get_manager_ip()\n        MANAGER_SSL = _get_manager_ssl()\n        MANAGER_PWD = env.passwords[env.roledefs[\"manager\"][0]]\n        PROMPTS = expect(\n            \"Are you sure you want to continue connecting (yes/no)?\", \"yes\"\n        )\n        return f(*args, **kwargs)\n    \n    return wrapper  \n```\n---\n## fabric（python3）\n### 安装（python3环境）\n\n```python\npip install fabric\n```\n\n### fabirc3的API相较而言显的抽象简单\n- Connection 作为连接通道抽象\n\n```python\n# 连接本地\nlocal_conn = Connection('localhost')\n\n# 远程连接\n# 没了envAPI只能自己手动定义连接环境\nenvs = {\n    'remote': {\n        'host_name': 'xx',\n        'host': 'user@x.x.x.x:22',\n        'password': '123456',\n    },\n}\nconn = Connection(\n    env.get('host'),\n    connect_kwargs={'password': env.get('password')}\n)\n```\n\n- task 定义任务\n\n```python\n@task\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n通过`fab deploy`执行该任务，值得注意的是ctx这个变量必须要写\n指定传参`fab start-server --jar-timestamp=20191203-1637 debug=True`(让人琢磨尝试了半天)\n\n\n- 其他注意点\n\n对task任务函数使用装饰器，需要注意ctx的传入\n\n```python\ndef timeit(start_msg=None, end_msg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(ctx, *args, **kwargs):\n            if start_msg:\n                print(start_msg)\n            start = time.time()\n            res = func(ctx, *args, **kwargs)\n            if end_msg:\n                print(f'{end_msg}： {round((time.time() - start), 2)}s')\n            return res\n        return wrapper\n    return decorator\n```\n\n然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效\n\n```python\n# 此时debug的将无法被解析\n@task\n@timeit(end_msg='发布完成')\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n\n究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败\n\n```python\ndef argspec(self, body):\n    func = body if isinstance(body, types.FunctionType) else body.__call__\n    spec = inspect.getargspec(func)\n    arg_names = spec.args[:]\n    matched_args = [reversed(x) for x in [spec.args, spec.defaults or []]]\n    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))\n    # Pop context argument\n    try:\n        context_arg = arg_names.pop(0)\n    except IndexError:\n        # TODO: see TODO under __call__, this should be same type\n        raise TypeError(\"Tasks must have an initial Context argument!\")\n    del spec_dict[context_arg]\n    return arg_names, spec_dict\n```\n\n## 总结\n- 综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用\n- fabric3是面向程序编程而非面向human编程\n- 无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧\n","source":"_posts/2019-12-23-fabric使用总结.md","raw":"---\ntitle: fabric使用总结\ndate: 2019-12-23 21:16:44\ntags: \n- 部署\ncategories:\n---\n\n{%note info%}\nfabric可谓部署神器，在小规模集群环境部署方面简直就是`屠龙刀`的存在\n{%endnote%}\n<!--more-->\n\n## 简介\n\n- fabric目前存在两个版本，分别对应python2和python3\n- 本文主要介绍fabric两个版本的常用方法\n\n## fabric（python2）\n### 安装（python2环境）\n\n```python\npip install fabric\n```\n### 若要实现ssh跳转，需另外安装fexpect\n\n```python\npip install fexpect\n```\n### fabric2的API对应部署的对象定义比较明了\n- env（定义部署主机的ip，密码，节点属性，全局变量等）\n\t\n```python\ndef dev():\n    env.roledefs = {\n        \"manager\": [\"user@x.x.x.x:22\"],\n        \"worker\": [\"user@x.x.x.x:22\"],\n    }\n    env.passwords = {\"user@x.x.x.x:22\": \"123456\", \"user@x.x.x.x:22\": \"123456\"}\n    global ENV_PARAM\n    ENV_PARAM = \"dev\"\n```\n\n- roles\n    \n```python\n@roles(\"manager\")\ndef start_swarm(tag, compose_file=\"docker-compose.yml\"):\n    with cd(SRC_PATH):\n        with shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):\n            run(\n                \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n                    compose_file, PREFIX\n                )\n            )   \n```\n    \n   \n- run\n\n执行shell指令\n    \n- hide, settings \n\n配合使用，隐藏输出内容等\n        \n```python\nwith settings(hide(\"warnings\", \"running\", \"stdout\", \"stderr\"), warn_only=True):\n    \n```\n    \n    \n- cd，sudo\n\n同shell指令\n    \n- execute\n\n在本地任务中执行其他任务函数，提高代码复用率\n    \n- shell_env\n\n设置环境变量\n        \n```python\nwith shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):\n    run(\n        \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n            compose_file, PREFIX\n        )\n    )\n```\n    \n- 配合fexpect使用\n\n贴了段之前用过的代码，可用于修饰任务函数\n        \n```python\ndef env_init(f):\n    # 代码目录\n    global SRC_PATH\n    SRC_PATH = \"\"\n    # 私有镜像仓库\n    global REGISTRY_HOST\n    REGISTRY_HOST = \"\"\n    global REGISTRY_USER\n    REGISTRY_USER = \"\"\n    global REGISTRY_PWD\n    REGISTRY_PWD = \"\"\n    # 项目前缀\n    global PREFIX\n    PREFIX = \"asset\"\n    # 主节点ip\n    global MANAGER_IP, MANAGER_SSL, MANAGER_PWD\n    \n    def _get_manager_ip():\n        return env.roledefs[\"manager\"][0][6:-3]\n    \n    def _get_manager_ssl():\n        return env.roledefs[\"manager\"][0][:-3]\n    \n    # EXPECT\n    global PROMPTS\n    \n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        global MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS\n        MANAGER_IP = _get_manager_ip()\n        MANAGER_SSL = _get_manager_ssl()\n        MANAGER_PWD = env.passwords[env.roledefs[\"manager\"][0]]\n        PROMPTS = expect(\n            \"Are you sure you want to continue connecting (yes/no)?\", \"yes\"\n        )\n        return f(*args, **kwargs)\n    \n    return wrapper  \n```\n---\n## fabric（python3）\n### 安装（python3环境）\n\n```python\npip install fabric\n```\n\n### fabirc3的API相较而言显的抽象简单\n- Connection 作为连接通道抽象\n\n```python\n# 连接本地\nlocal_conn = Connection('localhost')\n\n# 远程连接\n# 没了envAPI只能自己手动定义连接环境\nenvs = {\n    'remote': {\n        'host_name': 'xx',\n        'host': 'user@x.x.x.x:22',\n        'password': '123456',\n    },\n}\nconn = Connection(\n    env.get('host'),\n    connect_kwargs={'password': env.get('password')}\n)\n```\n\n- task 定义任务\n\n```python\n@task\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n通过`fab deploy`执行该任务，值得注意的是ctx这个变量必须要写\n指定传参`fab start-server --jar-timestamp=20191203-1637 debug=True`(让人琢磨尝试了半天)\n\n\n- 其他注意点\n\n对task任务函数使用装饰器，需要注意ctx的传入\n\n```python\ndef timeit(start_msg=None, end_msg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(ctx, *args, **kwargs):\n            if start_msg:\n                print(start_msg)\n            start = time.time()\n            res = func(ctx, *args, **kwargs)\n            if end_msg:\n                print(f'{end_msg}： {round((time.time() - start), 2)}s')\n            return res\n        return wrapper\n    return decorator\n```\n\n然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效\n\n```python\n# 此时debug的将无法被解析\n@task\n@timeit(end_msg='发布完成')\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n\n究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败\n\n```python\ndef argspec(self, body):\n    func = body if isinstance(body, types.FunctionType) else body.__call__\n    spec = inspect.getargspec(func)\n    arg_names = spec.args[:]\n    matched_args = [reversed(x) for x in [spec.args, spec.defaults or []]]\n    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))\n    # Pop context argument\n    try:\n        context_arg = arg_names.pop(0)\n    except IndexError:\n        # TODO: see TODO under __call__, this should be same type\n        raise TypeError(\"Tasks must have an initial Context argument!\")\n    del spec_dict[context_arg]\n    return arg_names, spec_dict\n```\n\n## 总结\n- 综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用\n- fabric3是面向程序编程而非面向human编程\n- 无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧\n","slug":"fabric使用总结","published":1,"updated":"2019-12-28T09:06:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmk600150tqk7xl07a7s","content":"<div class=\"note info\"><p>fabric可谓部署神器，在小规模集群环境部署方面简直就是<code>屠龙刀</code>的存在</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>fabric目前存在两个版本，分别对应python2和python3</li>\n<li>本文主要介绍fabric两个版本的常用方法</li>\n</ul>\n<h2 id=\"fabric（python2）\"><a href=\"#fabric（python2）\" class=\"headerlink\" title=\"fabric（python2）\"></a>fabric（python2）</h2><h3 id=\"安装（python2环境）\"><a href=\"#安装（python2环境）\" class=\"headerlink\" title=\"安装（python2环境）\"></a>安装（python2环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"若要实现ssh跳转，需另外安装fexpect\"><a href=\"#若要实现ssh跳转，需另外安装fexpect\" class=\"headerlink\" title=\"若要实现ssh跳转，需另外安装fexpect\"></a>若要实现ssh跳转，需另外安装fexpect</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fexpect</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabric2的API对应部署的对象定义比较明了\"><a href=\"#fabric2的API对应部署的对象定义比较明了\" class=\"headerlink\" title=\"fabric2的API对应部署的对象定义比较明了\"></a>fabric2的API对应部署的对象定义比较明了</h3><ul>\n<li>env（定义部署主机的ip，密码，节点属性，全局变量等）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dev</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    env.roledefs = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"manager\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"worker\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    env.passwords = &#123;<span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>, <span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> ENV_PARAM</span><br><span class=\"line\">    ENV_PARAM = <span class=\"string\">\"dev\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>roles</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@roles(\"manager\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_swarm</span><span class=\"params\">(tag, compose_file=<span class=\"string\">\"docker-compose.yml\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> cd(SRC_PATH):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):</span><br><span class=\"line\">            run(</span><br><span class=\"line\">                <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">                    compose_file, PREFIX</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>run</li>\n</ul>\n<p>执行shell指令</p>\n<ul>\n<li>hide, settings </li>\n</ul>\n<p>配合使用，隐藏输出内容等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> settings(hide(<span class=\"string\">\"warnings\"</span>, <span class=\"string\">\"running\"</span>, <span class=\"string\">\"stdout\"</span>, <span class=\"string\">\"stderr\"</span>), warn_only=<span class=\"keyword\">True</span>):</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd，sudo</li>\n</ul>\n<p>同shell指令</p>\n<ul>\n<li>execute</li>\n</ul>\n<p>在本地任务中执行其他任务函数，提高代码复用率</p>\n<ul>\n<li>shell_env</li>\n</ul>\n<p>设置环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):</span><br><span class=\"line\">    run(</span><br><span class=\"line\">        <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">            compose_file, PREFIX</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配合fexpect使用</li>\n</ul>\n<p>贴了段之前用过的代码，可用于修饰任务函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">env_init</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码目录</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SRC_PATH</span><br><span class=\"line\">    SRC_PATH = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 私有镜像仓库</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_HOST</span><br><span class=\"line\">    REGISTRY_HOST = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_USER</span><br><span class=\"line\">    REGISTRY_USER = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_PWD</span><br><span class=\"line\">    REGISTRY_PWD = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PREFIX</span><br><span class=\"line\">    PREFIX = <span class=\"string\">\"asset\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 主节点ip</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ip</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][<span class=\"number\">6</span>:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ssl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># EXPECT</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PROMPTS</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @wraps(f)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS</span><br><span class=\"line\">        MANAGER_IP = _get_manager_ip()</span><br><span class=\"line\">        MANAGER_SSL = _get_manager_ssl()</span><br><span class=\"line\">        MANAGER_PWD = env.passwords[env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>]]</span><br><span class=\"line\">        PROMPTS = expect(</span><br><span class=\"line\">            <span class=\"string\">\"Are you sure you want to continue connecting (yes/no)?\"</span>, <span class=\"string\">\"yes\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fabric（python3）\"><a href=\"#fabric（python3）\" class=\"headerlink\" title=\"fabric（python3）\"></a>fabric（python3）</h2><h3 id=\"安装（python3环境）\"><a href=\"#安装（python3环境）\" class=\"headerlink\" title=\"安装（python3环境）\"></a>安装（python3环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabirc3的API相较而言显的抽象简单\"><a href=\"#fabirc3的API相较而言显的抽象简单\" class=\"headerlink\" title=\"fabirc3的API相较而言显的抽象简单\"></a>fabirc3的API相较而言显的抽象简单</h3><ul>\n<li>Connection 作为连接通道抽象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接本地</span></span><br><span class=\"line\">local_conn = Connection(<span class=\"string\">'localhost'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程连接</span></span><br><span class=\"line\"><span class=\"comment\"># 没了envAPI只能自己手动定义连接环境</span></span><br><span class=\"line\">envs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'remote'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'host_name'</span>: <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'host'</span>: <span class=\"string\">'user@x.x.x.x:22'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = Connection(</span><br><span class=\"line\">    env.get(<span class=\"string\">'host'</span>),</span><br><span class=\"line\">    connect_kwargs=&#123;<span class=\"string\">'password'</span>: env.get(<span class=\"string\">'password'</span>)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>task 定义任务</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>通过<code>fab deploy</code>执行该任务，值得注意的是ctx这个变量必须要写<br>指定传参<code>fab start-server --jar-timestamp=20191203-1637 debug=True</code>(让人琢磨尝试了半天)</p>\n<ul>\n<li>其他注意点</li>\n</ul>\n<p>对task任务函数使用装饰器，需要注意ctx的传入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timeit</span><span class=\"params\">(start_msg=None, end_msg=None)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(ctx, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> start_msg:</span><br><span class=\"line\">                print(start_msg)</span><br><span class=\"line\">            start = time.time()</span><br><span class=\"line\">            res = func(ctx, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_msg:</span><br><span class=\"line\">                print(<span class=\"string\">f'<span class=\"subst\">&#123;end_msg&#125;</span>： <span class=\"subst\">&#123;round((time.time() - start), <span class=\"number\">2</span>)&#125;</span>s'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时debug的将无法被解析</span></span><br><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"meta\">@timeit(end_msg='发布完成')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">argspec</span><span class=\"params\">(self, body)</span>:</span></span><br><span class=\"line\">    func = body <span class=\"keyword\">if</span> isinstance(body, types.FunctionType) <span class=\"keyword\">else</span> body.__call__</span><br><span class=\"line\">    spec = inspect.getargspec(func)</span><br><span class=\"line\">    arg_names = spec.args[:]</span><br><span class=\"line\">    matched_args = [reversed(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [spec.args, spec.defaults <span class=\"keyword\">or</span> []]]</span><br><span class=\"line\">    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))</span><br><span class=\"line\">    <span class=\"comment\"># Pop context argument</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        context_arg = arg_names.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> see TODO under __call__, this should be same type</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">\"Tasks must have an initial Context argument!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> spec_dict[context_arg]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg_names, spec_dict</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用</li>\n<li>fabric3是面向程序编程而非面向human编程</li>\n<li>无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>fabric可谓部署神器，在小规模集群环境部署方面简直就是<code>屠龙刀</code>的存在</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>fabric目前存在两个版本，分别对应python2和python3</li>\n<li>本文主要介绍fabric两个版本的常用方法</li>\n</ul>\n<h2 id=\"fabric（python2）\"><a href=\"#fabric（python2）\" class=\"headerlink\" title=\"fabric（python2）\"></a>fabric（python2）</h2><h3 id=\"安装（python2环境）\"><a href=\"#安装（python2环境）\" class=\"headerlink\" title=\"安装（python2环境）\"></a>安装（python2环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"若要实现ssh跳转，需另外安装fexpect\"><a href=\"#若要实现ssh跳转，需另外安装fexpect\" class=\"headerlink\" title=\"若要实现ssh跳转，需另外安装fexpect\"></a>若要实现ssh跳转，需另外安装fexpect</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fexpect</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabric2的API对应部署的对象定义比较明了\"><a href=\"#fabric2的API对应部署的对象定义比较明了\" class=\"headerlink\" title=\"fabric2的API对应部署的对象定义比较明了\"></a>fabric2的API对应部署的对象定义比较明了</h3><ul>\n<li>env（定义部署主机的ip，密码，节点属性，全局变量等）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dev</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    env.roledefs = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"manager\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"worker\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    env.passwords = &#123;<span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>, <span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> ENV_PARAM</span><br><span class=\"line\">    ENV_PARAM = <span class=\"string\">\"dev\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>roles</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@roles(\"manager\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_swarm</span><span class=\"params\">(tag, compose_file=<span class=\"string\">\"docker-compose.yml\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> cd(SRC_PATH):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):</span><br><span class=\"line\">            run(</span><br><span class=\"line\">                <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">                    compose_file, PREFIX</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>run</li>\n</ul>\n<p>执行shell指令</p>\n<ul>\n<li>hide, settings </li>\n</ul>\n<p>配合使用，隐藏输出内容等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> settings(hide(<span class=\"string\">\"warnings\"</span>, <span class=\"string\">\"running\"</span>, <span class=\"string\">\"stdout\"</span>, <span class=\"string\">\"stderr\"</span>), warn_only=<span class=\"keyword\">True</span>):</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd，sudo</li>\n</ul>\n<p>同shell指令</p>\n<ul>\n<li>execute</li>\n</ul>\n<p>在本地任务中执行其他任务函数，提高代码复用率</p>\n<ul>\n<li>shell_env</li>\n</ul>\n<p>设置环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):</span><br><span class=\"line\">    run(</span><br><span class=\"line\">        <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">            compose_file, PREFIX</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配合fexpect使用</li>\n</ul>\n<p>贴了段之前用过的代码，可用于修饰任务函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">env_init</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码目录</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SRC_PATH</span><br><span class=\"line\">    SRC_PATH = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 私有镜像仓库</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_HOST</span><br><span class=\"line\">    REGISTRY_HOST = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_USER</span><br><span class=\"line\">    REGISTRY_USER = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_PWD</span><br><span class=\"line\">    REGISTRY_PWD = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PREFIX</span><br><span class=\"line\">    PREFIX = <span class=\"string\">\"asset\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 主节点ip</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ip</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][<span class=\"number\">6</span>:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ssl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># EXPECT</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PROMPTS</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @wraps(f)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS</span><br><span class=\"line\">        MANAGER_IP = _get_manager_ip()</span><br><span class=\"line\">        MANAGER_SSL = _get_manager_ssl()</span><br><span class=\"line\">        MANAGER_PWD = env.passwords[env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>]]</span><br><span class=\"line\">        PROMPTS = expect(</span><br><span class=\"line\">            <span class=\"string\">\"Are you sure you want to continue connecting (yes/no)?\"</span>, <span class=\"string\">\"yes\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fabric（python3）\"><a href=\"#fabric（python3）\" class=\"headerlink\" title=\"fabric（python3）\"></a>fabric（python3）</h2><h3 id=\"安装（python3环境）\"><a href=\"#安装（python3环境）\" class=\"headerlink\" title=\"安装（python3环境）\"></a>安装（python3环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabirc3的API相较而言显的抽象简单\"><a href=\"#fabirc3的API相较而言显的抽象简单\" class=\"headerlink\" title=\"fabirc3的API相较而言显的抽象简单\"></a>fabirc3的API相较而言显的抽象简单</h3><ul>\n<li>Connection 作为连接通道抽象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接本地</span></span><br><span class=\"line\">local_conn = Connection(<span class=\"string\">'localhost'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程连接</span></span><br><span class=\"line\"><span class=\"comment\"># 没了envAPI只能自己手动定义连接环境</span></span><br><span class=\"line\">envs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'remote'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'host_name'</span>: <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'host'</span>: <span class=\"string\">'user@x.x.x.x:22'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = Connection(</span><br><span class=\"line\">    env.get(<span class=\"string\">'host'</span>),</span><br><span class=\"line\">    connect_kwargs=&#123;<span class=\"string\">'password'</span>: env.get(<span class=\"string\">'password'</span>)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>task 定义任务</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>通过<code>fab deploy</code>执行该任务，值得注意的是ctx这个变量必须要写<br>指定传参<code>fab start-server --jar-timestamp=20191203-1637 debug=True</code>(让人琢磨尝试了半天)</p>\n<ul>\n<li>其他注意点</li>\n</ul>\n<p>对task任务函数使用装饰器，需要注意ctx的传入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timeit</span><span class=\"params\">(start_msg=None, end_msg=None)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(ctx, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> start_msg:</span><br><span class=\"line\">                print(start_msg)</span><br><span class=\"line\">            start = time.time()</span><br><span class=\"line\">            res = func(ctx, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_msg:</span><br><span class=\"line\">                print(<span class=\"string\">f'<span class=\"subst\">&#123;end_msg&#125;</span>： <span class=\"subst\">&#123;round((time.time() - start), <span class=\"number\">2</span>)&#125;</span>s'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时debug的将无法被解析</span></span><br><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"meta\">@timeit(end_msg='发布完成')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">argspec</span><span class=\"params\">(self, body)</span>:</span></span><br><span class=\"line\">    func = body <span class=\"keyword\">if</span> isinstance(body, types.FunctionType) <span class=\"keyword\">else</span> body.__call__</span><br><span class=\"line\">    spec = inspect.getargspec(func)</span><br><span class=\"line\">    arg_names = spec.args[:]</span><br><span class=\"line\">    matched_args = [reversed(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [spec.args, spec.defaults <span class=\"keyword\">or</span> []]]</span><br><span class=\"line\">    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))</span><br><span class=\"line\">    <span class=\"comment\"># Pop context argument</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        context_arg = arg_names.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> see TODO under __call__, this should be same type</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">\"Tasks must have an initial Context argument!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> spec_dict[context_arg]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg_names, spec_dict</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用</li>\n<li>fabric3是面向程序编程而非面向human编程</li>\n<li>无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧</li>\n</ul>"},{"title":"兼职运维之ulimit","date":"2019-12-27T13:09:45.000Z","_content":"\n\n{%note info%}\n今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。\n{%endnote%}\n<!--more-->\n\n## 现象&定位\n- 部署完成后，收到测试人员反馈业务运行异常\n- 排查后，定位为livy向spark提交任务时执行失败\nlivy日志如下：\n![spark异常.jpg](https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg)\n\n- 初看有点懵，将关键字`spark`和`OpenBLAS blas_thread_init`提交google，结果大多匹配python运行时相关异常，\n![spark异常google.jpg](https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg)\n\n- 仔细看不难发现`RLIMIT_NPROC 4096 current, 514476 max`\n- 由此自然联想到`ulimit -u`，一查发现果然只有4096\n\n## 解决方案\n- 解决方案也简单，设置系统最大允许进程数\n\n**永久生效：**\n\n```\n/etc/security/limits.d/90-nproc.conf\n或\n/etc/security/limits.conf\n在末行加入\n* hard nproc 1000000\n* soft nproc 1000000\n\n```\n**当前session生效：**\n\n```\nulimit -u 1000000\n```\n- 重新测试，问题果然修复\n\n\n## 总结\n- 问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质\n- 该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧\n","source":"_posts/2019-12-27-兼职运维之ulimit-u.md","raw":"---\ntitle: 兼职运维之ulimit\ndate: 2019-12-27 21:09:45\ntags:\n- 兼职运维\ncategories:\n- linux\n---\n\n\n{%note info%}\n今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。\n{%endnote%}\n<!--more-->\n\n## 现象&定位\n- 部署完成后，收到测试人员反馈业务运行异常\n- 排查后，定位为livy向spark提交任务时执行失败\nlivy日志如下：\n![spark异常.jpg](https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg)\n\n- 初看有点懵，将关键字`spark`和`OpenBLAS blas_thread_init`提交google，结果大多匹配python运行时相关异常，\n![spark异常google.jpg](https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg)\n\n- 仔细看不难发现`RLIMIT_NPROC 4096 current, 514476 max`\n- 由此自然联想到`ulimit -u`，一查发现果然只有4096\n\n## 解决方案\n- 解决方案也简单，设置系统最大允许进程数\n\n**永久生效：**\n\n```\n/etc/security/limits.d/90-nproc.conf\n或\n/etc/security/limits.conf\n在末行加入\n* hard nproc 1000000\n* soft nproc 1000000\n\n```\n**当前session生效：**\n\n```\nulimit -u 1000000\n```\n- 重新测试，问题果然修复\n\n\n## 总结\n- 问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质\n- 该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧\n","slug":"兼职运维之ulimit-u","published":1,"updated":"2020-01-14T13:15:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dwvmk800170tqkbje4bb6r","content":"<div class=\"note info\"><p>今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"现象-amp-定位\"><a href=\"#现象-amp-定位\" class=\"headerlink\" title=\"现象&amp;定位\"></a>现象&amp;定位</h2><ul>\n<li>部署完成后，收到测试人员反馈业务运行异常</li>\n<li><p>排查后，定位为livy向spark提交任务时执行失败<br>livy日志如下：<br><img src=\"https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg\" alt=\"spark异常.jpg\"></p>\n</li>\n<li><p>初看有点懵，将关键字<code>spark</code>和<code>OpenBLAS blas_thread_init</code>提交google，结果大多匹配python运行时相关异常，<br><img src=\"https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg\" alt=\"spark异常google.jpg\"></p>\n</li>\n<li><p>仔细看不难发现<code>RLIMIT_NPROC 4096 current, 514476 max</code></p>\n</li>\n<li>由此自然联想到<code>ulimit -u</code>，一查发现果然只有4096</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>解决方案也简单，设置系统最大允许进程数</li>\n</ul>\n<p><strong>永久生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">或</span><br><span class=\"line\">/etc/security/limits.conf</span><br><span class=\"line\">在末行加入</span><br><span class=\"line\">* hard nproc 1000000</span><br><span class=\"line\">* soft nproc 1000000</span><br></pre></td></tr></table></figure>\n<p><strong>当前session生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -u 1000000</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新测试，问题果然修复</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质</li>\n<li>该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。</p></div>","more":"<h2 id=\"现象-amp-定位\"><a href=\"#现象-amp-定位\" class=\"headerlink\" title=\"现象&amp;定位\"></a>现象&amp;定位</h2><ul>\n<li>部署完成后，收到测试人员反馈业务运行异常</li>\n<li><p>排查后，定位为livy向spark提交任务时执行失败<br>livy日志如下：<br><img src=\"https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg\" alt=\"spark异常.jpg\"></p>\n</li>\n<li><p>初看有点懵，将关键字<code>spark</code>和<code>OpenBLAS blas_thread_init</code>提交google，结果大多匹配python运行时相关异常，<br><img src=\"https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg\" alt=\"spark异常google.jpg\"></p>\n</li>\n<li><p>仔细看不难发现<code>RLIMIT_NPROC 4096 current, 514476 max</code></p>\n</li>\n<li>由此自然联想到<code>ulimit -u</code>，一查发现果然只有4096</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>解决方案也简单，设置系统最大允许进程数</li>\n</ul>\n<p><strong>永久生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">或</span><br><span class=\"line\">/etc/security/limits.conf</span><br><span class=\"line\">在末行加入</span><br><span class=\"line\">* hard nproc 1000000</span><br><span class=\"line\">* soft nproc 1000000</span><br></pre></td></tr></table></figure>\n<p><strong>当前session生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -u 1000000</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新测试，问题果然修复</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质</li>\n<li>该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧</li>\n</ul>"},{"title":"shell编码整理","date":"2020-01-13T13:54:44.000Z","_content":"\n{%note info%}\n从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。\n{%endnote%}\n<!--more-->\n\n## 常用语法\n### test\n- 用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试\n```shell\nif test  -e startup.sh ;then \n等价于\nif [[ -e startup.sh ]];then\n```\n- 注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&&、||、<和> 等操作符\n\n### 数组\n- 定义数组\n```shell\nmodules=(bond-web bifrost model-engine gaeaproxy) \n```\n- 获取数组所有元素，@可被*替换\n```shell\n${modules[@]}\n```\n- 遍历数组\n```shell\nfor module in \"${modules[@]}\"; do\necho $module\ndone\n```\n- 读取数组指定元素\n```shell\n${modules[index]} \n```\n- 数组长度\n```shell\n@可被*替换|${#my_array[@]}\n```\n\n### 变量\n- 全局变量\n```shell\n# 全局变量的作用域是当前的进程，而不是前端的shell脚本文件\na=1\n```\n- 局部变量\n```shell\nlocal a=1\n```\n- 环境变量\n```shell\nexport a=1\n作用域为当前shell进程和其子进程\n```\n- 特殊变量\n\n|示例|变量含义|\n|:---:|:---|\n|$@|所有入参，可以通过set设置 set 11 22 33 44|\n|$#|参数个数|\n|$?|上个命令的退出状态|函数的返回值|\n|$$|当前shell进程的ID|\n|$!|Shell最后运行的后台Process的PID|\n|total=$#｜action=${!total}|获取最后一个参数，也可通过eval action=\\$$#|\n｜\\` \\`｜指令定义，相较于''，``会预执行，在指令嵌套时经常用到｜\n｜echo $aa | echo ${aa}｜读取变量｜\t\t\n｜$((2+3)) ｜进行整数运算｜\n\n### eval\n- 该命令对变量进行两次扫描\n```shell\na=`echo hello`\nb='echo $a' \n等价于\na='echo hello'\nb=eval 'echo $a'\n```\n### 引号\n|示例|含义|\n|:---:|:---|\n|' ' 单引号|剥夺所有字符的特殊含义，如 n=3；echo '$n' -> $n|\n|\" \" 双引号|引号内可参数替换，$和反引号 ``|\n|``反引号|用命令替换，即先执行``内命令，将输出结果暂存，在适当的地方输出|\n\t\n### 重定向\n```shell\nehco 'haha' > /tmp/tmp.log 2>&1\n```\n\t \n## 常见的服务启动脚本\n```shell\n#!/bin/bash\n\neval action=\\$$#\n\nmain() {\n    case \"$module\" in\n        module1)\n            start_cmd=\"cmd1\"\n            ;;\n        module2)\n            start_cmd=\"cmd2\"\n            ;;\n        *)\n            echo \"usage: $module {module1|module2}\"\n            exit -1\n    esac\n}\n\nall() {\n\t  for module in \"${modules[@]}\"; do\n\t      main\n\t      echo\n        echo \"[INFO] $module:\"\n            echo \"[INFO] processing: ${module} ${action}\"\n            echo \"==================\"\n            action\n            echo \"--------------\"\n    done\n}\n\naction() {\n\tcase \"$action\" in\n\t\tstart)\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\tstop)\n\t\t\tstop\n\t\t\t;;\n\t\tstatus)\n\t\t\tstatus\n\t\t\t;;\n\t\trestart)\n\t\t\tstop\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\t*)\n\t\t\techo \"usage: $action {start|stop|status|restart}\"\n\t\t\texit -1\n\tesac\n}\n\nusage() {\n    echo \"usage: $0 {all|[module1, ...]} {start|stop|status|restart}\"\n}\n\nmultiple() {\n    total=$#\n    action=${!total}\n    for (( i=1; i<total; i++)); do\n        module=${!i//\\//}\n        main\n\t     echo \"[INFO] $module:${start_cmd}\"\n        echo \"[INFO] processing: ${module} ${action}\"\n        echo \"==================\"\n        action\n        echo \"--------------\"\n    done\n}\n\ngetpid() {\n    if [ ! -d \"pids\" ]; then\n        mkdir pids\n    fi\n    if [ ! -f \"pids/${module}_pid\" ];then\n        echo \"\" > pids/${module}_pid\n    fi\n    module_pid=`cat pids/${module}_pid`\n\n    pid=`ps aux | grep ${module_pid} | grep -v grep | grep -v $0 | awk '{print $2}'`\n\n    if [[ -n ${pid} ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nstatus() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"status:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        return 0\n    else\n        echo \"service not running\"\n        return 1\n    fi\n}\n\nstart() {\n    getpid\n    if [[ $? -eq 1 ]]; then\n        eval $start_cmd\n        echo $!>pids/${module}_pid\n        getpid\n        if [[ $? -eq 0 ]]; then\n            echo \"service start sucessfully. pid: ${pid}\"\n        else\n            echo \"service start failed\"\n        fi\n    else\n        echo \"service already started. pid: ${pid}\"\n    fi\n}\n\nstop() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"killing:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        kill -9 ${pid} && sleep 0.01\n\t\t    getpid\n        if [[ $? -eq 1 ]]; then\n            echo \"killed\"\n        else\n            echo \"kill error\"\n        fi\n    else\n        echo \"service not running\"\n    fi\n}\n\ncase \"$1\" in\n    all)\n        all $@\n        ;;\n    usage)\n        usage\n        ;;\n    *)\n        multiple $@\n        ;;\nesac\n```\n- 注意服务启动间隔如果不加`sleep 0.01`，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间\n\n## 开机启动\n- 将启动指令配置进/etc/rc.d/rc.local\n- 注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败","source":"_posts/2020-01-13-shell编码整理.md","raw":"---\ntitle: shell编码整理\ndate: 2020-01-13 21:54:44\ntags: \n- shell\n- 部署\n- 运维\ncategories: \n- shell\n---\n\n{%note info%}\n从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。\n{%endnote%}\n<!--more-->\n\n## 常用语法\n### test\n- 用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试\n```shell\nif test  -e startup.sh ;then \n等价于\nif [[ -e startup.sh ]];then\n```\n- 注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&&、||、<和> 等操作符\n\n### 数组\n- 定义数组\n```shell\nmodules=(bond-web bifrost model-engine gaeaproxy) \n```\n- 获取数组所有元素，@可被*替换\n```shell\n${modules[@]}\n```\n- 遍历数组\n```shell\nfor module in \"${modules[@]}\"; do\necho $module\ndone\n```\n- 读取数组指定元素\n```shell\n${modules[index]} \n```\n- 数组长度\n```shell\n@可被*替换|${#my_array[@]}\n```\n\n### 变量\n- 全局变量\n```shell\n# 全局变量的作用域是当前的进程，而不是前端的shell脚本文件\na=1\n```\n- 局部变量\n```shell\nlocal a=1\n```\n- 环境变量\n```shell\nexport a=1\n作用域为当前shell进程和其子进程\n```\n- 特殊变量\n\n|示例|变量含义|\n|:---:|:---|\n|$@|所有入参，可以通过set设置 set 11 22 33 44|\n|$#|参数个数|\n|$?|上个命令的退出状态|函数的返回值|\n|$$|当前shell进程的ID|\n|$!|Shell最后运行的后台Process的PID|\n|total=$#｜action=${!total}|获取最后一个参数，也可通过eval action=\\$$#|\n｜\\` \\`｜指令定义，相较于''，``会预执行，在指令嵌套时经常用到｜\n｜echo $aa | echo ${aa}｜读取变量｜\t\t\n｜$((2+3)) ｜进行整数运算｜\n\n### eval\n- 该命令对变量进行两次扫描\n```shell\na=`echo hello`\nb='echo $a' \n等价于\na='echo hello'\nb=eval 'echo $a'\n```\n### 引号\n|示例|含义|\n|:---:|:---|\n|' ' 单引号|剥夺所有字符的特殊含义，如 n=3；echo '$n' -> $n|\n|\" \" 双引号|引号内可参数替换，$和反引号 ``|\n|``反引号|用命令替换，即先执行``内命令，将输出结果暂存，在适当的地方输出|\n\t\n### 重定向\n```shell\nehco 'haha' > /tmp/tmp.log 2>&1\n```\n\t \n## 常见的服务启动脚本\n```shell\n#!/bin/bash\n\neval action=\\$$#\n\nmain() {\n    case \"$module\" in\n        module1)\n            start_cmd=\"cmd1\"\n            ;;\n        module2)\n            start_cmd=\"cmd2\"\n            ;;\n        *)\n            echo \"usage: $module {module1|module2}\"\n            exit -1\n    esac\n}\n\nall() {\n\t  for module in \"${modules[@]}\"; do\n\t      main\n\t      echo\n        echo \"[INFO] $module:\"\n            echo \"[INFO] processing: ${module} ${action}\"\n            echo \"==================\"\n            action\n            echo \"--------------\"\n    done\n}\n\naction() {\n\tcase \"$action\" in\n\t\tstart)\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\tstop)\n\t\t\tstop\n\t\t\t;;\n\t\tstatus)\n\t\t\tstatus\n\t\t\t;;\n\t\trestart)\n\t\t\tstop\n\t\t\tstart\n\t\t\tstatus\n\t\t\t;;\n\t\t*)\n\t\t\techo \"usage: $action {start|stop|status|restart}\"\n\t\t\texit -1\n\tesac\n}\n\nusage() {\n    echo \"usage: $0 {all|[module1, ...]} {start|stop|status|restart}\"\n}\n\nmultiple() {\n    total=$#\n    action=${!total}\n    for (( i=1; i<total; i++)); do\n        module=${!i//\\//}\n        main\n\t     echo \"[INFO] $module:${start_cmd}\"\n        echo \"[INFO] processing: ${module} ${action}\"\n        echo \"==================\"\n        action\n        echo \"--------------\"\n    done\n}\n\ngetpid() {\n    if [ ! -d \"pids\" ]; then\n        mkdir pids\n    fi\n    if [ ! -f \"pids/${module}_pid\" ];then\n        echo \"\" > pids/${module}_pid\n    fi\n    module_pid=`cat pids/${module}_pid`\n\n    pid=`ps aux | grep ${module_pid} | grep -v grep | grep -v $0 | awk '{print $2}'`\n\n    if [[ -n ${pid} ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nstatus() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"status:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        return 0\n    else\n        echo \"service not running\"\n        return 1\n    fi\n}\n\nstart() {\n    getpid\n    if [[ $? -eq 1 ]]; then\n        eval $start_cmd\n        echo $!>pids/${module}_pid\n        getpid\n        if [[ $? -eq 0 ]]; then\n            echo \"service start sucessfully. pid: ${pid}\"\n        else\n            echo \"service start failed\"\n        fi\n    else\n        echo \"service already started. pid: ${pid}\"\n    fi\n}\n\nstop() {\n    getpid\n    if [[ -n ${pid} ]]; then\n        echo \"killing:\n        `ps aux | grep ${pid} | grep -v grep`\"\n        kill -9 ${pid} && sleep 0.01\n\t\t    getpid\n        if [[ $? -eq 1 ]]; then\n            echo \"killed\"\n        else\n            echo \"kill error\"\n        fi\n    else\n        echo \"service not running\"\n    fi\n}\n\ncase \"$1\" in\n    all)\n        all $@\n        ;;\n    usage)\n        usage\n        ;;\n    *)\n        multiple $@\n        ;;\nesac\n```\n- 注意服务启动间隔如果不加`sleep 0.01`，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间\n\n## 开机启动\n- 将启动指令配置进/etc/rc.d/rc.local\n- 注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败","slug":"shell编码整理","published":1,"updated":"2020-01-14T14:34:13.000Z","_id":"ck5dwvmka001a0tqklln1p6b8","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info\"><p>从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h2><h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><ul>\n<li><p>用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test  -e startup.sh ;then </span><br><span class=\"line\">等价于</span><br><span class=\"line\">if [[ -e startup.sh ]];then</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&amp;&amp;、||、&lt;和&gt; 等操作符</p>\n</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li><p>定义数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules=(bond-web bifrost model-engine gaeaproxy)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组所有元素，@可被*替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">echo $module</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组指定元素</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[index]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组长度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@可被*替换|$&#123;#my_array[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li><p>全局变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 全局变量的作用域是当前的进程，而不是前端的shell脚本文件</span><br><span class=\"line\">a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>局部变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export a=1</span><br><span class=\"line\">作用域为当前shell进程和其子进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊变量</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">变量含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$@</td>\n<td style=\"text-align:left\">所有入参，可以通过set设置 set 11 22 33 44</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$#</td>\n<td style=\"text-align:left\">参数个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$?</td>\n<td style=\"text-align:left\">上个命令的退出状态</td>\n<td>函数的返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$$</td>\n<td style=\"text-align:left\">当前shell进程的ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$!</td>\n<td style=\"text-align:left\">Shell最后运行的后台Process的PID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">total=$#｜action=${!total}</td>\n<td style=\"text-align:left\">获取最后一个参数，也可通过eval action=\\$$#</td>\n</tr>\n</tbody>\n</table>\n<p>｜` `｜指令定义，相较于’’，<code></code>会预执行，在指令嵌套时经常用到｜<br>｜echo $aa | echo ${aa}｜读取变量｜<br>｜$((2+3)) ｜进行整数运算｜</p>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h3><ul>\n<li>该命令对变量进行两次扫描<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=`echo hello`</span><br><span class=\"line\">b='echo $a' </span><br><span class=\"line\">等价于</span><br><span class=\"line\">a='echo hello'</span><br><span class=\"line\">b=eval 'echo $a'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘ ‘ 单引号</td>\n<td style=\"text-align:left\">剥夺所有字符的特殊含义，如 n=3；echo ‘$n’ -&gt; $n</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“ “ 双引号</td>\n<td style=\"text-align:left\">引号内可参数替换，$和反引号 <code></code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code></code>反引号</td>\n<td style=\"text-align:left\">用命令替换，即先执行<code></code>内命令，将输出结果暂存，在适当的地方输出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ehco 'haha' &gt; /tmp/tmp.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的服务启动脚本\"><a href=\"#常见的服务启动脚本\" class=\"headerlink\" title=\"常见的服务启动脚本\"></a>常见的服务启动脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">eval action=\\$$#</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    case \"$module\" in</span><br><span class=\"line\">        module1)</span><br><span class=\"line\">            start_cmd=\"cmd1\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        module2)</span><br><span class=\"line\">            start_cmd=\"cmd2\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo \"usage: $module &#123;module1|module2&#125;\"</span><br><span class=\"line\">            exit -1</span><br><span class=\"line\">    esac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">all() &#123;</span><br><span class=\"line\">\t  for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">\t      main</span><br><span class=\"line\">\t      echo</span><br><span class=\"line\">        echo \"[INFO] $module:\"</span><br><span class=\"line\">            echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">            echo \"==================\"</span><br><span class=\"line\">            action</span><br><span class=\"line\">            echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">action() &#123;</span><br><span class=\"line\">\tcase \"$action\" in</span><br><span class=\"line\">\t\tstart)</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstop)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstatus)</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\trestart)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\techo \"usage: $action &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">\t\t\texit -1</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">usage() &#123;</span><br><span class=\"line\">    echo \"usage: $0 &#123;all|[module1, ...]&#125; &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">multiple() &#123;</span><br><span class=\"line\">    total=$#</span><br><span class=\"line\">    action=$&#123;!total&#125;</span><br><span class=\"line\">    for (( i=1; i&lt;total; i++)); do</span><br><span class=\"line\">        module=$&#123;!i//\\//&#125;</span><br><span class=\"line\">        main</span><br><span class=\"line\">\t     echo \"[INFO] $module:$&#123;start_cmd&#125;\"</span><br><span class=\"line\">        echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">        echo \"==================\"</span><br><span class=\"line\">        action</span><br><span class=\"line\">        echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getpid() &#123;</span><br><span class=\"line\">    if [ ! -d \"pids\" ]; then</span><br><span class=\"line\">        mkdir pids</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    if [ ! -f \"pids/$&#123;module&#125;_pid\" ];then</span><br><span class=\"line\">        echo \"\" &gt; pids/$&#123;module&#125;_pid</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    module_pid=`cat pids/$&#123;module&#125;_pid`</span><br><span class=\"line\"></span><br><span class=\"line\">    pid=`ps aux | grep $&#123;module_pid&#125; | grep -v grep | grep -v $0 | awk '&#123;print $2&#125;'`</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">status() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"status:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">        eval $start_cmd</span><br><span class=\"line\">        echo $!&gt;pids/$&#123;module&#125;_pid</span><br><span class=\"line\">        getpid</span><br><span class=\"line\">        if [[ $? -eq 0 ]]; then</span><br><span class=\"line\">            echo \"service start sucessfully. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"service start failed\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service already started. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"killing:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        kill -9 $&#123;pid&#125; &amp;&amp; sleep 0.01</span><br><span class=\"line\">\t\t    getpid</span><br><span class=\"line\">        if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">            echo \"killed\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"kill error\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case \"$1\" in</span><br><span class=\"line\">    all)</span><br><span class=\"line\">        all $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    usage)</span><br><span class=\"line\">        usage</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        multiple $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意服务启动间隔如果不加<code>sleep 0.01</code>，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间</li>\n</ul>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><ul>\n<li>将启动指令配置进/etc/rc.d/rc.local</li>\n<li>注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>从开始接触linux，或多或少会使用到shell，这篇文章用来整理下用过的shell语法，和比较常见的套路。</p></div>","more":"<h2 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h2><h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><ul>\n<li><p>用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test  -e startup.sh ;then </span><br><span class=\"line\">等价于</span><br><span class=\"line\">if [[ -e startup.sh ]];then</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：可以使用[[]]就不要使用[]，[[]]兼容在命令中使用&amp;&amp;、||、&lt;和&gt; 等操作符</p>\n</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li><p>定义数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules=(bond-web bifrost model-engine gaeaproxy)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组所有元素，@可被*替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">echo $module</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组指定元素</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>&#123;modules[index]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组长度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@可被*替换|$&#123;#my_array[@]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li><p>全局变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 全局变量的作用域是当前的进程，而不是前端的shell脚本文件</span><br><span class=\"line\">a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>局部变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local a=1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export a=1</span><br><span class=\"line\">作用域为当前shell进程和其子进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊变量</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">变量含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$@</td>\n<td style=\"text-align:left\">所有入参，可以通过set设置 set 11 22 33 44</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$#</td>\n<td style=\"text-align:left\">参数个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$?</td>\n<td style=\"text-align:left\">上个命令的退出状态</td>\n<td>函数的返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$$</td>\n<td style=\"text-align:left\">当前shell进程的ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$!</td>\n<td style=\"text-align:left\">Shell最后运行的后台Process的PID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">total=$#｜action=${!total}</td>\n<td style=\"text-align:left\">获取最后一个参数，也可通过eval action=\\$$#</td>\n</tr>\n</tbody>\n</table>\n<p>｜` `｜指令定义，相较于’’，<code></code>会预执行，在指令嵌套时经常用到｜<br>｜echo $aa | echo ${aa}｜读取变量｜<br>｜$((2+3)) ｜进行整数运算｜</p>\n<h3 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h3><ul>\n<li>该命令对变量进行两次扫描<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=`echo hello`</span><br><span class=\"line\">b='echo $a' </span><br><span class=\"line\">等价于</span><br><span class=\"line\">a='echo hello'</span><br><span class=\"line\">b=eval 'echo $a'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘ ‘ 单引号</td>\n<td style=\"text-align:left\">剥夺所有字符的特殊含义，如 n=3；echo ‘$n’ -&gt; $n</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“ “ 双引号</td>\n<td style=\"text-align:left\">引号内可参数替换，$和反引号 <code></code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code></code>反引号</td>\n<td style=\"text-align:left\">用命令替换，即先执行<code></code>内命令，将输出结果暂存，在适当的地方输出</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ehco 'haha' &gt; /tmp/tmp.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的服务启动脚本\"><a href=\"#常见的服务启动脚本\" class=\"headerlink\" title=\"常见的服务启动脚本\"></a>常见的服务启动脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">eval action=\\$$#</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    case \"$module\" in</span><br><span class=\"line\">        module1)</span><br><span class=\"line\">            start_cmd=\"cmd1\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        module2)</span><br><span class=\"line\">            start_cmd=\"cmd2\"</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo \"usage: $module &#123;module1|module2&#125;\"</span><br><span class=\"line\">            exit -1</span><br><span class=\"line\">    esac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">all() &#123;</span><br><span class=\"line\">\t  for module in \"$&#123;modules[@]&#125;\"; do</span><br><span class=\"line\">\t      main</span><br><span class=\"line\">\t      echo</span><br><span class=\"line\">        echo \"[INFO] $module:\"</span><br><span class=\"line\">            echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">            echo \"==================\"</span><br><span class=\"line\">            action</span><br><span class=\"line\">            echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">action() &#123;</span><br><span class=\"line\">\tcase \"$action\" in</span><br><span class=\"line\">\t\tstart)</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstop)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstatus)</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\trestart)</span><br><span class=\"line\">\t\t\tstop</span><br><span class=\"line\">\t\t\tstart</span><br><span class=\"line\">\t\t\tstatus</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\techo \"usage: $action &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">\t\t\texit -1</span><br><span class=\"line\">\tesac</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">usage() &#123;</span><br><span class=\"line\">    echo \"usage: $0 &#123;all|[module1, ...]&#125; &#123;start|stop|status|restart&#125;\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">multiple() &#123;</span><br><span class=\"line\">    total=$#</span><br><span class=\"line\">    action=$&#123;!total&#125;</span><br><span class=\"line\">    for (( i=1; i&lt;total; i++)); do</span><br><span class=\"line\">        module=$&#123;!i//\\//&#125;</span><br><span class=\"line\">        main</span><br><span class=\"line\">\t     echo \"[INFO] $module:$&#123;start_cmd&#125;\"</span><br><span class=\"line\">        echo \"[INFO] processing: $&#123;module&#125; $&#123;action&#125;\"</span><br><span class=\"line\">        echo \"==================\"</span><br><span class=\"line\">        action</span><br><span class=\"line\">        echo \"--------------\"</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getpid() &#123;</span><br><span class=\"line\">    if [ ! -d \"pids\" ]; then</span><br><span class=\"line\">        mkdir pids</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    if [ ! -f \"pids/$&#123;module&#125;_pid\" ];then</span><br><span class=\"line\">        echo \"\" &gt; pids/$&#123;module&#125;_pid</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    module_pid=`cat pids/$&#123;module&#125;_pid`</span><br><span class=\"line\"></span><br><span class=\"line\">    pid=`ps aux | grep $&#123;module_pid&#125; | grep -v grep | grep -v $0 | awk '&#123;print $2&#125;'`</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">status() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"status:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">        eval $start_cmd</span><br><span class=\"line\">        echo $!&gt;pids/$&#123;module&#125;_pid</span><br><span class=\"line\">        getpid</span><br><span class=\"line\">        if [[ $? -eq 0 ]]; then</span><br><span class=\"line\">            echo \"service start sucessfully. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"service start failed\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service already started. pid: $&#123;pid&#125;\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    getpid</span><br><span class=\"line\">    if [[ -n $&#123;pid&#125; ]]; then</span><br><span class=\"line\">        echo \"killing:</span><br><span class=\"line\">        `ps aux | grep $&#123;pid&#125; | grep -v grep`\"</span><br><span class=\"line\">        kill -9 $&#123;pid&#125; &amp;&amp; sleep 0.01</span><br><span class=\"line\">\t\t    getpid</span><br><span class=\"line\">        if [[ $? -eq 1 ]]; then</span><br><span class=\"line\">            echo \"killed\"</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo \"kill error\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo \"service not running\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case \"$1\" in</span><br><span class=\"line\">    all)</span><br><span class=\"line\">        all $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    usage)</span><br><span class=\"line\">        usage</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        multiple $@</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意服务启动间隔如果不加<code>sleep 0.01</code>，可能会导致获取服务状态异常，即杀掉服务需要一定的信号处理时间</li>\n</ul>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><ul>\n<li>将启动指令配置进/etc/rc.d/rc.local</li>\n<li>注意，任何一个脚本执行失败，即exit非0，将导致该shell session内的所有启动服务失败，而如何配置在rc.local中的指令exit非0，将导致整个系统初始化失败</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck5dwvme200010tqkk9tuqw3x","category_id":"ck5dwvme500030tqkkx0t3hfd","_id":"ck5dwvme800070tqkxbivd2mo"},{"post_id":"ck5dwvme400020tqkkyw9rx5g","category_id":"ck5dwvme800050tqk87p4et6j","_id":"ck5dwvmeb000b0tqkex5tfyyu"},{"post_id":"ck5dwvmjq000l0tqknbbgeoma","category_id":"ck5dwvme800050tqk87p4et6j","_id":"ck5dwvmjz000s0tqkqcpq7cr8"},{"post_id":"ck5dwvmjs000n0tqk6ks0t32g","category_id":"ck5dwvmjq000j0tqkgbqix6zy","_id":"ck5dwvmk0000u0tqkazqjosow"},{"post_id":"ck5dwvmjm000f0tqkk9g0jq4c","category_id":"ck5dwvmjq000j0tqkgbqix6zy","_id":"ck5dwvmk3000y0tqk4hcr8ai9"},{"post_id":"ck5dwvmjo000h0tqk3gnkozax","category_id":"ck5dwvmjx000p0tqks3g3cu5a","_id":"ck5dwvmk400120tqk49v4zm4n"},{"post_id":"ck5dwvmjw000o0tqkvjm92moh","category_id":"ck5dwvmk0000v0tqk7t6c2bl2","_id":"ck5dwvmk900180tqknleemf6s"},{"post_id":"ck5dwvmk2000x0tqkf51blnbj","category_id":"ck5dwvmk400140tqk5vo48htq","_id":"ck5dwvmkc001d0tqk2y2p42g4"},{"post_id":"ck5dwvmk800170tqkbje4bb6r","category_id":"ck5dwvmkb001b0tqk6y05yh5v","_id":"ck5dwvmke001j0tqkefkzw00s"},{"post_id":"ck5dwvmka001a0tqklln1p6b8","category_id":"ck5dwvmkd001f0tqkj6rk0s5m","_id":"ck5dwvmkg001m0tqkrzuj2sif"}],"PostTag":[{"post_id":"ck5dwvme200010tqkk9tuqw3x","tag_id":"ck5dwvme700040tqkmg4iks2z","_id":"ck5dwvmea00090tqketva5ibs"},{"post_id":"ck5dwvme200010tqkk9tuqw3x","tag_id":"ck5dwvme800060tqkvbjnfz6w","_id":"ck5dwvmeb000a0tqk2j6ge7do"},{"post_id":"ck5dwvme400020tqkkyw9rx5g","tag_id":"ck5dwvme800080tqkc6il5hgu","_id":"ck5dwvmec000d0tqkn89t3w19"},{"post_id":"ck5dwvme400020tqkkyw9rx5g","tag_id":"ck5dwvmec000c0tqk5bktpkwa","_id":"ck5dwvmec000e0tqkywy8my3t"},{"post_id":"ck5dwvmjm000f0tqkk9g0jq4c","tag_id":"ck5dwvmjq000k0tqkqz323k5b","_id":"ck5dwvmk3000z0tqkbntimu8d"},{"post_id":"ck5dwvmjm000f0tqkk9g0jq4c","tag_id":"ck5dwvmjx000q0tqk4pr1uelb","_id":"ck5dwvmk400110tqkbawp2u5u"},{"post_id":"ck5dwvmjo000h0tqk3gnkozax","tag_id":"ck5dwvmk0000w0tqkvahu4e1s","_id":"ck5dwvmk700160tqk7sfv2nol"},{"post_id":"ck5dwvmjq000l0tqknbbgeoma","tag_id":"ck5dwvmjq000k0tqkqz323k5b","_id":"ck5dwvmkc001e0tqkjd1vp0li"},{"post_id":"ck5dwvmjq000l0tqknbbgeoma","tag_id":"ck5dwvmec000c0tqk5bktpkwa","_id":"ck5dwvmkd001g0tqku8tkbdt8"},{"post_id":"ck5dwvmjq000l0tqknbbgeoma","tag_id":"ck5dwvmk900190tqkx8lyry4o","_id":"ck5dwvmke001i0tqk6li75ok2"},{"post_id":"ck5dwvmjs000n0tqk6ks0t32g","tag_id":"ck5dwvmjq000k0tqkqz323k5b","_id":"ck5dwvmkg001l0tqkd29z0dg8"},{"post_id":"ck5dwvmjs000n0tqk6ks0t32g","tag_id":"ck5dwvmkc001c0tqkmh5tap41","_id":"ck5dwvmkh001n0tqkc4v97xyj"},{"post_id":"ck5dwvmjs000n0tqk6ks0t32g","tag_id":"ck5dwvmkd001h0tqk2rkgxoei","_id":"ck5dwvmkh001p0tqk833eibng"},{"post_id":"ck5dwvmjw000o0tqkvjm92moh","tag_id":"ck5dwvmk0000w0tqkvahu4e1s","_id":"ck5dwvmki001r0tqkjahtrqvp"},{"post_id":"ck5dwvmjw000o0tqkvjm92moh","tag_id":"ck5dwvmkh001o0tqk46g2zac9","_id":"ck5dwvmki001s0tqka1s9ykma"},{"post_id":"ck5dwvmjy000r0tqkmxwrej73","tag_id":"ck5dwvmk0000w0tqkvahu4e1s","_id":"ck5dwvmkj001u0tqki1a1tuiv"},{"post_id":"ck5dwvmjz000t0tqkczx1bj5t","tag_id":"ck5dwvmki001t0tqk84lab07h","_id":"ck5dwvmkk001w0tqk8xb2gfl8"},{"post_id":"ck5dwvmk2000x0tqkf51blnbj","tag_id":"ck5dwvmkk001v0tqkn40rcxt6","_id":"ck5dwvmkm001z0tqk5wnqqwat"},{"post_id":"ck5dwvmk2000x0tqkf51blnbj","tag_id":"ck5dwvmkl001x0tqk7cwibbch","_id":"ck5dwvmkm00200tqk4zx3c7al"},{"post_id":"ck5dwvmk300100tqkeherzyb3","tag_id":"ck5dwvmjq000k0tqkqz323k5b","_id":"ck5dwvmkn00220tqktiysj8d3"},{"post_id":"ck5dwvmk300100tqkeherzyb3","tag_id":"ck5dwvmk0000w0tqkvahu4e1s","_id":"ck5dwvmkn00230tqkk0hhu3xr"},{"post_id":"ck5dwvmk300100tqkeherzyb3","tag_id":"ck5dwvmkl001y0tqkwkadtc7z","_id":"ck5dwvmko00250tqkgizwcu6z"},{"post_id":"ck5dwvmk600150tqk7xl07a7s","tag_id":"ck5dwvmkm00210tqkpxc3hdb1","_id":"ck5dwvmko00260tqk4sxpukml"},{"post_id":"ck5dwvmk800170tqkbje4bb6r","tag_id":"ck5dwvmkn00240tqkd2o451oc","_id":"ck5dwvmkp00280tqk58bvrkn1"},{"post_id":"ck5dwvmka001a0tqklln1p6b8","tag_id":"ck5dwvmko00270tqkr5y7ru42","_id":"ck5dwvmkq002b0tqkz77vt16g"},{"post_id":"ck5dwvmka001a0tqklln1p6b8","tag_id":"ck5dwvmkm00210tqkpxc3hdb1","_id":"ck5dwvmkq002c0tqkg046cqfk"},{"post_id":"ck5dwvmka001a0tqklln1p6b8","tag_id":"ck5dwvmkq002a0tqk77ukk0lf","_id":"ck5dwvmkq002d0tqkw0ul77jo"}],"Tag":[{"name":"docker","_id":"ck5dwvme700040tqkmg4iks2z"},{"name":"wins10","_id":"ck5dwvme800060tqkvbjnfz6w"},{"name":"mysql","_id":"ck5dwvme800080tqkc6il5hgu"},{"name":"问题分析","_id":"ck5dwvmec000c0tqk5bktpkwa"},{"name":"flask","_id":"ck5dwvmjq000k0tqkqz323k5b"},{"name":"sse","_id":"ck5dwvmjx000q0tqk4pr1uelb"},{"name":"python","_id":"ck5dwvmk0000w0tqkvahu4e1s"},{"name":"linux","_id":"ck5dwvmk900190tqkx8lyry4o"},{"name":"session","_id":"ck5dwvmkc001c0tqkmh5tap41"},{"name":"分布式","_id":"ck5dwvmkd001h0tqk2rkgxoei"},{"name":"coding-tools","_id":"ck5dwvmkh001o0tqk46g2zac9"},{"name":"hexo","_id":"ck5dwvmki001t0tqk84lab07h"},{"name":"algorithm","_id":"ck5dwvmkk001v0tqkn40rcxt6"},{"name":"datastructure","_id":"ck5dwvmkl001x0tqk7cwibbch"},{"name":"源码浅析","_id":"ck5dwvmkl001y0tqkwkadtc7z"},{"name":"部署","_id":"ck5dwvmkm00210tqkpxc3hdb1"},{"name":"兼职运维","_id":"ck5dwvmkn00240tqkd2o451oc"},{"name":"shell","_id":"ck5dwvmko00270tqkr5y7ru42"},{"name":"运维","_id":"ck5dwvmkq002a0tqk77ukk0lf"}]}}
>>>>>>> 6fe58ba615985952ef8eb00bbe4e28ac48964802
