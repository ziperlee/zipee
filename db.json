{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"86d61d167816163313e20062acfa5d2ccf04fd0c","modified":1577452049000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1577282472000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1577282472000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1577282472000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1577282472000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1577282472000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1577282472000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1577282472000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1577282472000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1577282472000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1577282472000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1577282472000},{"_id":"themes/next/_config.yml","hash":"0b168cd6e64768d2b97746ecbac790bdca710079","modified":1577282472000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1577282472000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1577282472000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1577282472000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1577282472000},{"_id":"source/_drafts/draft-file.md","hash":"3c9c54c33f64ace8d1bad8cf4b98d1b26d3929b5","modified":1577282472000},{"_id":"source/_posts/2018-11-04-win10docker使用填坑.md","hash":"a50c12bbcf0f965a114a9b238e1e0c4bc1574515","modified":1577282472000},{"_id":"source/_posts/2018-11-25-flask服务端推送.md","hash":"a4894691b0c563cda83ae847bc3bbd4dacafb189","modified":1577282472000},{"_id":"source/_posts/2018-12-30-python代码加密部署.md","hash":"9bcc1d71cf213bc1dfe60b5142e764e40ecdda5a","modified":1577282472000},{"_id":"source/_posts/2019-03-10-webserver异常-TooManyOpenFiles.md","hash":"2889858132b88c64caeb115d0f70a1503986fd90","modified":1577282472000},{"_id":"source/_posts/2019-01-22-sqlalchemy数据库连接数异常.md","hash":"e4a596b72dc6ee55153ed6e06e32dfe802c4e985","modified":1577282472000},{"_id":"source/_posts/2019-04-27-pycharm远程调试.md","hash":"0a2d58d0ef2c5f9a175fdcbe7fc665b713bb4bdd","modified":1577282472000},{"_id":"source/_posts/2019-03-25-flask分布式部署及flask-session.md","hash":"37d1965ee66cfcb856ee3602b3c7db27f08857de","modified":1577282472000},{"_id":"source/_posts/2019-06-16-数据结构与算法总结.md","hash":"7654e01636b72383e984f40fb710c185427c254b","modified":1577282472000},{"_id":"source/_posts/2019-06-09-python程序员开发规范.md","hash":"e230216515fee18c5a6b3ac5252aaafcb4a04a6c","modified":1577282472000},{"_id":"source/_posts/2019-12-23-fabric使用总结.md","hash":"28d649b47cdcb54021734ab2623d0ccf3722291f","modified":1577451972000},{"_id":"source/_posts/2019-07-14-flask-caching源码浅析.md","hash":"cfcd45b39522d9c7631799c317b82d1e2a1af16b","modified":1577282472000},{"_id":"source/_posts/2019-12-22-hexo容器化部署.md","hash":"5f35b7a052d7c05b87e3745c6950d257142e5365","modified":1577282472000},{"_id":"source/about/index.md","hash":"2304e0e4b1f5950e122f67452218cbee489d8014","modified":1577282472000},{"_id":"source/tags/index.md","hash":"5a41c80f39b3bcb4fa42eb563472008a35bbd705","modified":1577282472000},{"_id":"source/categories/index.md","hash":"977be218662072aa1a9165c22dbe10b6bf2faa89","modified":1577282472000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1577282472000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1577282472000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1577282472000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1577282472000},{"_id":"source/_posts/2019-12-27-兼职运维之ulimit-u.md","hash":"576078ee6289c9f6c5d30bc07eac811d710c3355","modified":1577454327000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1577282472000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1577282472000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1577282472000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1577282472000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1577282472000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1577282472000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1577282472000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1577282472000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1577282472000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1577282472000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1577282472000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1577282472000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1577282472000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1577282472000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1577282472000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1577282472000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1577282472000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1577282472000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1577282472000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1577282472000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1577282472000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1577282472000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1577282472000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1577282472000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1577282472000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1577282472000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1577282472000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1577282472000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1577282472000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1577282472000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1577282472000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1577282472000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1577282472000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1577282472000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1577282472000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1577282472000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1577282472000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1577282472000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1577282472000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577282472000},{"_id":"themes/next/source/images/alipay.jpg","hash":"30f5cded3686ee70d56144f06b8547e3ace3cd8d","modified":1577282472000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577282472000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577282472000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577282472000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577282472000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1577282472000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577282472000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577282472000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577282472000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577282472000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577282472000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577282472000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1577282472000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577282472000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577282472000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577282472000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577282472000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577282472000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1577282472000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1577282472000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"b811a3cd64ecc90533048d12e0d96cec2515d262","modified":1577282472000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1577282472000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1b8055055d05b791d949ed9900eab2257db6e774","modified":1577282472000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1577282472000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1577282472000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1577282472000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1577282472000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1577282472000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1577282472000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"af5bf80880929e4d6951eb7d12c76140da08bc65","modified":1577282472000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1577282472000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1577282472000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1577282472000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1577282472000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1577282472000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1577282472000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1577282472000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1577282472000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1577282472000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1577282472000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1577282472000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1577282472000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1577282472000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1577282472000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/source/images/avatar.jpeg","hash":"48414fbdb4a202ee77595083a0a00cdcb3a99fbc","modified":1577282472000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"3e223daecbb37196edbbeb937ce23063d305aa7b","modified":1577282472000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577282472000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1577282472000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1577282472000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1577282472000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1577282472000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1577282472000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1577282472000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1577282472000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1577282472000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1577282472000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1577282472000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1577282472000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1577282472000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1577282472000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1577282472000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1577282472000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1577282472000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1577282472000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1577282472000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1577282472000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1577282472000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1577282472000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1577282472000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1577282472000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1577282472000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1577282472000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1577282472000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1577282472000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1577282472000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1577282472000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1577282472000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1577282472000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1577282472000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1577282472000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1577282472000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1577282472000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1577282472000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1577282472000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1577282472000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1577282472000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1577282472000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1577282472000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1577282472000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577282472000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1577282472000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577282472000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1577282472000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1577282472000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1577282472000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1577282472000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1577282472000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1577282472000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1577282472000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1577282472000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1577282472000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1577282472000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1577282472000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1577282472000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1577282472000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1577282472000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1577282472000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1577282472000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1577282472000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1577282472000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1577282472000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1577282472000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1577282472000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1577282472000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1577282472000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1577282472000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1577282472000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1577282472000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1577282472000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1577282472000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577282472000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1577282472000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1577282472000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1577282472000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9a005f8ddbc34ec0a3517d7a51a1ed2b26e29779","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"b957cd6817b50558001f825f25b2e60f404c7ca3","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1577282472000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1577282472000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1577282472000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577282472000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1577282472000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577282472000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1577282472000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1577282472000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1577282472000},{"_id":"public/atom.xml","hash":"f3d1c54820f3e869799f47c1a47d57eb17b5fec6","modified":1577455424852},{"_id":"public/tags/index.html","hash":"dca3cb9b56f14e1920ff2a6fd6d0e7266ddcd72a","modified":1577455431033},{"_id":"public/about/index.html","hash":"b79a6eb9fbc373e0c4d7174978fdcc014c587a17","modified":1577455431040},{"_id":"public/categories/index.html","hash":"c144b2cab8dd1c91d7ac4ab2ea573fd2b1d85de2","modified":1577455431040},{"_id":"public/tags/wins10/index.html","hash":"c42c3581fb1c5db4b24af1cfb4e8e4829d49dedd","modified":1577455431040},{"_id":"public/tags/python/index.html","hash":"77aee098e4962fb4a7b96d741980d9f171151628","modified":1577455431040},{"_id":"public/tags/docker/index.html","hash":"fd2a6cfc42ff3b3d9423cd041b8981071bfa9923","modified":1577455431041},{"_id":"public/tags/sse/index.html","hash":"a5f7aa3d3112399d7a06d87a97ee380953deac07","modified":1577455431041},{"_id":"public/tags/问题分析/index.html","hash":"93e09b33a2477ddde2f69bb24c43cda7fd809b5d","modified":1577455431041},{"_id":"public/tags/flask/index.html","hash":"d35c5daefe4a75ade1a326402e3cb5c4403a85a0","modified":1577455431041},{"_id":"public/tags/linux/index.html","hash":"58def7c06121f48643f192fb239eb951fac84fdf","modified":1577455431041},{"_id":"public/2019/12/27/兼职运维之ulimit-u/index.html","hash":"7432f6622f966fdffcf596ec4948b54b338ef474","modified":1577455431041},{"_id":"public/2019/12/23/fabric使用总结/index.html","hash":"87ffa297bd60955b14db3d6f6f598edc6e66a70d","modified":1577455431041},{"_id":"public/2019/12/22/hexo容器化部署/index.html","hash":"460fc6dcb9f7f9d69e99d94ef96b1804017479f1","modified":1577455431041},{"_id":"public/2019/07/14/flask-caching源码浅析/index.html","hash":"b893811eec98871887879111c69ba5d9513e2679","modified":1577455431041},{"_id":"public/2019/06/16/数据结构与算法总结/index.html","hash":"98ea239ab872d316ba4c98b045c202d21daf019e","modified":1577455431041},{"_id":"public/2019/06/09/python程序员开发规范/index.html","hash":"7adf456042ecd8d1914d59c1a58c26e185981661","modified":1577455431041},{"_id":"public/2019/04/27/pycharm远程调试/index.html","hash":"19e80ac097d8e980188315a13c508934dd6affdf","modified":1577455431041},{"_id":"public/2019/03/25/flask分布式部署及flask-session/index.html","hash":"4623fc8b8a6b75e127e23a231ae585d45f72fccb","modified":1577455431041},{"_id":"public/2019/03/10/webserver异常-TooManyOpenFiles/index.html","hash":"ac1a985d2003963786052542d9a32c104baeabd3","modified":1577455431042},{"_id":"public/2019/01/22/sqlalchemy数据库连接数异常/index.html","hash":"70e9b96ad54162901eb2ab5c3e8f7a71b09b754a","modified":1577455431042},{"_id":"public/2018/12/30/python代码加密部署/index.html","hash":"d83fad3e56fd48822914c1d295fc017f0ae5d99e","modified":1577455431042},{"_id":"public/index.html","hash":"f271ced019963136cd898b9ee371033860d6bf12","modified":1577455431042},{"_id":"public/2018/11/25/flask服务端推送/index.html","hash":"72a97348b69605e58518873630343ec173d1217c","modified":1577455431042},{"_id":"public/2018/11/04/win10docker使用填坑/index.html","hash":"8bd190311561d2a67d4bcbafbe29f89f3b279e3d","modified":1577455431042},{"_id":"public/page/2/index.html","hash":"ccd04892afdb9dc6c32cc62f3d3c63b7102ee851","modified":1577455431042},{"_id":"public/tags/datastructure/index.html","hash":"8855302d9552199bdb2adfbbe50f898523dcf89e","modified":1577455431047},{"_id":"public/tags/algorithm/index.html","hash":"31a0bd5a85df8a8f3dfbf09a20fd2d9fe601f82e","modified":1577455431047},{"_id":"public/tags/coding-tools/index.html","hash":"9930f887daca5a0961022992d7e9610da00f51b5","modified":1577455431047},{"_id":"public/tags/mysql/index.html","hash":"d915cf2d6eaab0fe42071912a84f315e6e852ada","modified":1577455431047},{"_id":"public/tags/部署/index.html","hash":"46c5cce5d03902b796d00048a99dc7d2bdf4e8bb","modified":1577455431047},{"_id":"public/tags/分布式/index.html","hash":"dc2fec009543039b63faa57e9c824c67e8e27a68","modified":1577455431047},{"_id":"public/tags/源码浅析/index.html","hash":"71c3be80513160193159ed63d257c22f1948e391","modified":1577455431047},{"_id":"public/tags/session/index.html","hash":"be0cbb729cf78bbaab2f0fae5eed24dec3d87e26","modified":1577455431047},{"_id":"public/tags/兼职运维/index.html","hash":"f1ad18cf10073f62d4945dfc2060577be0656c8f","modified":1577455431047},{"_id":"public/tags/hexo/index.html","hash":"31b3e5366a632576f844f0355117a5dfce04883a","modified":1577455431047},{"_id":"public/archives/2018/index.html","hash":"d27d15faa8804cce43afa616af0d136138b21e88","modified":1577455431047},{"_id":"public/archives/page/2/index.html","hash":"0bb23f2b5e5528d82e991775fc692d92a5d9a4d3","modified":1577455431047},{"_id":"public/archives/2018/12/index.html","hash":"664dcb2aaad500b8c246f7fe2d96fd44410ed77b","modified":1577455431048},{"_id":"public/archives/2018/11/index.html","hash":"78aebbae8ce8a2c087de277b79758f8cf4a8af7c","modified":1577455431048},{"_id":"public/archives/2019/01/index.html","hash":"c1f0144314b8b3c4424fdf3651015b3801972f15","modified":1577455431048},{"_id":"public/archives/2019/04/index.html","hash":"11d482b4f1ca757b258dbf717a0d5c0ac6af0ce3","modified":1577455431048},{"_id":"public/archives/2019/03/index.html","hash":"7bcc83494d3ed890537b99ec0faf657d60cb4a3a","modified":1577455431048},{"_id":"public/archives/2019/06/index.html","hash":"19833d46421e7774243ce47dc152082862e2975b","modified":1577455431048},{"_id":"public/archives/2019/07/index.html","hash":"7e879590ee3c866865bc96a9109daadcefb13fdf","modified":1577455431048},{"_id":"public/archives/2019/12/index.html","hash":"d5055a6fe5e758921efb80324216405b87531a13","modified":1577455431048},{"_id":"public/categories/docker/index.html","hash":"f720d38d5625b0d308a5349c059811ab1e20d939","modified":1577455431048},{"_id":"public/categories/python/index.html","hash":"7c423f8a8e3a85caa58748519877d888dc99dc9b","modified":1577455431049},{"_id":"public/categories/flask/index.html","hash":"0bbf33b5211ce86b420cafc2be8907f223ac6912","modified":1577455431050},{"_id":"public/categories/问题分析/index.html","hash":"64eacddcb882dd8eecf5de785060a0b594d484f6","modified":1577455431050},{"_id":"public/categories/coding-tools/index.html","hash":"dc823d3c660452f202902b4e478a49ea95b091ae","modified":1577455431051},{"_id":"public/categories/algorithm-datastructure/index.html","hash":"3e733a329a7c8dd1bba0e51be5b81f42833130c2","modified":1577455431051},{"_id":"public/categories/linux/index.html","hash":"125c9ec5065bf8bdd38c0602ed7d157c9aefb3ff","modified":1577455431053},{"_id":"public/archives/index.html","hash":"9dea4f66cecb884ba42ae850e53c51e0c97e4d6d","modified":1577455431053},{"_id":"public/archives/2019/index.html","hash":"43d8c0c7cf498927368c52002665953041f6fa4d","modified":1577455431054},{"_id":"public/images/alipay.jpg","hash":"30f5cded3686ee70d56144f06b8547e3ace3cd8d","modified":1577455431092},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577455431093},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577455431093},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577455431093},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1577455431094},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577455431103},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577455431103},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577455431104},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577455431105},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577455431106},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577455431106},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577455431107},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1577455431124},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577455431124},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577455431125},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577455431125},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577455431126},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577455431126},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577455431126},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1577455431127},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577455431127},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577455431147},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577455431147},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577455431148},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577455431150},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577455431151},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577455431152},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577455431153},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1577455431154},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1577455431154},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1577455431154},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1577455431154},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577455431155},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1577455431155},{"_id":"public/css/main.css","hash":"d812ee8a9065b8ea6983b2afb19da54ea831ea4a","modified":1577455433257},{"_id":"public/images/avatar.jpeg","hash":"48414fbdb4a202ee77595083a0a00cdcb3a99fbc","modified":1577455433258},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577455433264},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577455433264},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1577455433367},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1577455433368},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1577455433369},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1577455433369},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1577455433370},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1577455433370},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1577455433370},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1577455433370},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1577455433370},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1577455433370},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1577455433374},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1577455433377},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1577455433377},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1577455433378},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1577455433379},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1577455433379},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1577455433380},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1577455433380},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1577455433380},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1577455433380},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1577455433380},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1577455433381},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1577455433381},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1577455433381},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1577455433382},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1577455433383},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1577455433383},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1577455433384},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1577455433384},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1577455433385},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1577455433385},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577455433385},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577455433385},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1577455433385},{"_id":"public/images/wechatpay.jpg","hash":"3e223daecbb37196edbbeb937ce23063d305aa7b","modified":1577455433387},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1577455433389},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577455433390},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1577455433442},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1577455433443},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1577455433445},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1577455433445},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1577455433445},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577455433445},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1577455433446},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1577455433447},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1577455433448},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1577455433477},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1577455433478},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1577455433480},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577455433481},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1577455433526},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1577455433527},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1577455433528},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1577455433539},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577455433561},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1577455433563},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577455433575},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1577455433663},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1577455433664},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1577455433667},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1577455433680},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1577455433693},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1577455433693},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1577455433702},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1577455433727},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1577455433746},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1577455433758}],"Category":[{"name":"docker","_id":"ck4o885i600014js836r1a8ww"},{"name":"python","_id":"ck4o885mk000b4js8eiq9gzu8"},{"name":"flask","_id":"ck4o885mt000h4js8xrcsrfvf"},{"name":"问题分析","_id":"ck4o885na000n4js82962ltx7"},{"name":"coding-tools","_id":"ck4o885nm000z4js8378hlk8l"},{"name":"algorithm&datastructure","_id":"ck4o885nr00154js8bpybv88k"},{"name":"linux","_id":"ck4o885ns00194js8nk6521xi"}],"Data":[],"Page":[{"title":"tags","date":"2018-09-16T09:16:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-16 17:16:53\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-12-25T14:01:12.000Z","path":"tags/index.html","layout":"page","_id":"ck4o885mb00084js804efwrue","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-16T09:17:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-16 17:17:00\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-12-25T14:01:12.000Z","path":"categories/index.html","layout":"page","_id":"ck4o885mh000a4js8t4p4sooh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-09-16T09:18:34.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-16 17:18:34\n---\n","updated":"2019-12-25T14:01:12.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck4o885mm000e4js8bcer77vd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"win10docker使用填坑","date":"2018-11-04T05:17:09.000Z","_content":"{%note info%}\n本文用以记录在`docker win10`环境使用中踩到的坑及解决方案。\n{%endnote%}\n\n<!--more-->\n\n## 问题一：docker修改配置或者镜像的存储位置后启动异常\n### *解决方案*：\n{%note warning%}\n- 移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑\n{%endnote%}\n***\n\n\n\n## 问题二：修改镜像存储位置\n### *解决方案*：\n{%note warning%}\n- 默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx\n- 修改：Hyper-V管理器**Hyper-v设置**虚拟硬盘修改路径\n{%endnote%}\n\n\n***\n\n## 问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\n### *解决方案*：\n{%note warning%}\n- 进入容器\ndocker exec -it mysql bash\n- 进入mysql\nmysql -u root -p\n- 创建root用户\n CREATE USER 'root'@'%' IDENTIFIED IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 设置root用户访问权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n- 重置密码\nALTER USER 'root'@'%' IDENTIFIED WITH `mysql_native_password` BY '123456';\nALTER USER 'root'@'localhost' IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 提交修改\nFLUSH PRIVILEGES;\n{%endnote%}","source":"_posts/2018-11-04-win10docker使用填坑.md","raw":"---\ntitle: win10docker使用填坑\ndate: 2018-11-04 13:17:09\ntags:\n- docker\n- wins10\ncategories:\n- docker\n---\n{%note info%}\n本文用以记录在`docker win10`环境使用中踩到的坑及解决方案。\n{%endnote%}\n\n<!--more-->\n\n## 问题一：docker修改配置或者镜像的存储位置后启动异常\n### *解决方案*：\n{%note warning%}\n- 移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑\n{%endnote%}\n***\n\n\n\n## 问题二：修改镜像存储位置\n### *解决方案*：\n{%note warning%}\n- 默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx\n- 修改：Hyper-V管理器**Hyper-v设置**虚拟硬盘修改路径\n{%endnote%}\n\n\n***\n\n## 问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\n### *解决方案*：\n{%note warning%}\n- 进入容器\ndocker exec -it mysql bash\n- 进入mysql\nmysql -u root -p\n- 创建root用户\n CREATE USER 'root'@'%' IDENTIFIED IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 设置root用户访问权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n- 重置密码\nALTER USER 'root'@'%' IDENTIFIED WITH `mysql_native_password` BY '123456';\nALTER USER 'root'@'localhost' IDENTIFIED WITH `mysql_native_password` BY '123456';\n- 提交修改\nFLUSH PRIVILEGES;\n{%endnote%}","slug":"win10docker使用填坑","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885hm00004js8excz1wmn","content":"<div class=\"note info\"><p>本文用以记录在<code>docker win10</code>环境使用中踩到的坑及解决方案。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"><a href=\"#问题一：docker修改配置或者镜像的存储位置后启动异常\" class=\"headerlink\" title=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"></a>问题一：docker修改配置或者镜像的存储位置后启动异常</h2><h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑</li>\n</ul></div>\n<hr>\n<h2 id=\"问题二：修改镜像存储位置\"><a href=\"#问题二：修改镜像存储位置\" class=\"headerlink\" title=\"问题二：修改镜像存储位置\"></a>问题二：修改镜像存储位置</h2><h3 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx</li>\n<li>修改：Hyper-V管理器<strong>Hyper-v设置</strong>虚拟硬盘修改路径</li>\n</ul></div>\n<hr>\n<h2 id=\"问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\"><a href=\"#问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\" class=\"headerlink\" title=\"问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\"></a>问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client</h2><h3 id=\"解决方案：-2\"><a href=\"#解决方案：-2\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>进入容器<br>docker exec -it mysql bash</li>\n<li>进入mysql<br>mysql -u root -p</li>\n<li>创建root用户<br>CREATE USER ‘root‘@’%’ IDENTIFIED IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>设置root用户访问权限<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ WITH GRANT OPTION;</li>\n<li>重置密码<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>提交修改<br>FLUSH PRIVILEGES;</li>\n</ul></div>","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文用以记录在<code>docker win10</code>环境使用中踩到的坑及解决方案。</p></div>","more":"<h2 id=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"><a href=\"#问题一：docker修改配置或者镜像的存储位置后启动异常\" class=\"headerlink\" title=\"问题一：docker修改配置或者镜像的存储位置后启动异常\"></a>问题一：docker修改配置或者镜像的存储位置后启动异常</h2><h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>移动|剪切 C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx 再重启电脑</li>\n</ul></div>\n<hr>\n<h2 id=\"问题二：修改镜像存储位置\"><a href=\"#问题二：修改镜像存储位置\" class=\"headerlink\" title=\"问题二：修改镜像存储位置\"></a>问题二：修改镜像存储位置</h2><h3 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>默认位置：C:\\Users\\Public\\Documents\\Hyper-V\\Virtual hard disks\\MobyLinuxVM.vhdx</li>\n<li>修改：Hyper-V管理器<strong>Hyper-v设置</strong>虚拟硬盘修改路径</li>\n</ul></div>\n<hr>\n<h2 id=\"问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\"><a href=\"#问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client\" class=\"headerlink\" title=\"问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client\"></a>问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client</h2><h3 id=\"解决方案：-2\"><a href=\"#解决方案：-2\" class=\"headerlink\" title=\"解决方案：\"></a><em>解决方案</em>：</h3><div class=\"note warning\"><ul>\n<li>进入容器<br>docker exec -it mysql bash</li>\n<li>进入mysql<br>mysql -u root -p</li>\n<li>创建root用户<br>CREATE USER ‘root‘@’%’ IDENTIFIED IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>设置root用户访问权限<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ WITH GRANT OPTION;</li>\n<li>重置密码<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li>\n<li>提交修改<br>FLUSH PRIVILEGES;</li>\n</ul></div>"},{"title":"python代码pyc化加密部署","date":"2018-12-30T08:45:56.000Z","_content":"\n{%note info%}\npython不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。\n{%endnote%}\n<!--more-->\n\n### 为什么转换为pyc？\n- pyc官方的解释还请自行google\n- 简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同\n- pyc文件运行效率高于py文件（少了解释器对源码的转换）\n- pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的\n\n### 如何转换为pyc？\n```shell\npython -m compileall (file or dir) -b\n```\n- -b 支持生成pyc文件于当前目录而非`__pycache__`\n\n### 配合jenkins进行自动集成发布\n- 基于flask开发目录\n\n```\n/app\n/conf\n/tests\n...\n```\n\n```shell\n# /bin/sh\n\nfunction timeoutController(){\n    cmd=$1\n    timeout=$2\n    mod=$3\n    count=1\n    while [ $count -le 3 ]; do\n        timeout $timeout $cmd\n        exitCode=$?\n        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then\n            break\n        fi\n\n        if [ $exitCode == 124 ]; then\n            echo \"module: {$mod} timeout {$timeout} s and start to {$count} time retry\"\n        fi\n        count=`expr $count + 1`\n    done\n\n    if [ $exitCode -ne 0 ]; then\n        echo $mod \"=====================>unittest failed\"\n        exit 1\n    fi\n}\n\nfunction code_encrypt(){\n    release_dir=$1\n    pyc_dir=$2\n\n    # release svn del .svn\n    find $release_dir -name \".svn\" | xargs rm -rf\n\n    # svn del pyc\n    cd $pyc_dir\n    svn rm * --force\n    svn ci -m \"pyc delete\"\n\n    # cp release code to pyc && encrypt code\n    cp $release_dir/* $pyc_dir -R\n    python -m compileall . -b\n    find . -name \"*.py\" | xargs rm\n    rm tests/report -rf\n    # replace gunicorn.pyc with gunicorn.py\n    rm $pyc_dir/conf/gunicorn.pyc\n    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/\n\n    # pyc svn commit\n    svn add . --no-ignore --force\n    svn ci -m \"pyc commit\"\n}\n\nfunction main(){\n    echo \"========================== init env =============\"\n    source /root/anaconda3/bin/activate py3\n    release_dir=\"/home/pro/pro_release\"\n    pyc_dir=\"/home/pro/pro_pyc\"\n    release_svn_dir=\"http://*.*.*.*/\"\n\n    # update tag:release code\n    rm $release_dir -rf\n    svn co $release_svn_dir\n\n    echo \"========================== flake8 ===============\"\n    cd $release_dir\n    timeoutController \"flake8 --config=${release_dir}/.config/flake8 ${release_dir}\" 60 \"flake8\"\n\n    echo \"========================== pytest ===============\"\n    cd $release_dir/tests\n    timeoutController \"pytest .\"\n\n    echo \"========================== code encrypt =============\"\n    code_encrypt $release_dir $pyc_dir\n}\n\nmain\n```\n\n{%note warning%}\n- 以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密\n- gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉\n{%endnote%}","source":"_posts/2018-12-30-python代码加密部署.md","raw":"---\ntitle: python代码pyc化加密部署\ndate: 2018-12-30 16:45:56\ntags:\n- python\ncategories:\n- python\n---\n\n{%note info%}\npython不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。\n{%endnote%}\n<!--more-->\n\n### 为什么转换为pyc？\n- pyc官方的解释还请自行google\n- 简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同\n- pyc文件运行效率高于py文件（少了解释器对源码的转换）\n- pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的\n\n### 如何转换为pyc？\n```shell\npython -m compileall (file or dir) -b\n```\n- -b 支持生成pyc文件于当前目录而非`__pycache__`\n\n### 配合jenkins进行自动集成发布\n- 基于flask开发目录\n\n```\n/app\n/conf\n/tests\n...\n```\n\n```shell\n# /bin/sh\n\nfunction timeoutController(){\n    cmd=$1\n    timeout=$2\n    mod=$3\n    count=1\n    while [ $count -le 3 ]; do\n        timeout $timeout $cmd\n        exitCode=$?\n        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then\n            break\n        fi\n\n        if [ $exitCode == 124 ]; then\n            echo \"module: {$mod} timeout {$timeout} s and start to {$count} time retry\"\n        fi\n        count=`expr $count + 1`\n    done\n\n    if [ $exitCode -ne 0 ]; then\n        echo $mod \"=====================>unittest failed\"\n        exit 1\n    fi\n}\n\nfunction code_encrypt(){\n    release_dir=$1\n    pyc_dir=$2\n\n    # release svn del .svn\n    find $release_dir -name \".svn\" | xargs rm -rf\n\n    # svn del pyc\n    cd $pyc_dir\n    svn rm * --force\n    svn ci -m \"pyc delete\"\n\n    # cp release code to pyc && encrypt code\n    cp $release_dir/* $pyc_dir -R\n    python -m compileall . -b\n    find . -name \"*.py\" | xargs rm\n    rm tests/report -rf\n    # replace gunicorn.pyc with gunicorn.py\n    rm $pyc_dir/conf/gunicorn.pyc\n    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/\n\n    # pyc svn commit\n    svn add . --no-ignore --force\n    svn ci -m \"pyc commit\"\n}\n\nfunction main(){\n    echo \"========================== init env =============\"\n    source /root/anaconda3/bin/activate py3\n    release_dir=\"/home/pro/pro_release\"\n    pyc_dir=\"/home/pro/pro_pyc\"\n    release_svn_dir=\"http://*.*.*.*/\"\n\n    # update tag:release code\n    rm $release_dir -rf\n    svn co $release_svn_dir\n\n    echo \"========================== flake8 ===============\"\n    cd $release_dir\n    timeoutController \"flake8 --config=${release_dir}/.config/flake8 ${release_dir}\" 60 \"flake8\"\n\n    echo \"========================== pytest ===============\"\n    cd $release_dir/tests\n    timeoutController \"pytest .\"\n\n    echo \"========================== code encrypt =============\"\n    code_encrypt $release_dir $pyc_dir\n}\n\nmain\n```\n\n{%note warning%}\n- 以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密\n- gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉\n{%endnote%}","slug":"python代码加密部署","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885m100074js8rylm3ggb","content":"<div class=\"note info\"><p>python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"为什么转换为pyc？\"><a href=\"#为什么转换为pyc？\" class=\"headerlink\" title=\"为什么转换为pyc？\"></a>为什么转换为pyc？</h3><ul>\n<li>pyc官方的解释还请自行google</li>\n<li>简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同</li>\n<li>pyc文件运行效率高于py文件（少了解释器对源码的转换）</li>\n<li>pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的</li>\n</ul>\n<h3 id=\"如何转换为pyc？\"><a href=\"#如何转换为pyc？\" class=\"headerlink\" title=\"如何转换为pyc？\"></a>如何转换为pyc？</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m compileall (file or dir) -b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b 支持生成pyc文件于当前目录而非<code>__pycache__</code></li>\n</ul>\n<h3 id=\"配合jenkins进行自动集成发布\"><a href=\"#配合jenkins进行自动集成发布\" class=\"headerlink\" title=\"配合jenkins进行自动集成发布\"></a>配合jenkins进行自动集成发布</h3><ul>\n<li>基于flask开发目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app</span><br><span class=\"line\">/conf</span><br><span class=\"line\">/tests</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">function timeoutController()&#123;</span><br><span class=\"line\">    cmd=$1</span><br><span class=\"line\">    timeout=$2</span><br><span class=\"line\">    mod=$3</span><br><span class=\"line\">    count=1</span><br><span class=\"line\">    while [ $count -le 3 ]; do</span><br><span class=\"line\">        timeout $timeout $cmd</span><br><span class=\"line\">        exitCode=$?</span><br><span class=\"line\">        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        if [ $exitCode == 124 ]; then</span><br><span class=\"line\">            echo \"module: &#123;$mod&#125; timeout &#123;$timeout&#125; s and start to &#123;$count&#125; time retry\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        count=`expr $count + 1`</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $exitCode -ne 0 ]; then</span><br><span class=\"line\">        echo $mod \"=====================&gt;unittest failed\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function code_encrypt()&#123;</span><br><span class=\"line\">    release_dir=$1</span><br><span class=\"line\">    pyc_dir=$2</span><br><span class=\"line\"></span><br><span class=\"line\">    # release svn del .svn</span><br><span class=\"line\">    find $release_dir -name \".svn\" | xargs rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    # svn del pyc</span><br><span class=\"line\">    cd $pyc_dir</span><br><span class=\"line\">    svn rm * --force</span><br><span class=\"line\">    svn ci -m \"pyc delete\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # cp release code to pyc &amp;&amp; encrypt code</span><br><span class=\"line\">    cp $release_dir/* $pyc_dir -R</span><br><span class=\"line\">    python -m compileall . -b</span><br><span class=\"line\">    find . -name \"*.py\" | xargs rm</span><br><span class=\"line\">    rm tests/report -rf</span><br><span class=\"line\">    # replace gunicorn.pyc with gunicorn.py</span><br><span class=\"line\">    rm $pyc_dir/conf/gunicorn.pyc</span><br><span class=\"line\">    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">    # pyc svn commit</span><br><span class=\"line\">    svn add . --no-ignore --force</span><br><span class=\"line\">    svn ci -m \"pyc commit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function main()&#123;</span><br><span class=\"line\">    echo \"========================== init env =============\"</span><br><span class=\"line\">    source /root/anaconda3/bin/activate py3</span><br><span class=\"line\">    release_dir=\"/home/pro/pro_release\"</span><br><span class=\"line\">    pyc_dir=\"/home/pro/pro_pyc\"</span><br><span class=\"line\">    release_svn_dir=\"http://*.*.*.*/\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # update tag:release code</span><br><span class=\"line\">    rm $release_dir -rf</span><br><span class=\"line\">    svn co $release_svn_dir</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== flake8 ===============\"</span><br><span class=\"line\">    cd $release_dir</span><br><span class=\"line\">    timeoutController \"flake8 --config=$&#123;release_dir&#125;/.config/flake8 $&#123;release_dir&#125;\" 60 \"flake8\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== pytest ===============\"</span><br><span class=\"line\">    cd $release_dir/tests</span><br><span class=\"line\">    timeoutController \"pytest .\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== code encrypt =============\"</span><br><span class=\"line\">    code_encrypt $release_dir $pyc_dir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ul>\n<li>以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密</li>\n<li>gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉</li>\n</ul></div>","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。</p></div>","more":"<h3 id=\"为什么转换为pyc？\"><a href=\"#为什么转换为pyc？\" class=\"headerlink\" title=\"为什么转换为pyc？\"></a>为什么转换为pyc？</h3><ul>\n<li>pyc官方的解释还请自行google</li>\n<li>简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同</li>\n<li>pyc文件运行效率高于py文件（少了解释器对源码的转换）</li>\n<li>pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的</li>\n</ul>\n<h3 id=\"如何转换为pyc？\"><a href=\"#如何转换为pyc？\" class=\"headerlink\" title=\"如何转换为pyc？\"></a>如何转换为pyc？</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m compileall (file or dir) -b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b 支持生成pyc文件于当前目录而非<code>__pycache__</code></li>\n</ul>\n<h3 id=\"配合jenkins进行自动集成发布\"><a href=\"#配合jenkins进行自动集成发布\" class=\"headerlink\" title=\"配合jenkins进行自动集成发布\"></a>配合jenkins进行自动集成发布</h3><ul>\n<li>基于flask开发目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app</span><br><span class=\"line\">/conf</span><br><span class=\"line\">/tests</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">function timeoutController()&#123;</span><br><span class=\"line\">    cmd=$1</span><br><span class=\"line\">    timeout=$2</span><br><span class=\"line\">    mod=$3</span><br><span class=\"line\">    count=1</span><br><span class=\"line\">    while [ $count -le 3 ]; do</span><br><span class=\"line\">        timeout $timeout $cmd</span><br><span class=\"line\">        exitCode=$?</span><br><span class=\"line\">        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        fi</span><br><span class=\"line\"></span><br><span class=\"line\">        if [ $exitCode == 124 ]; then</span><br><span class=\"line\">            echo \"module: &#123;$mod&#125; timeout &#123;$timeout&#125; s and start to &#123;$count&#125; time retry\"</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        count=`expr $count + 1`</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $exitCode -ne 0 ]; then</span><br><span class=\"line\">        echo $mod \"=====================&gt;unittest failed\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function code_encrypt()&#123;</span><br><span class=\"line\">    release_dir=$1</span><br><span class=\"line\">    pyc_dir=$2</span><br><span class=\"line\"></span><br><span class=\"line\">    # release svn del .svn</span><br><span class=\"line\">    find $release_dir -name \".svn\" | xargs rm -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    # svn del pyc</span><br><span class=\"line\">    cd $pyc_dir</span><br><span class=\"line\">    svn rm * --force</span><br><span class=\"line\">    svn ci -m \"pyc delete\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # cp release code to pyc &amp;&amp; encrypt code</span><br><span class=\"line\">    cp $release_dir/* $pyc_dir -R</span><br><span class=\"line\">    python -m compileall . -b</span><br><span class=\"line\">    find . -name \"*.py\" | xargs rm</span><br><span class=\"line\">    rm tests/report -rf</span><br><span class=\"line\">    # replace gunicorn.pyc with gunicorn.py</span><br><span class=\"line\">    rm $pyc_dir/conf/gunicorn.pyc</span><br><span class=\"line\">    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/</span><br><span class=\"line\"></span><br><span class=\"line\">    # pyc svn commit</span><br><span class=\"line\">    svn add . --no-ignore --force</span><br><span class=\"line\">    svn ci -m \"pyc commit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function main()&#123;</span><br><span class=\"line\">    echo \"========================== init env =============\"</span><br><span class=\"line\">    source /root/anaconda3/bin/activate py3</span><br><span class=\"line\">    release_dir=\"/home/pro/pro_release\"</span><br><span class=\"line\">    pyc_dir=\"/home/pro/pro_pyc\"</span><br><span class=\"line\">    release_svn_dir=\"http://*.*.*.*/\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # update tag:release code</span><br><span class=\"line\">    rm $release_dir -rf</span><br><span class=\"line\">    svn co $release_svn_dir</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== flake8 ===============\"</span><br><span class=\"line\">    cd $release_dir</span><br><span class=\"line\">    timeoutController \"flake8 --config=$&#123;release_dir&#125;/.config/flake8 $&#123;release_dir&#125;\" 60 \"flake8\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== pytest ===============\"</span><br><span class=\"line\">    cd $release_dir/tests</span><br><span class=\"line\">    timeoutController \"pytest .\"</span><br><span class=\"line\"></span><br><span class=\"line\">    echo \"========================== code encrypt =============\"</span><br><span class=\"line\">    code_encrypt $release_dir $pyc_dir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ul>\n<li>以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密</li>\n<li>gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉</li>\n</ul></div>"},{"title":"flask服务端推送","date":"2018-11-25T07:09:26.000Z","_content":"{%note info%}\n本文用以记录在`flask-sse`使用中踩到的坑及解决方案。\n{%endnote%}\n<!--more-->\n\n### 当前主流的服务端推送方案\n1. 客户端短连接轮询\n2. websocket\n3. Server Send Event（SSE）\n\n相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。\n在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。\n***\n\n### 使用过程中遇到的困难\n- **`flask-sse` redis连接释放问题**\n该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新`new EventSource`，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。\n唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生`GeneratorExit`异常\n因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：\n```python\n@stream_with_context\ndef generator():\n    for message in self.messages(channel=channel):\n        yield str(message)\n        self.redis.connection_pool.disconnect()\n```\n\t修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。\n\n\t`redis连接数查看`\n```\nredis-cli -a pwd -h *.*.*.* info | grep client\n```\n\n- **程序阻塞问题**\n由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。\n\n\t另外还有一点现象，当使用flask自带的http服务器进行多线程`threaded=True`调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次`最多`能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用`celery`。\n\n- **网关超时问题**\n网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。\n\t因此需要针对超时异常进行特殊处理。\n\t这里给出[nginx配置](https://github.com/BotBotMe/botbot-web/issues/2)\n```\t\nlocation /eventsource {\ninclude uwsgi_params;\nuwsgi_pass eventsource-botbot-backend;\nuwsgi_buffering off;\nchunked_transfer_encoding off;\nproxy_cache off;\naccess_log  /var/log/nginx/eventsource_botbot.access.log;\nerror_page 504 =200 @eventsource-close-graceful;\n}\n\nlocation @eventsource-close-graceful {\nadd_header Content-Type text/event-stream;\nreturn 200;\n}\n```\n\t`注意`每个nginx网关就需要配置\n\n***\n\n### 参考资料\n- [官方用例](https://github.com/singingwolfboy/flask-sse)","source":"_posts/2018-11-25-flask服务端推送.md","raw":"---\ntitle: flask服务端推送\ndate: 2018-11-25 15:09:26\ntags:\n- flask\n- sse\ncategories:\n- flask\n---\n{%note info%}\n本文用以记录在`flask-sse`使用中踩到的坑及解决方案。\n{%endnote%}\n<!--more-->\n\n### 当前主流的服务端推送方案\n1. 客户端短连接轮询\n2. websocket\n3. Server Send Event（SSE）\n\n相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。\n在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。\n***\n\n### 使用过程中遇到的困难\n- **`flask-sse` redis连接释放问题**\n该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新`new EventSource`，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。\n唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生`GeneratorExit`异常\n因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：\n```python\n@stream_with_context\ndef generator():\n    for message in self.messages(channel=channel):\n        yield str(message)\n        self.redis.connection_pool.disconnect()\n```\n\t修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。\n\n\t`redis连接数查看`\n```\nredis-cli -a pwd -h *.*.*.* info | grep client\n```\n\n- **程序阻塞问题**\n由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。\n\n\t另外还有一点现象，当使用flask自带的http服务器进行多线程`threaded=True`调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次`最多`能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用`celery`。\n\n- **网关超时问题**\n网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。\n\t因此需要针对超时异常进行特殊处理。\n\t这里给出[nginx配置](https://github.com/BotBotMe/botbot-web/issues/2)\n```\t\nlocation /eventsource {\ninclude uwsgi_params;\nuwsgi_pass eventsource-botbot-backend;\nuwsgi_buffering off;\nchunked_transfer_encoding off;\nproxy_cache off;\naccess_log  /var/log/nginx/eventsource_botbot.access.log;\nerror_page 504 =200 @eventsource-close-graceful;\n}\n\nlocation @eventsource-close-graceful {\nadd_header Content-Type text/event-stream;\nreturn 200;\n}\n```\n\t`注意`每个nginx网关就需要配置\n\n***\n\n### 参考资料\n- [官方用例](https://github.com/singingwolfboy/flask-sse)","slug":"flask服务端推送","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885mg00094js8gbx0kjcw","content":"<div class=\"note info\"><p>本文用以记录在<code>flask-sse</code>使用中踩到的坑及解决方案。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"当前主流的服务端推送方案\"><a href=\"#当前主流的服务端推送方案\" class=\"headerlink\" title=\"当前主流的服务端推送方案\"></a>当前主流的服务端推送方案</h3><ol>\n<li>客户端短连接轮询</li>\n<li>websocket</li>\n<li>Server Send Event（SSE）</li>\n</ol>\n<p>相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。<br>在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。</p>\n<hr>\n<h3 id=\"使用过程中遇到的困难\"><a href=\"#使用过程中遇到的困难\" class=\"headerlink\" title=\"使用过程中遇到的困难\"></a>使用过程中遇到的困难</h3><ul>\n<li><p><strong><code>flask-sse</code> redis连接释放问题</strong><br>该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新<code>new EventSource</code>，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。<br>唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生<code>GeneratorExit</code>异常<br>因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@stream_with_context</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> self.messages(channel=channel):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> str(message)</span><br><span class=\"line\">        self.redis.connection_pool.disconnect()</span><br></pre></td></tr></table></figure>\n<p>  修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。</p>\n<p>  <code>redis连接数查看</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -a pwd -h *.*.*.* info | grep client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>程序阻塞问题</strong><br>由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。</p>\n<p>  另外还有一点现象，当使用flask自带的http服务器进行多线程<code>threaded=True</code>调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次<code>最多</code>能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用<code>celery</code>。</p>\n</li>\n<li><p><strong>网关超时问题</strong><br>网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。<br>  因此需要针对超时异常进行特殊处理。<br>  这里给出<a href=\"https://github.com/BotBotMe/botbot-web/issues/2\" target=\"_blank\" rel=\"noopener\">nginx配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /eventsource &#123;</span><br><span class=\"line\">include uwsgi_params;</span><br><span class=\"line\">uwsgi_pass eventsource-botbot-backend;</span><br><span class=\"line\">uwsgi_buffering off;</span><br><span class=\"line\">chunked_transfer_encoding off;</span><br><span class=\"line\">proxy_cache off;</span><br><span class=\"line\">access_log  /var/log/nginx/eventsource_botbot.access.log;</span><br><span class=\"line\">error_page 504 =200 @eventsource-close-graceful;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location @eventsource-close-graceful &#123;</span><br><span class=\"line\">add_header Content-Type text/event-stream;</span><br><span class=\"line\">return 200;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <code>注意</code>每个nginx网关就需要配置</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/singingwolfboy/flask-sse\" target=\"_blank\" rel=\"noopener\">官方用例</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文用以记录在<code>flask-sse</code>使用中踩到的坑及解决方案。</p></div>","more":"<h3 id=\"当前主流的服务端推送方案\"><a href=\"#当前主流的服务端推送方案\" class=\"headerlink\" title=\"当前主流的服务端推送方案\"></a>当前主流的服务端推送方案</h3><ol>\n<li>客户端短连接轮询</li>\n<li>websocket</li>\n<li>Server Send Event（SSE）</li>\n</ol>\n<p>相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。<br>在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。</p>\n<hr>\n<h3 id=\"使用过程中遇到的困难\"><a href=\"#使用过程中遇到的困难\" class=\"headerlink\" title=\"使用过程中遇到的困难\"></a>使用过程中遇到的困难</h3><ul>\n<li><p><strong><code>flask-sse</code> redis连接释放问题</strong><br>该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新<code>new EventSource</code>，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。<br>唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生<code>GeneratorExit</code>异常<br>因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@stream_with_context</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> self.messages(channel=channel):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> str(message)</span><br><span class=\"line\">        self.redis.connection_pool.disconnect()</span><br></pre></td></tr></table></figure>\n<p>  修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。</p>\n<p>  <code>redis连接数查看</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -a pwd -h *.*.*.* info | grep client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>程序阻塞问题</strong><br>由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。</p>\n<p>  另外还有一点现象，当使用flask自带的http服务器进行多线程<code>threaded=True</code>调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次<code>最多</code>能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用<code>celery</code>。</p>\n</li>\n<li><p><strong>网关超时问题</strong><br>网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。<br>  因此需要针对超时异常进行特殊处理。<br>  这里给出<a href=\"https://github.com/BotBotMe/botbot-web/issues/2\" target=\"_blank\" rel=\"noopener\">nginx配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /eventsource &#123;</span><br><span class=\"line\">include uwsgi_params;</span><br><span class=\"line\">uwsgi_pass eventsource-botbot-backend;</span><br><span class=\"line\">uwsgi_buffering off;</span><br><span class=\"line\">chunked_transfer_encoding off;</span><br><span class=\"line\">proxy_cache off;</span><br><span class=\"line\">access_log  /var/log/nginx/eventsource_botbot.access.log;</span><br><span class=\"line\">error_page 504 =200 @eventsource-close-graceful;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location @eventsource-close-graceful &#123;</span><br><span class=\"line\">add_header Content-Type text/event-stream;</span><br><span class=\"line\">return 200;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <code>注意</code>每个nginx网关就需要配置</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/singingwolfboy/flask-sse\" target=\"_blank\" rel=\"noopener\">官方用例</a></li>\n</ul>"},{"title":"draft_file","_content":"","source":"_drafts/draft-file.md","raw":"---\ntitle: draft_file\ntags:\n---\n","slug":"draft-file","published":0,"date":"2019-12-25T14:01:12.000Z","updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885ml000d4js8wdatzdbb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"webserver异常-TooManyOpenFiles","date":"2019-03-10T09:32:36.000Z","_content":"\n\n### 问题现象：\n{%note warning%}\n- webserver服务不可用\n- 查询日志得知异常为\"... Too Many Open Files\"\n- 重启webserver后服务正常可用\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用nginx+gunicorn+flask搭建webserver的运行环境\n- 环境进程文件句柄使用数上线未设置过为1024\n- gunicorn max-connections=2048 workers=9\n{%endnote%}\n***\n\n### 问题分析：\n\n1. ulimit -n 设置过小\n  - 问题原因比较好定位，google一下大概就确定了\n  - 调大open files应该就可以了\n2. gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？\n\t- 找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，`gunicorn max-connections指单个workers`。\n\n***\n\n### 问题解决：\n- 根据性能测试调大open files，并对数据数值添加监控。\n\n***\n\n### 问题总结：\n- **linux open files**\n```\n\t1. 查看系统最大可打开文件数\n\t\tcat /proc/sys/fs/file-max\n\t2. 查看进程最大可打开文件数\n\t\tcat /etc/security/limits.conf\n\t3. 查看指定进程文件打开数\n\t\tlsof -p pid | wc -l \n\t4. 查看gunicorn fork出所有进程的文件打开数\n\t\tlsof -n|awk '{print $1}'|sort|uniq -c|sort -nr|grep gunicorn\n\t5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定\n```\n- **gunicorn**\n```\n\t1. work_connections指gunicorn单进程并发数\n\t2. 若gunicorn worker_connections < 当前并发数，请求至多会超时，而不会报连接文件句柄异常\n\t3、当worker_connections > 1 时 且程序可异步操作越久（sleep），gevent作用越明显\n```\n- **异常再次发生处理步骤**\n```\n\t1. ps -ef |grep gunicorn -> pid\n\t2. cat /proc/pid/limits.conf\n\t3. lsof -p pid |wc -l\n\t4. sudo vi  /etc/security/limits.conf\n\t\tasset soft nofile 10240\n\t\tasset hard nofile 10240\n\t5. restart program && cat /proc/pid/limits.conf\n```\n- **性能测试**\n\t1. 性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。","source":"_posts/2019-03-10-webserver异常-TooManyOpenFiles.md","raw":"---\ntitle: webserver异常-TooManyOpenFiles\ndate: 2019-03-10 17:32:36\ntags:\n- flask\n- 问题分析\n- linux\ncategories:\n- 问题分析\n---\n\n\n### 问题现象：\n{%note warning%}\n- webserver服务不可用\n- 查询日志得知异常为\"... Too Many Open Files\"\n- 重启webserver后服务正常可用\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用nginx+gunicorn+flask搭建webserver的运行环境\n- 环境进程文件句柄使用数上线未设置过为1024\n- gunicorn max-connections=2048 workers=9\n{%endnote%}\n***\n\n### 问题分析：\n\n1. ulimit -n 设置过小\n  - 问题原因比较好定位，google一下大概就确定了\n  - 调大open files应该就可以了\n2. gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？\n\t- 找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，`gunicorn max-connections指单个workers`。\n\n***\n\n### 问题解决：\n- 根据性能测试调大open files，并对数据数值添加监控。\n\n***\n\n### 问题总结：\n- **linux open files**\n```\n\t1. 查看系统最大可打开文件数\n\t\tcat /proc/sys/fs/file-max\n\t2. 查看进程最大可打开文件数\n\t\tcat /etc/security/limits.conf\n\t3. 查看指定进程文件打开数\n\t\tlsof -p pid | wc -l \n\t4. 查看gunicorn fork出所有进程的文件打开数\n\t\tlsof -n|awk '{print $1}'|sort|uniq -c|sort -nr|grep gunicorn\n\t5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定\n```\n- **gunicorn**\n```\n\t1. work_connections指gunicorn单进程并发数\n\t2. 若gunicorn worker_connections < 当前并发数，请求至多会超时，而不会报连接文件句柄异常\n\t3、当worker_connections > 1 时 且程序可异步操作越久（sleep），gevent作用越明显\n```\n- **异常再次发生处理步骤**\n```\n\t1. ps -ef |grep gunicorn -> pid\n\t2. cat /proc/pid/limits.conf\n\t3. lsof -p pid |wc -l\n\t4. sudo vi  /etc/security/limits.conf\n\t\tasset soft nofile 10240\n\t\tasset hard nofile 10240\n\t5. restart program && cat /proc/pid/limits.conf\n```\n- **性能测试**\n\t1. 性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。","slug":"webserver异常-TooManyOpenFiles","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885mp000f4js864dsb7d4","content":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>webserver服务不可用</li>\n<li>查询日志得知异常为”… Too Many Open Files”</li>\n<li>重启webserver后服务正常可用</li>\n</ul></div>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用nginx+gunicorn+flask搭建webserver的运行环境</li>\n<li>环境进程文件句柄使用数上线未设置过为1024</li>\n<li>gunicorn max-connections=2048 workers=9</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li>ulimit -n 设置过小<ul>\n<li>问题原因比较好定位，google一下大概就确定了</li>\n<li>调大open files应该就可以了</li>\n</ul>\n</li>\n<li>gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？<ul>\n<li>找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，<code>gunicorn max-connections指单个workers</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>根据性能测试调大open files，并对数据数值添加监控。</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li><p><strong>linux open files</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统最大可打开文件数</span><br><span class=\"line\">\tcat /proc/sys/fs/file-max</span><br><span class=\"line\">2. 查看进程最大可打开文件数</span><br><span class=\"line\">\tcat /etc/security/limits.conf</span><br><span class=\"line\">3. 查看指定进程文件打开数</span><br><span class=\"line\">\tlsof -p pid | wc -l </span><br><span class=\"line\">4. 查看gunicorn fork出所有进程的文件打开数</span><br><span class=\"line\">\tlsof -n|awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -nr|grep gunicorn</span><br><span class=\"line\">5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>gunicorn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. work_connections指gunicorn单进程并发数</span><br><span class=\"line\">2. 若gunicorn worker_connections &lt; 当前并发数，请求至多会超时，而不会报连接文件句柄异常</span><br><span class=\"line\">3、当worker_connections &gt; 1 时 且程序可异步操作越久（sleep），gevent作用越明显</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异常再次发生处理步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ps -ef |grep gunicorn -&gt; pid</span><br><span class=\"line\">2. cat /proc/pid/limits.conf</span><br><span class=\"line\">3. lsof -p pid |wc -l</span><br><span class=\"line\">4. sudo vi  /etc/security/limits.conf</span><br><span class=\"line\">\tasset soft nofile 10240</span><br><span class=\"line\">\tasset hard nofile 10240</span><br><span class=\"line\">5. restart program &amp;&amp; cat /proc/pid/limits.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>性能测试</strong></p>\n<ol>\n<li>性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>webserver服务不可用</li>\n<li>查询日志得知异常为”… Too Many Open Files”</li>\n<li>重启webserver后服务正常可用</li>\n</ul></div>","more":"<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用nginx+gunicorn+flask搭建webserver的运行环境</li>\n<li>环境进程文件句柄使用数上线未设置过为1024</li>\n<li>gunicorn max-connections=2048 workers=9</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li>ulimit -n 设置过小<ul>\n<li>问题原因比较好定位，google一下大概就确定了</li>\n<li>调大open files应该就可以了</li>\n</ul>\n</li>\n<li>gunicorn max-connections指单个workers还是gunicorn整体的最大连接数？<ul>\n<li>找了官方文档和google的博客均没细说，如果是前者那是有文件句柄不够用的可能性，而后者则可能性不大，最后还是自己看了源码并通过siege进行性能测试得出结论，<code>gunicorn max-connections指单个workers</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>根据性能测试调大open files，并对数据数值添加监控。</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li><p><strong>linux open files</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 查看系统最大可打开文件数</span><br><span class=\"line\">\tcat /proc/sys/fs/file-max</span><br><span class=\"line\">2. 查看进程最大可打开文件数</span><br><span class=\"line\">\tcat /etc/security/limits.conf</span><br><span class=\"line\">3. 查看指定进程文件打开数</span><br><span class=\"line\">\tlsof -p pid | wc -l </span><br><span class=\"line\">4. 查看gunicorn fork出所有进程的文件打开数</span><br><span class=\"line\">\tlsof -n|awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -nr|grep gunicorn</span><br><span class=\"line\">5. 进程 fork() 出来的子进程，会继承父进程的 limits 设定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>gunicorn</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. work_connections指gunicorn单进程并发数</span><br><span class=\"line\">2. 若gunicorn worker_connections &lt; 当前并发数，请求至多会超时，而不会报连接文件句柄异常</span><br><span class=\"line\">3、当worker_connections &gt; 1 时 且程序可异步操作越久（sleep），gevent作用越明显</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>异常再次发生处理步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. ps -ef |grep gunicorn -&gt; pid</span><br><span class=\"line\">2. cat /proc/pid/limits.conf</span><br><span class=\"line\">3. lsof -p pid |wc -l</span><br><span class=\"line\">4. sudo vi  /etc/security/limits.conf</span><br><span class=\"line\">\tasset soft nofile 10240</span><br><span class=\"line\">\tasset hard nofile 10240</span><br><span class=\"line\">5. restart program &amp;&amp; cat /proc/pid/limits.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>性能测试</strong></p>\n<ol>\n<li>性能测试主要使用了siege和locust，siege通过创建线程进行并发对测试机的影响较大，而locust通过协程并发请求，测试并发数能更高，该部分的具体内容会另起篇幅进行总结梳理。</li>\n</ol>\n</li>\n</ul>"},{"title":"sqlalchemy数据库连接数异常","date":"2019-01-22T13:03:19.000Z","_content":"\n### 问题现象：\n{%note warning%}\n- web端调用flask接口阻塞，最终超时返回系统异常\n- 查询日志得知具体异常为超出数据库最大连接数\n- 重新flask webserver后数据库连接数正常释放\n- 持续使用系统一段时间后数据库连接数再次封顶\n- 环境操作用户寥寥无几\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用flask搭建webserver的运行环境\n- 使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30\n- mysql设置最大连接数200\n- 宿主机CPU 2核心\n- 通过进程数2*2+1 = 5\n{%endnote%}\n***\n\n### 问题分析：\n\n1. 怀疑对flask-sqlalchemy使用不当导致\n  - 问题原因明显是数据库连接使用后没有释放\n  - 数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放\n  - flask-sqlalchemy的连接释放由`teardown_appcontext`钩子统一处理\n  ```python\n\t@app.teardown_appcontext\n\tdef shutdown_session(response_or_exc):\n\t    if app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']:\n\t        if response_or_exc is None:\n\t            self.session.commit()\n\t\n\t    self.session.remove()\n\t    return response_or_exc\n\t```\n2. mysql数据库连接超出首因\n\t- (2\\*2+1) * 64 > 200 \n\t- 困惑连接数回收已经指定`SQLALCHEMY_POOL_RECYCLE=30`但未生效\n\t- 对`SQLALCHEMY_POOL_RECYCLE`理解错误，该项真实含义为queue_pool可用连接的回收时间\n\t- 当前问题为连接未释放，顾与`SQLALCHEMY_POOL_RECYCLE`无关\n3. 若(2\\*2+1) * 64 < 200 会不会好点？\n\t- 异常改为`QueuePool limit of size <x> overflow <y> reached, connection timed out, timeout <z>\n`\n\t- 达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”\n\t\n**分析到这里仍旧没有头绪...**\n\n***\n\n### 问题排查：\n- **查询数据库连接数** \n  ```shell\n\tSELECT * FROM INFORMATION_SCHEMA. PROCESSLIST\n\t```\n- **linux下查询连接端口对应的进程**\n\t```shell\n\tlsof -i:48057|grep celery|awk   '{print$2}'|xargs -I{} echo 'ps -ef|grep {}'|bash\n\t```\n- **windows下查询连接端口对应的进程**\n  ```shell\n\tnetstat -ano|findstr \"8080\"\n\ttasklist|findstr [进程号]\n\t```\n***\n\n### 问题解决：\n- 问题调试发现单接口调用连接数并未按预期增长\n- 通过页面使用操作连接数会不规则的增长\n- 逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1\n- 分析sse仅操作了redis，并未存在对mysql的相关操作\n- 调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库\n- 到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈\n***\n\n### 问题总结：\n- 最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题\n***\n","source":"_posts/2019-01-22-sqlalchemy数据库连接数异常.md","raw":"---\ntitle: sqlalchemy数据库连接数异常\ndate: 2019-01-22 21:03:19\ntags:\n- mysql\n- 问题分析\ncategories:\n- 问题分析\n---\n\n### 问题现象：\n{%note warning%}\n- web端调用flask接口阻塞，最终超时返回系统异常\n- 查询日志得知具体异常为超出数据库最大连接数\n- 重新flask webserver后数据库连接数正常释放\n- 持续使用系统一段时间后数据库连接数再次封顶\n- 环境操作用户寥寥无几\n{%endnote%}\n\n\n<!--more-->\n***\n### 问题环境：\n{%note info%}\n- 使用flask搭建webserver的运行环境\n- 使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30\n- mysql设置最大连接数200\n- 宿主机CPU 2核心\n- 通过进程数2*2+1 = 5\n{%endnote%}\n***\n\n### 问题分析：\n\n1. 怀疑对flask-sqlalchemy使用不当导致\n  - 问题原因明显是数据库连接使用后没有释放\n  - 数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放\n  - flask-sqlalchemy的连接释放由`teardown_appcontext`钩子统一处理\n  ```python\n\t@app.teardown_appcontext\n\tdef shutdown_session(response_or_exc):\n\t    if app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']:\n\t        if response_or_exc is None:\n\t            self.session.commit()\n\t\n\t    self.session.remove()\n\t    return response_or_exc\n\t```\n2. mysql数据库连接超出首因\n\t- (2\\*2+1) * 64 > 200 \n\t- 困惑连接数回收已经指定`SQLALCHEMY_POOL_RECYCLE=30`但未生效\n\t- 对`SQLALCHEMY_POOL_RECYCLE`理解错误，该项真实含义为queue_pool可用连接的回收时间\n\t- 当前问题为连接未释放，顾与`SQLALCHEMY_POOL_RECYCLE`无关\n3. 若(2\\*2+1) * 64 < 200 会不会好点？\n\t- 异常改为`QueuePool limit of size <x> overflow <y> reached, connection timed out, timeout <z>\n`\n\t- 达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”\n\t\n**分析到这里仍旧没有头绪...**\n\n***\n\n### 问题排查：\n- **查询数据库连接数** \n  ```shell\n\tSELECT * FROM INFORMATION_SCHEMA. PROCESSLIST\n\t```\n- **linux下查询连接端口对应的进程**\n\t```shell\n\tlsof -i:48057|grep celery|awk   '{print$2}'|xargs -I{} echo 'ps -ef|grep {}'|bash\n\t```\n- **windows下查询连接端口对应的进程**\n  ```shell\n\tnetstat -ano|findstr \"8080\"\n\ttasklist|findstr [进程号]\n\t```\n***\n\n### 问题解决：\n- 问题调试发现单接口调用连接数并未按预期增长\n- 通过页面使用操作连接数会不规则的增长\n- 逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1\n- 分析sse仅操作了redis，并未存在对mysql的相关操作\n- 调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库\n- 到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈\n***\n\n### 问题总结：\n- 最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题\n***\n","slug":"sqlalchemy数据库连接数异常","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885mr000g4js8ihggusgz","content":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>web端调用flask接口阻塞，最终超时返回系统异常</li>\n<li>查询日志得知具体异常为超出数据库最大连接数</li>\n<li>重新flask webserver后数据库连接数正常释放</li>\n<li>持续使用系统一段时间后数据库连接数再次封顶</li>\n<li>环境操作用户寥寥无几</li>\n</ul></div>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用flask搭建webserver的运行环境</li>\n<li>使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30</li>\n<li>mysql设置最大连接数200</li>\n<li>宿主机CPU 2核心</li>\n<li>通过进程数2*2+1 = 5</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li><p>怀疑对flask-sqlalchemy使用不当导致</p>\n<ul>\n<li>问题原因明显是数据库连接使用后没有释放</li>\n<li>数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放</li>\n<li>flask-sqlalchemy的连接释放由<code>teardown_appcontext</code>钩子统一处理<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_appcontext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shutdown_session</span><span class=\"params\">(response_or_exc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> app.config[<span class=\"string\">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> response_or_exc <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    self.session.remove()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response_or_exc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mysql数据库连接超出首因</p>\n<ul>\n<li>(2*2+1) * 64 &gt; 200 </li>\n<li>困惑连接数回收已经指定<code>SQLALCHEMY_POOL_RECYCLE=30</code>但未生效</li>\n<li>对<code>SQLALCHEMY_POOL_RECYCLE</code>理解错误，该项真实含义为queue_pool可用连接的回收时间</li>\n<li>当前问题为连接未释放，顾与<code>SQLALCHEMY_POOL_RECYCLE</code>无关</li>\n</ul>\n</li>\n<li>若(2*2+1) * 64 &lt; 200 会不会好点？<ul>\n<li>异常改为<code>QueuePool limit of size &lt;x&gt; overflow &lt;y&gt; reached, connection timed out, timeout &lt;z&gt;</code></li>\n<li>达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”</li>\n</ul>\n</li>\n</ol>\n<p><strong>分析到这里仍旧没有头绪…</strong></p>\n<hr>\n<h3 id=\"问题排查：\"><a href=\"#问题排查：\" class=\"headerlink\" title=\"问题排查：\"></a>问题排查：</h3><ul>\n<li><p><strong>查询数据库连接数</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA. PROCESSLIST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>linux下查询连接端口对应的进程</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:48057|grep celery|awk   '&#123;print$2&#125;'|xargs -I&#123;&#125; echo 'ps -ef|grep &#123;&#125;'|bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>windows下查询连接端口对应的进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr \"8080\"</span><br><span class=\"line\">tasklist|findstr [进程号]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>问题调试发现单接口调用连接数并未按预期增长</li>\n<li>通过页面使用操作连接数会不规则的增长</li>\n<li>逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1</li>\n<li>分析sse仅操作了redis，并未存在对mysql的相关操作</li>\n<li>调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库</li>\n<li>到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li>最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h3><div class=\"note warning\"><ul>\n<li>web端调用flask接口阻塞，最终超时返回系统异常</li>\n<li>查询日志得知具体异常为超出数据库最大连接数</li>\n<li>重新flask webserver后数据库连接数正常释放</li>\n<li>持续使用系统一段时间后数据库连接数再次封顶</li>\n<li>环境操作用户寥寥无几</li>\n</ul></div>","more":"<hr>\n<h3 id=\"问题环境：\"><a href=\"#问题环境：\" class=\"headerlink\" title=\"问题环境：\"></a>问题环境：</h3><div class=\"note info\"><ul>\n<li>使用flask搭建webserver的运行环境</li>\n<li>使用flask-sqlalchemy连接数据库并进行相关业务操作，SQLALCHEMY_POOL_SIZE = 64， SQLALCHEMY_POOL_RECYCLE = 30</li>\n<li>mysql设置最大连接数200</li>\n<li>宿主机CPU 2核心</li>\n<li>通过进程数2*2+1 = 5</li>\n</ul></div>\n<hr>\n<h3 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h3><ol>\n<li><p>怀疑对flask-sqlalchemy使用不当导致</p>\n<ul>\n<li>问题原因明显是数据库连接使用后没有释放</li>\n<li>数据库操作业务层均使用封装的方法，不存在操作对数据库的连接和释放</li>\n<li>flask-sqlalchemy的连接释放由<code>teardown_appcontext</code>钩子统一处理<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_appcontext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shutdown_session</span><span class=\"params\">(response_or_exc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> app.config[<span class=\"string\">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> response_or_exc <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    self.session.remove()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response_or_exc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>mysql数据库连接超出首因</p>\n<ul>\n<li>(2*2+1) * 64 &gt; 200 </li>\n<li>困惑连接数回收已经指定<code>SQLALCHEMY_POOL_RECYCLE=30</code>但未生效</li>\n<li>对<code>SQLALCHEMY_POOL_RECYCLE</code>理解错误，该项真实含义为queue_pool可用连接的回收时间</li>\n<li>当前问题为连接未释放，顾与<code>SQLALCHEMY_POOL_RECYCLE</code>无关</li>\n</ul>\n</li>\n<li>若(2*2+1) * 64 &lt; 200 会不会好点？<ul>\n<li>异常改为<code>QueuePool limit of size &lt;x&gt; overflow &lt;y&gt; reached, connection timed out, timeout &lt;z&gt;</code></li>\n<li>达到queue_pool的最大限制后同样是无法连接数据库，只是换了种“死法”</li>\n</ul>\n</li>\n</ol>\n<p><strong>分析到这里仍旧没有头绪…</strong></p>\n<hr>\n<h3 id=\"问题排查：\"><a href=\"#问题排查：\" class=\"headerlink\" title=\"问题排查：\"></a>问题排查：</h3><ul>\n<li><p><strong>查询数据库连接数</strong> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA. PROCESSLIST</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>linux下查询连接端口对应的进程</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:48057|grep celery|awk   '&#123;print$2&#125;'|xargs -I&#123;&#125; echo 'ps -ef|grep &#123;&#125;'|bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>windows下查询连接端口对应的进程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr \"8080\"</span><br><span class=\"line\">tasklist|findstr [进程号]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"问题解决：\"><a href=\"#问题解决：\" class=\"headerlink\" title=\"问题解决：\"></a>问题解决：</h3><ul>\n<li>问题调试发现单接口调用连接数并未按预期增长</li>\n<li>通过页面使用操作连接数会不规则的增长</li>\n<li>逐个接口比对，最终发现在调用sse长连接接口后，连接数会稳定增长1</li>\n<li>分析sse仅操作了redis，并未存在对mysql的相关操作</li>\n<li>调试发现调用sse会进入@after_request请求钩子中，而在该钩子处理函数中使用了current_user，即调用了数据库</li>\n<li>到此真相大白，代码修改很简单过滤该url既可，但问题的思考排查真实饶了一大圈</li>\n</ul>\n<hr>\n<h3 id=\"问题总结：\"><a href=\"#问题总结：\" class=\"headerlink\" title=\"问题总结：\"></a>问题总结：</h3><ul>\n<li>最后反思，其实在确定flask-sqlalchemy框架层在正常api逻辑处理中会自动释放连接后，就应该直接猜测是非业务短连接接口导致，但这其中的盲点主要在sse正常情况下是与mysql毫不相干的，顾很容易忽略sse的长连接问题</li>\n</ul>\n<hr>"},{"title":"python程序员开发规范","date":"2019-06-09T07:12:51.000Z","_content":"\n\n{%note info%}\n本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。\n{%endnote%}\n<!--more-->\n\n## flake8\n- 基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。\n- 安装 `pip install flake8`\n- 指定文件检查 `flake8 path/code.py`\n- 指定目录检查 `flake8 path`\n- 忽略指定错误 `flake8 --ignore E24,W504 path`\n- 指定配置文件 `flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）`\n- 代码指定行忽略检查 `# noqa`\n- [异常快速定位](https://lintlyci.github.io/Flake8Rules/)\n\n**配置文件模版**：\n```\n[flake8]\nignore =\n    E203 # whitespace before ':'\n    E741 # ambiguous variable name 'l'\nfilename =\nexclude =\nmax-line-length = 89\nmax-complexity = 10  # 指定代码最高复杂度\n\n```\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.flake8.png](https://i.loli.net/2019/06/09/5cfcc0aac588786191.png)\n\n## black\n- flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑\n- 基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，\"产品来告诉你你真正想要的\"（产品决定需求）\n- 安装 `pip install black`\n- black --diff path/code.py `输出格式化差异`\n- black path/code.py `自动格式代码`（简单暴力）\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.black.png](https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png)\n\n\n## 配合使用pre-commit\n- 安装 `pip install pre_commit`\n- 创建配置文件 `touch .pre-commit-config.yaml`\n- 初始化 `pre-commit install`\n- 垃圾回收 `pre-commit gc`\n\n**配置模版**：\n```\nrepos:\n-   repo: https://github.com/ambv/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3.6\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.2.3\n    hooks:\n    - id: flake8\n\n```","source":"_posts/2019-06-09-python程序员开发规范.md","raw":"---\ntitle: python程序员开发规范\ndate: 2019-06-09 15:12:51\ntags:\n- python\ncategories:\n---\n\n\n{%note info%}\n本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。\n{%endnote%}\n<!--more-->\n\n## flake8\n- 基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。\n- 安装 `pip install flake8`\n- 指定文件检查 `flake8 path/code.py`\n- 指定目录检查 `flake8 path`\n- 忽略指定错误 `flake8 --ignore E24,W504 path`\n- 指定配置文件 `flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）`\n- 代码指定行忽略检查 `# noqa`\n- [异常快速定位](https://lintlyci.github.io/Flake8Rules/)\n\n**配置文件模版**：\n```\n[flake8]\nignore =\n    E203 # whitespace before ':'\n    E741 # ambiguous variable name 'l'\nfilename =\nexclude =\nmax-line-length = 89\nmax-complexity = 10  # 指定代码最高复杂度\n\n```\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.flake8.png](https://i.loli.net/2019/06/09/5cfcc0aac588786191.png)\n\n## black\n- flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑\n- 基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，\"产品来告诉你你真正想要的\"（产品决定需求）\n- 安装 `pip install black`\n- black --diff path/code.py `输出格式化差异`\n- black path/code.py `自动格式代码`（简单暴力）\n\n**windows下配合pycharm使用**：\n`File->Settings->Tools->External Tools->add`\n![pycharm.black.png](https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png)\n\n\n## 配合使用pre-commit\n- 安装 `pip install pre_commit`\n- 创建配置文件 `touch .pre-commit-config.yaml`\n- 初始化 `pre-commit install`\n- 垃圾回收 `pre-commit gc`\n\n**配置模版**：\n```\nrepos:\n-   repo: https://github.com/ambv/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3.6\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.2.3\n    hooks:\n    - id: flake8\n\n```","slug":"python程序员开发规范","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885mv000k4js86sevbh51","content":"<div class=\"note info\"><p>本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"flake8\"><a href=\"#flake8\" class=\"headerlink\" title=\"flake8\"></a>flake8</h2><ul>\n<li>基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。</li>\n<li>安装 <code>pip install flake8</code></li>\n<li>指定文件检查 <code>flake8 path/code.py</code></li>\n<li>指定目录检查 <code>flake8 path</code></li>\n<li>忽略指定错误 <code>flake8 --ignore E24,W504 path</code></li>\n<li>指定配置文件 <code>flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）</code></li>\n<li>代码指定行忽略检查 <code># noqa</code></li>\n<li><a href=\"https://lintlyci.github.io/Flake8Rules/\" target=\"_blank\" rel=\"noopener\">异常快速定位</a></li>\n</ul>\n<p><strong>配置文件模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flake8]</span><br><span class=\"line\">ignore =</span><br><span class=\"line\">    E203 # whitespace before &apos;:&apos;</span><br><span class=\"line\">    E741 # ambiguous variable name &apos;l&apos;</span><br><span class=\"line\">filename =</span><br><span class=\"line\">exclude =</span><br><span class=\"line\">max-line-length = 89</span><br><span class=\"line\">max-complexity = 10  # 指定代码最高复杂度</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac588786191.png\" alt=\"pycharm.flake8.png\"></p>\n<h2 id=\"black\"><a href=\"#black\" class=\"headerlink\" title=\"black\"></a>black</h2><ul>\n<li>flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑</li>\n<li>基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，”产品来告诉你你真正想要的”（产品决定需求）</li>\n<li>安装 <code>pip install black</code></li>\n<li>black –diff path/code.py <code>输出格式化差异</code></li>\n<li>black path/code.py <code>自动格式代码</code>（简单暴力）</li>\n</ul>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png\" alt=\"pycharm.black.png\"></p>\n<h2 id=\"配合使用pre-commit\"><a href=\"#配合使用pre-commit\" class=\"headerlink\" title=\"配合使用pre-commit\"></a>配合使用pre-commit</h2><ul>\n<li>安装 <code>pip install pre_commit</code></li>\n<li>创建配置文件 <code>touch .pre-commit-config.yaml</code></li>\n<li>初始化 <code>pre-commit install</code></li>\n<li>垃圾回收 <code>pre-commit gc</code></li>\n</ul>\n<p><strong>配置模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repos:</span><br><span class=\"line\">-   repo: https://github.com/ambv/black</span><br><span class=\"line\">    rev: stable</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: black</span><br><span class=\"line\">      language_version: python3.6</span><br><span class=\"line\">-   repo: https://github.com/pre-commit/pre-commit-hooks</span><br><span class=\"line\">    rev: v2.2.3</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: flake8</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>本文介绍两个python开发工具（flake8，black），并结合pycharm，pre-commit进行使用。</p></div>","more":"<h2 id=\"flake8\"><a href=\"#flake8\" class=\"headerlink\" title=\"flake8\"></a>flake8</h2><ul>\n<li>基于PEP8的静态代码检查工具。有助于约束团队使用统一的代码规范。</li>\n<li>安装 <code>pip install flake8</code></li>\n<li>指定文件检查 <code>flake8 path/code.py</code></li>\n<li>指定目录检查 <code>flake8 path</code></li>\n<li>忽略指定错误 <code>flake8 --ignore E24,W504 path</code></li>\n<li>指定配置文件 <code>flake8 --config path1/.flake8 path2 （linux下默认查找用户目录）</code></li>\n<li>代码指定行忽略检查 <code># noqa</code></li>\n<li><a href=\"https://lintlyci.github.io/Flake8Rules/\" target=\"_blank\" rel=\"noopener\">异常快速定位</a></li>\n</ul>\n<p><strong>配置文件模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[flake8]</span><br><span class=\"line\">ignore =</span><br><span class=\"line\">    E203 # whitespace before &apos;:&apos;</span><br><span class=\"line\">    E741 # ambiguous variable name &apos;l&apos;</span><br><span class=\"line\">filename =</span><br><span class=\"line\">exclude =</span><br><span class=\"line\">max-line-length = 89</span><br><span class=\"line\">max-complexity = 10  # 指定代码最高复杂度</span><br></pre></td></tr></table></figure></p>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac588786191.png\" alt=\"pycharm.flake8.png\"></p>\n<h2 id=\"black\"><a href=\"#black\" class=\"headerlink\" title=\"black\"></a>black</h2><ul>\n<li>flake8经常会检查出代码格式上的异常，手动修改实在烦人，这时候推荐使用这款自动格式化代码神器，从此团队code review只需要关注代码业务逻辑</li>\n<li>基本不需要自定义配置文件（虽然支持），相较于pylint需要各种自定义设置，black的极简哲学让我想到了iphone，”产品来告诉你你真正想要的”（产品决定需求）</li>\n<li>安装 <code>pip install black</code></li>\n<li>black –diff path/code.py <code>输出格式化差异</code></li>\n<li>black path/code.py <code>自动格式代码</code>（简单暴力）</li>\n</ul>\n<p><strong>windows下配合pycharm使用</strong>：<br><code>File-&gt;Settings-&gt;Tools-&gt;External Tools-&gt;add</code><br><img src=\"https://i.loli.net/2019/06/09/5cfcc0aac58b837834.png\" alt=\"pycharm.black.png\"></p>\n<h2 id=\"配合使用pre-commit\"><a href=\"#配合使用pre-commit\" class=\"headerlink\" title=\"配合使用pre-commit\"></a>配合使用pre-commit</h2><ul>\n<li>安装 <code>pip install pre_commit</code></li>\n<li>创建配置文件 <code>touch .pre-commit-config.yaml</code></li>\n<li>初始化 <code>pre-commit install</code></li>\n<li>垃圾回收 <code>pre-commit gc</code></li>\n</ul>\n<p><strong>配置模版</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repos:</span><br><span class=\"line\">-   repo: https://github.com/ambv/black</span><br><span class=\"line\">    rev: stable</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: black</span><br><span class=\"line\">      language_version: python3.6</span><br><span class=\"line\">-   repo: https://github.com/pre-commit/pre-commit-hooks</span><br><span class=\"line\">    rev: v2.2.3</span><br><span class=\"line\">    hooks:</span><br><span class=\"line\">    - id: flake8</span><br></pre></td></tr></table></figure></p>"},{"title":"pycharm远程调试","date":"2019-04-27T00:00:34.000Z","_content":"\n{%note info%}\npycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。\n请注意文中介绍的所有功能仅出现在pycharm专业版版中。\n{%endnote%}\n<!--more-->\n\n## 前置\n- `File`->`Settings`->`Project`->`Project Interpreter`->`add`\n- 配置mapping，本地代码与远程代码的映射，`此步骤是必须的`，方式可以通过挂载或者Tool->Configure->SFTP\n- Interpreter设置完后请确认`External Libraries`->`Remote Libraries`生成，若未出现，重启pycharm或许有奇迹\n\n## SSL Interpreter\n![pycharm.ssh.png](https://i.loli.net/2019/05/04/5ccd05b56616c.png)\n\n这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取`Remote Libraries`，从而无法远程debug\n## Docker\n- 开启docker守护进程的API调用\n- mapping需要另外挂载\n![pycharm.docker.png](https://i.loli.net/2019/05/04/5ccd06162dfdb.png)\n\n## Docker Compose（推荐）\n- mapping挂载可以直接在compose文件中指定\n- 镜像建议通过image，若为build将会每次都重新构建\n![pycharm.docker-compose.png](https://i.loli.net/2019/05/04/5ccd0605cbe19.png)\n\n```\nversion: \"3\"\nservices:\n\n  centos:\n    # build:\n    #   context: .\n    #   dockerfile: Dockerfile.centos\n    image: zipee/centos:latest\n    command: sh\n    volumes:\n      - E:\\code\\python3\\:/var/www/\n    ports:\n      - \"5000:5000\"\n    links:\n      - redis\n\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n\n```\n\n## celery remote-debug\n\n由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解\n\n简单的celery代码如下：\n```\nfrom celery import Celery\n\napp = Celery('simple', broker='redis://redis:6379/0')\n\n@app.task()\ndef add(x, y):\n    return x + y\n```\n\n配置celery的启动命令：\n![pycharm.celery.png](https://i.loli.net/2019/05/04/5ccd0ebb7816c.png)\n\n使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！","source":"_posts/2019-04-27-pycharm远程调试.md","raw":"---\ntitle: pycharm远程调试\ndate: 2019-04-27 08:00:34\ntags:\n- python \n- coding-tools\ncategories:\n- coding-tools\n---\n\n{%note info%}\npycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。\n请注意文中介绍的所有功能仅出现在pycharm专业版版中。\n{%endnote%}\n<!--more-->\n\n## 前置\n- `File`->`Settings`->`Project`->`Project Interpreter`->`add`\n- 配置mapping，本地代码与远程代码的映射，`此步骤是必须的`，方式可以通过挂载或者Tool->Configure->SFTP\n- Interpreter设置完后请确认`External Libraries`->`Remote Libraries`生成，若未出现，重启pycharm或许有奇迹\n\n## SSL Interpreter\n![pycharm.ssh.png](https://i.loli.net/2019/05/04/5ccd05b56616c.png)\n\n这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取`Remote Libraries`，从而无法远程debug\n## Docker\n- 开启docker守护进程的API调用\n- mapping需要另外挂载\n![pycharm.docker.png](https://i.loli.net/2019/05/04/5ccd06162dfdb.png)\n\n## Docker Compose（推荐）\n- mapping挂载可以直接在compose文件中指定\n- 镜像建议通过image，若为build将会每次都重新构建\n![pycharm.docker-compose.png](https://i.loli.net/2019/05/04/5ccd0605cbe19.png)\n\n```\nversion: \"3\"\nservices:\n\n  centos:\n    # build:\n    #   context: .\n    #   dockerfile: Dockerfile.centos\n    image: zipee/centos:latest\n    command: sh\n    volumes:\n      - E:\\code\\python3\\:/var/www/\n    ports:\n      - \"5000:5000\"\n    links:\n      - redis\n\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n\n```\n\n## celery remote-debug\n\n由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解\n\n简单的celery代码如下：\n```\nfrom celery import Celery\n\napp = Celery('simple', broker='redis://redis:6379/0')\n\n@app.task()\ndef add(x, y):\n    return x + y\n```\n\n配置celery的启动命令：\n![pycharm.celery.png](https://i.loli.net/2019/05/04/5ccd0ebb7816c.png)\n\n使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！","slug":"pycharm远程调试","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885n9000l4js8fncx3eci","content":"<div class=\"note info\"><p>pycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。<br>请注意文中介绍的所有功能仅出现在pycharm专业版版中。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><ul>\n<li><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Project</code>-&gt;<code>Project Interpreter</code>-&gt;<code>add</code></li>\n<li>配置mapping，本地代码与远程代码的映射，<code>此步骤是必须的</code>，方式可以通过挂载或者Tool-&gt;Configure-&gt;SFTP</li>\n<li>Interpreter设置完后请确认<code>External Libraries</code>-&gt;<code>Remote Libraries</code>生成，若未出现，重启pycharm或许有奇迹</li>\n</ul>\n<h2 id=\"SSL-Interpreter\"><a href=\"#SSL-Interpreter\" class=\"headerlink\" title=\"SSL Interpreter\"></a>SSL Interpreter</h2><p><img src=\"https://i.loli.net/2019/05/04/5ccd05b56616c.png\" alt=\"pycharm.ssh.png\"></p>\n<p>这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取<code>Remote Libraries</code>，从而无法远程debug</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>开启docker守护进程的API调用</li>\n<li>mapping需要另外挂载<br><img src=\"https://i.loli.net/2019/05/04/5ccd06162dfdb.png\" alt=\"pycharm.docker.png\"></li>\n</ul>\n<h2 id=\"Docker-Compose（推荐）\"><a href=\"#Docker-Compose（推荐）\" class=\"headerlink\" title=\"Docker Compose（推荐）\"></a>Docker Compose（推荐）</h2><ul>\n<li>mapping挂载可以直接在compose文件中指定</li>\n<li>镜像建议通过image，若为build将会每次都重新构建<br><img src=\"https://i.loli.net/2019/05/04/5ccd0605cbe19.png\" alt=\"pycharm.docker-compose.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  centos:</span><br><span class=\"line\">    # build:</span><br><span class=\"line\">    #   context: .</span><br><span class=\"line\">    #   dockerfile: Dockerfile.centos</span><br><span class=\"line\">    image: zipee/centos:latest</span><br><span class=\"line\">    command: sh</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - E:\\code\\python3\\:/var/www/</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5000:5000&quot;</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - redis</span><br><span class=\"line\"></span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    image: &quot;redis:alpine&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6379:6379&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"celery-remote-debug\"><a href=\"#celery-remote-debug\" class=\"headerlink\" title=\"celery remote-debug\"></a>celery remote-debug</h2><p>由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解</p>\n<p>简单的celery代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery import Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&apos;simple&apos;, broker=&apos;redis://redis:6379/0&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task()</span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    return x + y</span><br></pre></td></tr></table></figure></p>\n<p>配置celery的启动命令：<br><img src=\"https://i.loli.net/2019/05/04/5ccd0ebb7816c.png\" alt=\"pycharm.celery.png\"></p>\n<p>使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>pycharm是目前python开发者中最受欢迎的IDE，今天来介绍它的远程调试功能。<br>请注意文中介绍的所有功能仅出现在pycharm专业版版中。</p></div>","more":"<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><ul>\n<li><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Project</code>-&gt;<code>Project Interpreter</code>-&gt;<code>add</code></li>\n<li>配置mapping，本地代码与远程代码的映射，<code>此步骤是必须的</code>，方式可以通过挂载或者Tool-&gt;Configure-&gt;SFTP</li>\n<li>Interpreter设置完后请确认<code>External Libraries</code>-&gt;<code>Remote Libraries</code>生成，若未出现，重启pycharm或许有奇迹</li>\n</ul>\n<h2 id=\"SSL-Interpreter\"><a href=\"#SSL-Interpreter\" class=\"headerlink\" title=\"SSL Interpreter\"></a>SSL Interpreter</h2><p><img src=\"https://i.loli.net/2019/05/04/5ccd05b56616c.png\" alt=\"pycharm.ssh.png\"></p>\n<p>这里需要注意远程的运行环境必须是venv|virtualenv，若使用conda将导致无法获取<code>Remote Libraries</code>，从而无法远程debug</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><ul>\n<li>开启docker守护进程的API调用</li>\n<li>mapping需要另外挂载<br><img src=\"https://i.loli.net/2019/05/04/5ccd06162dfdb.png\" alt=\"pycharm.docker.png\"></li>\n</ul>\n<h2 id=\"Docker-Compose（推荐）\"><a href=\"#Docker-Compose（推荐）\" class=\"headerlink\" title=\"Docker Compose（推荐）\"></a>Docker Compose（推荐）</h2><ul>\n<li>mapping挂载可以直接在compose文件中指定</li>\n<li>镜像建议通过image，若为build将会每次都重新构建<br><img src=\"https://i.loli.net/2019/05/04/5ccd0605cbe19.png\" alt=\"pycharm.docker-compose.png\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"></span><br><span class=\"line\">  centos:</span><br><span class=\"line\">    # build:</span><br><span class=\"line\">    #   context: .</span><br><span class=\"line\">    #   dockerfile: Dockerfile.centos</span><br><span class=\"line\">    image: zipee/centos:latest</span><br><span class=\"line\">    command: sh</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - E:\\code\\python3\\:/var/www/</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5000:5000&quot;</span><br><span class=\"line\">    links:</span><br><span class=\"line\">      - redis</span><br><span class=\"line\"></span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    image: &quot;redis:alpine&quot;</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6379:6379&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"celery-remote-debug\"><a href=\"#celery-remote-debug\" class=\"headerlink\" title=\"celery remote-debug\"></a>celery remote-debug</h2><p>由于celery将不再支持windows，所以celery的调试就比较麻烦，有了远程调试后这个问题就迎刃而解</p>\n<p>简单的celery代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery import Celery</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&apos;simple&apos;, broker=&apos;redis://redis:6379/0&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task()</span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    return x + y</span><br></pre></td></tr></table></figure></p>\n<p>配置celery的启动命令：<br><img src=\"https://i.loli.net/2019/05/04/5ccd0ebb7816c.png\" alt=\"pycharm.celery.png\"></p>\n<p>使用了docker作为python远程解释器，甚至本地都无需安装python，使用起来简直不要太优雅！</p>"},{"title":"数据结构与算法总结","date":"2019-06-16T08:02:18.000Z","_content":"\n{%note info%}\n总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。\n{%endnote%}\n<!--more-->\n\n## 图例\n![优劣示意图.png](https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png)\n\n## 数据结构\n![数据结构复杂度.png](https://i.loli.net/2019/06/16/5d05fac1e674389225.png)\n\n## 排序算法\n![排序复杂度.png](https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png)\n\n## 堆操作\n![堆.png](https://i.loli.net/2019/06/16/5d05fac19111547738.png)","source":"_posts/2019-06-16-数据结构与算法总结.md","raw":"---\ntitle: 数据结构与算法总结\ndate: 2019-06-16 16:02:18\ntags:\n- algorithm\n- datastructure\ncategories:\n- algorithm&datastructure\n---\n\n{%note info%}\n总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。\n{%endnote%}\n<!--more-->\n\n## 图例\n![优劣示意图.png](https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png)\n\n## 数据结构\n![数据结构复杂度.png](https://i.loli.net/2019/06/16/5d05fac1e674389225.png)\n\n## 排序算法\n![排序复杂度.png](https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png)\n\n## 堆操作\n![堆.png](https://i.loli.net/2019/06/16/5d05fac19111547738.png)","slug":"数据结构与算法总结","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885nb000q4js8mflt06g2","content":"<div class=\"note info\"><p>总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png\" alt=\"优劣示意图.png\"></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1e674389225.png\" alt=\"数据结构复杂度.png\"></p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png\" alt=\"排序复杂度.png\"></p>\n<h2 id=\"堆操作\"><a href=\"#堆操作\" class=\"headerlink\" title=\"堆操作\"></a>堆操作</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac19111547738.png\" alt=\"堆.png\"></p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>总结下算法与数据结构的基础知识，虽然网络上有现成的总结，但拿来主义不是学习编程该走的捷径。</p></div>","more":"<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1bcc8e83459.png\" alt=\"优劣示意图.png\"></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1e674389225.png\" alt=\"数据结构复杂度.png\"></p>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac1d4a8f86311.png\" alt=\"排序复杂度.png\"></p>\n<h2 id=\"堆操作\"><a href=\"#堆操作\" class=\"headerlink\" title=\"堆操作\"></a>堆操作</h2><p><img src=\"https://i.loli.net/2019/06/16/5d05fac19111547738.png\" alt=\"堆.png\"></p>"},{"title":"fabric2222使用总结","date":"2019-12-23T13:16:44.000Z","_content":"\n{%note info%}\nfabric2222可谓部署神器，在小规模集群环境部署方面简直就是`屠龙刀`的存在\n{%endnote%}\n<!--more-->\n\n## 简介\n\n- fabric目前存在两个版本，分别对应python2和python3\n- 本文主要介绍fabric两个版本的常用方法\n\n## fabric（python2）\n### 安装（python2环境）\n\n```python\npip install fabric\n```\n### 若要实现ssh跳转，需另外安装fexpect\n\n```python\npip install fexpect\n```\n### fabric2的API对应部署的对象定义比较明了\n- env（定义部署主机的ip，密码，节点属性，全局变量等）\n\t\n```python\ndef dev():\n    env.roledefs = {\n        \"manager\": [\"user@x.x.x.x:22\"],\n        \"worker\": [\"user@x.x.x.x:22\"],\n    }\n    env.passwords = {\"user@x.x.x.x:22\": \"123456\", \"user@x.x.x.x:22\": \"123456\"}\n    global ENV_PARAM\n    ENV_PARAM = \"dev\"\n```\n\n- roles\n    \n```python\n@roles(\"manager\")\ndef start_swarm(tag, compose_file=\"docker-compose.yml\"):\n    with cd(SRC_PATH):\n        with shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):\n            run(\n                \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n                    compose_file, PREFIX\n                )\n            )   \n```\n    \n   \n- run\n\n执行shell指令\n    \n- hide, settings \n\n配合使用，隐藏输出内容等\n        \n```python\nwith settings(hide(\"warnings\", \"running\", \"stdout\", \"stderr\"), warn_only=True):\n    \n```\n    \n    \n- cd，sudo\n\n同shell指令\n    \n- execute\n\n在本地任务中执行其他任务函数，提高代码复用率\n    \n- shell_env\n\n设置环境变量\n        \n```python\nwith shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):\n    run(\n        \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n            compose_file, PREFIX\n        )\n    )\n```\n    \n- 配合fexpect使用\n\n贴了段之前用过的代码，可用于修饰任务函数\n        \n```python\ndef env_init(f):\n    # 代码目录\n    global SRC_PATH\n    SRC_PATH = \"\"\n    # 私有镜像仓库\n    global REGISTRY_HOST\n    REGISTRY_HOST = \"\"\n    global REGISTRY_USER\n    REGISTRY_USER = \"\"\n    global REGISTRY_PWD\n    REGISTRY_PWD = \"\"\n    # 项目前缀\n    global PREFIX\n    PREFIX = \"asset\"\n    # 主节点ip\n    global MANAGER_IP, MANAGER_SSL, MANAGER_PWD\n    \n    def _get_manager_ip():\n        return env.roledefs[\"manager\"][0][6:-3]\n    \n    def _get_manager_ssl():\n        return env.roledefs[\"manager\"][0][:-3]\n    \n    # EXPECT\n    global PROMPTS\n    \n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        global MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS\n        MANAGER_IP = _get_manager_ip()\n        MANAGER_SSL = _get_manager_ssl()\n        MANAGER_PWD = env.passwords[env.roledefs[\"manager\"][0]]\n        PROMPTS = expect(\n            \"Are you sure you want to continue connecting (yes/no)?\", \"yes\"\n        )\n        return f(*args, **kwargs)\n    \n    return wrapper  \n```\n---\n## fabric（python3）\n### 安装（python3环境）\n\n```python\npip install fabric\n```\n\n### fabirc3的API相较而言显的抽象简单\n- Connection 作为连接通道抽象\n\n```python\n# 连接本地\nlocal_conn = Connection('localhost')\n\n# 远程连接\n# 没了envAPI只能自己手动定义连接环境\nenvs = {\n    'remote': {\n        'host_name': 'xx',\n        'host': 'user@x.x.x.x:22',\n        'password': '123456',\n    },\n}\nconn = Connection(\n    env.get('host'),\n    connect_kwargs={'password': env.get('password')}\n)\n```\n\n- task 定义任务\n\n```python\n@task\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n通过`fab deploy`执行该任务，值得注意的是ctx这个变量必须要写\n指定传参`fab start-server --jar-timestamp=20191203-1637 debug=True`(让人琢磨尝试了半天)\n\n\n- 其他注意点\n\n对task任务函数使用装饰器，需要注意ctx的传入\n\n```python\ndef timeit(start_msg=None, end_msg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(ctx, *args, **kwargs):\n            if start_msg:\n                print(start_msg)\n            start = time.time()\n            res = func(ctx, *args, **kwargs)\n            if end_msg:\n                print(f'{end_msg}： {round((time.time() - start), 2)}s')\n            return res\n        return wrapper\n    return decorator\n```\n\n然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效\n\n```python\n# 此时debug的将无法被解析\n@task\n@timeit(end_msg='发布完成')\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n\n究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败\n\n```python\ndef argspec(self, body):\n    func = body if isinstance(body, types.FunctionType) else body.__call__\n    spec = inspect.getargspec(func)\n    arg_names = spec.args[:]\n    matched_args = [reversed(x) for x in [spec.args, spec.defaults or []]]\n    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))\n    # Pop context argument\n    try:\n        context_arg = arg_names.pop(0)\n    except IndexError:\n        # TODO: see TODO under __call__, this should be same type\n        raise TypeError(\"Tasks must have an initial Context argument!\")\n    del spec_dict[context_arg]\n    return arg_names, spec_dict\n```\n\n## 总结\n- 综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用\n- fabric3是面向程序编程而非面向human编程\n- 无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧\n","source":"_posts/2019-12-23-fabric使用总结.md","raw":"---\ntitle: fabric2222使用总结\ndate: 2019-12-23 21:16:44\ntags: \n- 部署\ncategories:\n---\n\n{%note info%}\nfabric2222可谓部署神器，在小规模集群环境部署方面简直就是`屠龙刀`的存在\n{%endnote%}\n<!--more-->\n\n## 简介\n\n- fabric目前存在两个版本，分别对应python2和python3\n- 本文主要介绍fabric两个版本的常用方法\n\n## fabric（python2）\n### 安装（python2环境）\n\n```python\npip install fabric\n```\n### 若要实现ssh跳转，需另外安装fexpect\n\n```python\npip install fexpect\n```\n### fabric2的API对应部署的对象定义比较明了\n- env（定义部署主机的ip，密码，节点属性，全局变量等）\n\t\n```python\ndef dev():\n    env.roledefs = {\n        \"manager\": [\"user@x.x.x.x:22\"],\n        \"worker\": [\"user@x.x.x.x:22\"],\n    }\n    env.passwords = {\"user@x.x.x.x:22\": \"123456\", \"user@x.x.x.x:22\": \"123456\"}\n    global ENV_PARAM\n    ENV_PARAM = \"dev\"\n```\n\n- roles\n    \n```python\n@roles(\"manager\")\ndef start_swarm(tag, compose_file=\"docker-compose.yml\"):\n    with cd(SRC_PATH):\n        with shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):\n            run(\n                \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n                    compose_file, PREFIX\n                )\n            )   \n```\n    \n   \n- run\n\n执行shell指令\n    \n- hide, settings \n\n配合使用，隐藏输出内容等\n        \n```python\nwith settings(hide(\"warnings\", \"running\", \"stdout\", \"stderr\"), warn_only=True):\n    \n```\n    \n    \n- cd，sudo\n\n同shell指令\n    \n- execute\n\n在本地任务中执行其他任务函数，提高代码复用率\n    \n- shell_env\n\n设置环境变量\n        \n```python\nwith shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):\n    run(\n        \"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/{} {}\".format(  # noqa\n            compose_file, PREFIX\n        )\n    )\n```\n    \n- 配合fexpect使用\n\n贴了段之前用过的代码，可用于修饰任务函数\n        \n```python\ndef env_init(f):\n    # 代码目录\n    global SRC_PATH\n    SRC_PATH = \"\"\n    # 私有镜像仓库\n    global REGISTRY_HOST\n    REGISTRY_HOST = \"\"\n    global REGISTRY_USER\n    REGISTRY_USER = \"\"\n    global REGISTRY_PWD\n    REGISTRY_PWD = \"\"\n    # 项目前缀\n    global PREFIX\n    PREFIX = \"asset\"\n    # 主节点ip\n    global MANAGER_IP, MANAGER_SSL, MANAGER_PWD\n    \n    def _get_manager_ip():\n        return env.roledefs[\"manager\"][0][6:-3]\n    \n    def _get_manager_ssl():\n        return env.roledefs[\"manager\"][0][:-3]\n    \n    # EXPECT\n    global PROMPTS\n    \n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        global MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS\n        MANAGER_IP = _get_manager_ip()\n        MANAGER_SSL = _get_manager_ssl()\n        MANAGER_PWD = env.passwords[env.roledefs[\"manager\"][0]]\n        PROMPTS = expect(\n            \"Are you sure you want to continue connecting (yes/no)?\", \"yes\"\n        )\n        return f(*args, **kwargs)\n    \n    return wrapper  \n```\n---\n## fabric（python3）\n### 安装（python3环境）\n\n```python\npip install fabric\n```\n\n### fabirc3的API相较而言显的抽象简单\n- Connection 作为连接通道抽象\n\n```python\n# 连接本地\nlocal_conn = Connection('localhost')\n\n# 远程连接\n# 没了envAPI只能自己手动定义连接环境\nenvs = {\n    'remote': {\n        'host_name': 'xx',\n        'host': 'user@x.x.x.x:22',\n        'password': '123456',\n    },\n}\nconn = Connection(\n    env.get('host'),\n    connect_kwargs={'password': env.get('password')}\n)\n```\n\n- task 定义任务\n\n```python\n@task\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n通过`fab deploy`执行该任务，值得注意的是ctx这个变量必须要写\n指定传参`fab start-server --jar-timestamp=20191203-1637 debug=True`(让人琢磨尝试了半天)\n\n\n- 其他注意点\n\n对task任务函数使用装饰器，需要注意ctx的传入\n\n```python\ndef timeit(start_msg=None, end_msg=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(ctx, *args, **kwargs):\n            if start_msg:\n                print(start_msg)\n            start = time.time()\n            res = func(ctx, *args, **kwargs)\n            if end_msg:\n                print(f'{end_msg}： {round((time.time() - start), 2)}s')\n            return res\n        return wrapper\n    return decorator\n```\n\n然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效\n\n```python\n# 此时debug的将无法被解析\n@task\n@timeit(end_msg='发布完成')\ndef deploy(ctx, debug=True):\n    mvn_package(ctx)\n    send_jar_2_remote(ctx)\n    start_server(ctx, debug=debug)\n```\n\n究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败\n\n```python\ndef argspec(self, body):\n    func = body if isinstance(body, types.FunctionType) else body.__call__\n    spec = inspect.getargspec(func)\n    arg_names = spec.args[:]\n    matched_args = [reversed(x) for x in [spec.args, spec.defaults or []]]\n    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))\n    # Pop context argument\n    try:\n        context_arg = arg_names.pop(0)\n    except IndexError:\n        # TODO: see TODO under __call__, this should be same type\n        raise TypeError(\"Tasks must have an initial Context argument!\")\n    del spec_dict[context_arg]\n    return arg_names, spec_dict\n```\n\n## 总结\n- 综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用\n- fabric3是面向程序编程而非面向human编程\n- 无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧\n","slug":"fabric使用总结","published":1,"updated":"2019-12-27T13:06:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885nd000r4js8rxz9l7hh","content":"<div class=\"note info\"><p>fabric2222可谓部署神器，在小规模集群环境部署方面简直就是<code>屠龙刀</code>的存在</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>fabric目前存在两个版本，分别对应python2和python3</li>\n<li>本文主要介绍fabric两个版本的常用方法</li>\n</ul>\n<h2 id=\"fabric（python2）\"><a href=\"#fabric（python2）\" class=\"headerlink\" title=\"fabric（python2）\"></a>fabric（python2）</h2><h3 id=\"安装（python2环境）\"><a href=\"#安装（python2环境）\" class=\"headerlink\" title=\"安装（python2环境）\"></a>安装（python2环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"若要实现ssh跳转，需另外安装fexpect\"><a href=\"#若要实现ssh跳转，需另外安装fexpect\" class=\"headerlink\" title=\"若要实现ssh跳转，需另外安装fexpect\"></a>若要实现ssh跳转，需另外安装fexpect</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fexpect</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabric2的API对应部署的对象定义比较明了\"><a href=\"#fabric2的API对应部署的对象定义比较明了\" class=\"headerlink\" title=\"fabric2的API对应部署的对象定义比较明了\"></a>fabric2的API对应部署的对象定义比较明了</h3><ul>\n<li>env（定义部署主机的ip，密码，节点属性，全局变量等）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dev</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    env.roledefs = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"manager\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"worker\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    env.passwords = &#123;<span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>, <span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> ENV_PARAM</span><br><span class=\"line\">    ENV_PARAM = <span class=\"string\">\"dev\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>roles</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@roles(\"manager\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_swarm</span><span class=\"params\">(tag, compose_file=<span class=\"string\">\"docker-compose.yml\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> cd(SRC_PATH):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):</span><br><span class=\"line\">            run(</span><br><span class=\"line\">                <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">                    compose_file, PREFIX</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>run</li>\n</ul>\n<p>执行shell指令</p>\n<ul>\n<li>hide, settings </li>\n</ul>\n<p>配合使用，隐藏输出内容等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> settings(hide(<span class=\"string\">\"warnings\"</span>, <span class=\"string\">\"running\"</span>, <span class=\"string\">\"stdout\"</span>, <span class=\"string\">\"stderr\"</span>), warn_only=<span class=\"keyword\">True</span>):</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd，sudo</li>\n</ul>\n<p>同shell指令</p>\n<ul>\n<li>execute</li>\n</ul>\n<p>在本地任务中执行其他任务函数，提高代码复用率</p>\n<ul>\n<li>shell_env</li>\n</ul>\n<p>设置环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):</span><br><span class=\"line\">    run(</span><br><span class=\"line\">        <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">            compose_file, PREFIX</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配合fexpect使用</li>\n</ul>\n<p>贴了段之前用过的代码，可用于修饰任务函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">env_init</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码目录</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SRC_PATH</span><br><span class=\"line\">    SRC_PATH = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 私有镜像仓库</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_HOST</span><br><span class=\"line\">    REGISTRY_HOST = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_USER</span><br><span class=\"line\">    REGISTRY_USER = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_PWD</span><br><span class=\"line\">    REGISTRY_PWD = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PREFIX</span><br><span class=\"line\">    PREFIX = <span class=\"string\">\"asset\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 主节点ip</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ip</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][<span class=\"number\">6</span>:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ssl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># EXPECT</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PROMPTS</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @wraps(f)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS</span><br><span class=\"line\">        MANAGER_IP = _get_manager_ip()</span><br><span class=\"line\">        MANAGER_SSL = _get_manager_ssl()</span><br><span class=\"line\">        MANAGER_PWD = env.passwords[env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>]]</span><br><span class=\"line\">        PROMPTS = expect(</span><br><span class=\"line\">            <span class=\"string\">\"Are you sure you want to continue connecting (yes/no)?\"</span>, <span class=\"string\">\"yes\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fabric（python3）\"><a href=\"#fabric（python3）\" class=\"headerlink\" title=\"fabric（python3）\"></a>fabric（python3）</h2><h3 id=\"安装（python3环境）\"><a href=\"#安装（python3环境）\" class=\"headerlink\" title=\"安装（python3环境）\"></a>安装（python3环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabirc3的API相较而言显的抽象简单\"><a href=\"#fabirc3的API相较而言显的抽象简单\" class=\"headerlink\" title=\"fabirc3的API相较而言显的抽象简单\"></a>fabirc3的API相较而言显的抽象简单</h3><ul>\n<li>Connection 作为连接通道抽象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接本地</span></span><br><span class=\"line\">local_conn = Connection(<span class=\"string\">'localhost'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程连接</span></span><br><span class=\"line\"><span class=\"comment\"># 没了envAPI只能自己手动定义连接环境</span></span><br><span class=\"line\">envs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'remote'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'host_name'</span>: <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'host'</span>: <span class=\"string\">'user@x.x.x.x:22'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = Connection(</span><br><span class=\"line\">    env.get(<span class=\"string\">'host'</span>),</span><br><span class=\"line\">    connect_kwargs=&#123;<span class=\"string\">'password'</span>: env.get(<span class=\"string\">'password'</span>)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>task 定义任务</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>通过<code>fab deploy</code>执行该任务，值得注意的是ctx这个变量必须要写<br>指定传参<code>fab start-server --jar-timestamp=20191203-1637 debug=True</code>(让人琢磨尝试了半天)</p>\n<ul>\n<li>其他注意点</li>\n</ul>\n<p>对task任务函数使用装饰器，需要注意ctx的传入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timeit</span><span class=\"params\">(start_msg=None, end_msg=None)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(ctx, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> start_msg:</span><br><span class=\"line\">                print(start_msg)</span><br><span class=\"line\">            start = time.time()</span><br><span class=\"line\">            res = func(ctx, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_msg:</span><br><span class=\"line\">                print(<span class=\"string\">f'<span class=\"subst\">&#123;end_msg&#125;</span>： <span class=\"subst\">&#123;round((time.time() - start), <span class=\"number\">2</span>)&#125;</span>s'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时debug的将无法被解析</span></span><br><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"meta\">@timeit(end_msg='发布完成')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">argspec</span><span class=\"params\">(self, body)</span>:</span></span><br><span class=\"line\">    func = body <span class=\"keyword\">if</span> isinstance(body, types.FunctionType) <span class=\"keyword\">else</span> body.__call__</span><br><span class=\"line\">    spec = inspect.getargspec(func)</span><br><span class=\"line\">    arg_names = spec.args[:]</span><br><span class=\"line\">    matched_args = [reversed(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [spec.args, spec.defaults <span class=\"keyword\">or</span> []]]</span><br><span class=\"line\">    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))</span><br><span class=\"line\">    <span class=\"comment\"># Pop context argument</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        context_arg = arg_names.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> see TODO under __call__, this should be same type</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">\"Tasks must have an initial Context argument!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> spec_dict[context_arg]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg_names, spec_dict</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用</li>\n<li>fabric3是面向程序编程而非面向human编程</li>\n<li>无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>fabric2222可谓部署神器，在小规模集群环境部署方面简直就是<code>屠龙刀</code>的存在</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>fabric目前存在两个版本，分别对应python2和python3</li>\n<li>本文主要介绍fabric两个版本的常用方法</li>\n</ul>\n<h2 id=\"fabric（python2）\"><a href=\"#fabric（python2）\" class=\"headerlink\" title=\"fabric（python2）\"></a>fabric（python2）</h2><h3 id=\"安装（python2环境）\"><a href=\"#安装（python2环境）\" class=\"headerlink\" title=\"安装（python2环境）\"></a>安装（python2环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"若要实现ssh跳转，需另外安装fexpect\"><a href=\"#若要实现ssh跳转，需另外安装fexpect\" class=\"headerlink\" title=\"若要实现ssh跳转，需另外安装fexpect\"></a>若要实现ssh跳转，需另外安装fexpect</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fexpect</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabric2的API对应部署的对象定义比较明了\"><a href=\"#fabric2的API对应部署的对象定义比较明了\" class=\"headerlink\" title=\"fabric2的API对应部署的对象定义比较明了\"></a>fabric2的API对应部署的对象定义比较明了</h3><ul>\n<li>env（定义部署主机的ip，密码，节点属性，全局变量等）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dev</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    env.roledefs = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"manager\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">        <span class=\"string\">\"worker\"</span>: [<span class=\"string\">\"user@x.x.x.x:22\"</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    env.passwords = &#123;<span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>, <span class=\"string\">\"user@x.x.x.x:22\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">global</span> ENV_PARAM</span><br><span class=\"line\">    ENV_PARAM = <span class=\"string\">\"dev\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>roles</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@roles(\"manager\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_swarm</span><span class=\"params\">(tag, compose_file=<span class=\"string\">\"docker-compose.yml\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> cd(SRC_PATH):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> shell_env(ENV_PARAM = ENV_PARAM, TAG=tag):</span><br><span class=\"line\">            run(</span><br><span class=\"line\">                <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">                    compose_file, PREFIX</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>run</li>\n</ul>\n<p>执行shell指令</p>\n<ul>\n<li>hide, settings </li>\n</ul>\n<p>配合使用，隐藏输出内容等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> settings(hide(<span class=\"string\">\"warnings\"</span>, <span class=\"string\">\"running\"</span>, <span class=\"string\">\"stdout\"</span>, <span class=\"string\">\"stderr\"</span>), warn_only=<span class=\"keyword\">True</span>):</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cd，sudo</li>\n</ul>\n<p>同shell指令</p>\n<ul>\n<li>execute</li>\n</ul>\n<p>在本地任务中执行其他任务函数，提高代码复用率</p>\n<ul>\n<li>shell_env</li>\n</ul>\n<p>设置环境变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> shell_env(ASSET_CONFIG=ASSET_CONFIG, TAG=tag):</span><br><span class=\"line\">    run(</span><br><span class=\"line\">        <span class=\"string\">\"docker stack deploy --with-registry-auth -c deploy/swarm_deploy/&#123;&#125; &#123;&#125;\"</span>.format(  <span class=\"comment\"># noqa</span></span><br><span class=\"line\">            compose_file, PREFIX</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配合fexpect使用</li>\n</ul>\n<p>贴了段之前用过的代码，可用于修饰任务函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">env_init</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码目录</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SRC_PATH</span><br><span class=\"line\">    SRC_PATH = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 私有镜像仓库</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_HOST</span><br><span class=\"line\">    REGISTRY_HOST = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_USER</span><br><span class=\"line\">    REGISTRY_USER = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> REGISTRY_PWD</span><br><span class=\"line\">    REGISTRY_PWD = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PREFIX</span><br><span class=\"line\">    PREFIX = <span class=\"string\">\"asset\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 主节点ip</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ip</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][<span class=\"number\">6</span>:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_manager_ssl</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>][:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># EXPECT</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> PROMPTS</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @wraps(f)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> MANAGER_IP, MANAGER_SSL, MANAGER_PWD, PROMPTS</span><br><span class=\"line\">        MANAGER_IP = _get_manager_ip()</span><br><span class=\"line\">        MANAGER_SSL = _get_manager_ssl()</span><br><span class=\"line\">        MANAGER_PWD = env.passwords[env.roledefs[<span class=\"string\">\"manager\"</span>][<span class=\"number\">0</span>]]</span><br><span class=\"line\">        PROMPTS = expect(</span><br><span class=\"line\">            <span class=\"string\">\"Are you sure you want to continue connecting (yes/no)?\"</span>, <span class=\"string\">\"yes\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fabric（python3）\"><a href=\"#fabric（python3）\" class=\"headerlink\" title=\"fabric（python3）\"></a>fabric（python3）</h2><h3 id=\"安装（python3环境）\"><a href=\"#安装（python3环境）\" class=\"headerlink\" title=\"安装（python3环境）\"></a>安装（python3环境）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install fabric</span><br></pre></td></tr></table></figure>\n<h3 id=\"fabirc3的API相较而言显的抽象简单\"><a href=\"#fabirc3的API相较而言显的抽象简单\" class=\"headerlink\" title=\"fabirc3的API相较而言显的抽象简单\"></a>fabirc3的API相较而言显的抽象简单</h3><ul>\n<li>Connection 作为连接通道抽象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接本地</span></span><br><span class=\"line\">local_conn = Connection(<span class=\"string\">'localhost'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程连接</span></span><br><span class=\"line\"><span class=\"comment\"># 没了envAPI只能自己手动定义连接环境</span></span><br><span class=\"line\">envs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'remote'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'host_name'</span>: <span class=\"string\">'xx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'host'</span>: <span class=\"string\">'user@x.x.x.x:22'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = Connection(</span><br><span class=\"line\">    env.get(<span class=\"string\">'host'</span>),</span><br><span class=\"line\">    connect_kwargs=&#123;<span class=\"string\">'password'</span>: env.get(<span class=\"string\">'password'</span>)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>task 定义任务</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>通过<code>fab deploy</code>执行该任务，值得注意的是ctx这个变量必须要写<br>指定传参<code>fab start-server --jar-timestamp=20191203-1637 debug=True</code>(让人琢磨尝试了半天)</p>\n<ul>\n<li>其他注意点</li>\n</ul>\n<p>对task任务函数使用装饰器，需要注意ctx的传入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timeit</span><span class=\"params\">(start_msg=None, end_msg=None)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(ctx, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> start_msg:</span><br><span class=\"line\">                print(start_msg)</span><br><span class=\"line\">            start = time.time()</span><br><span class=\"line\">            res = func(ctx, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end_msg:</span><br><span class=\"line\">                print(<span class=\"string\">f'<span class=\"subst\">&#123;end_msg&#125;</span>： <span class=\"subst\">&#123;round((time.time() - start), <span class=\"number\">2</span>)&#125;</span>s'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>然而遗憾的是，在自定义装饰器的修饰下，再使用命令行传参将失效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时debug的将无法被解析</span></span><br><span class=\"line\"><span class=\"meta\">@task</span></span><br><span class=\"line\"><span class=\"meta\">@timeit(end_msg='发布完成')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deploy</span><span class=\"params\">(ctx, debug=True)</span>:</span></span><br><span class=\"line\">    mvn_package(ctx)</span><br><span class=\"line\">    send_jar_2_remote(ctx)</span><br><span class=\"line\">    start_server(ctx, debug=debug)</span><br></pre></td></tr></table></figure>\n<p>究其原因，是invoke中使用的python2的inspect.getargspec，而python3中删除了对应函数，并且six对此并未兼容，从而导致参数解析失败</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">argspec</span><span class=\"params\">(self, body)</span>:</span></span><br><span class=\"line\">    func = body <span class=\"keyword\">if</span> isinstance(body, types.FunctionType) <span class=\"keyword\">else</span> body.__call__</span><br><span class=\"line\">    spec = inspect.getargspec(func)</span><br><span class=\"line\">    arg_names = spec.args[:]</span><br><span class=\"line\">    matched_args = [reversed(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [spec.args, spec.defaults <span class=\"keyword\">or</span> []]]</span><br><span class=\"line\">    spec_dict = dict(zip_longest(*matched_args, fillvalue=NO_DEFAULT))</span><br><span class=\"line\">    <span class=\"comment\"># Pop context argument</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        context_arg = arg_names.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">TODO:</span> see TODO under __call__, this should be same type</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">\"Tasks must have an initial Context argument!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> spec_dict[context_arg]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg_names, spec_dict</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>综上，可以看出fabric3较fabric2而言基本是完败，使用过fabric2再迁移到fabric3是格外的别扭，由此不难理解网上对fabric3对使用教程基本上寥寥无几，即便存在大部分也只是对官网用例的简单翻译，谈不上工业级的使用</li>\n<li>fabric3是面向程序编程而非面向human编程</li>\n<li>无奈于python2终将被淘汰，还是对fabric3保留一些些期待吧</li>\n</ul>"},{"title":"flask分布式部署及flask-session","date":"2019-03-25T13:12:52.000Z","_content":"\n{%note info%}\n随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。\n{%endnote%}\n<!--more-->\n\n### flask默认的session做了什么\nflask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。\n但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：\n```python\nclass SecureCookieSession(CallbackDict, SessionMixin):\n\t...\nclass SecureCookieSessionInterface(SessionInterface):\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n以上是flask.sessions.py实现的主要框架：\n- SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。\n- SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。\n\n### 常见的分布式部署session解决方案\n\n- 服务器间session复制\nsession复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。\n像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，`缺点`是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。\n- session与服务器绑定\n通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。\n`优点`：无需修改业务代码\n`缺点`：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器\n- 客户端session存储\n即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。\n`优点`：无需改造，flask默认支持\n`缺点`：\n\t- session数据存储在客户端，即使加密也还是一件存在泄露风险的事情\n\t- session数据占用外网带宽\n\t- 受cookie的大小限制，session能记录的数据有限\n- 服务端session统一存储\n对session进行统一的存储，所有服务器共享该存储服务上的数据\n`优点`：服务水平扩展性良好，服务端存储，安全\n`缺点`：\n\t- 每次请求至少需要一次内部网络请求，占用网络带宽\n\t- 需要侵入业务代码\n\n### flask-session服务端session存储\n通过比较不难发现，服务端session统一存储是最合适的解决方案。\n那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包`flask-session`，我们一起看看它的实现：\n代码大概500+行，但我们实际用到的可能就几十行。\n- 首先我们需要选择session寄存的服务，flask-session支持`redis`,`memcached`,`filesystem`,`mongodb`,`sqlalchemy`作为存储介质\n- 以redis举例，再看代码：\n```python\nclass RedisSessionInterface(SessionInterface):\n    serializer = pickle\n    session_class = RedisSession\n\n    def __init__(self, redis, key_prefix, use_signer=False, permanent=True):\n        if redis is None:\n            from redis import Redis\n            redis = Redis()\n        self.redis = redis\n        self.key_prefix = key_prefix\n        self.use_signer = use_signer\n        self.permanent = permanent\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n重写`open_session，save_session`，将session（dict）存储在redis并将session_id（key）返回给客户端\n\n\n### flask http请求-应答完整的数据流\n客户端http请求 \n-> 服务端负载均衡至随机服务器 \n-> 应用上下文入栈(app_ctx) \n-> 请求上下文入栈(request_ctx),同时生成session \n-> 通过request_ctx中的路由信息找到视图函数(view_func) \n-> view_func进行业务处理 \n-> 应用上下文出栈(app_ctx)\n-> 请求上下文出栈(request_ctx) \n-> 保存session或sessino_id进cookie \n-> 返回应答 \n-> 数据写入对应的文件描述符并刷新\n其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。","source":"_posts/2019-03-25-flask分布式部署及flask-session.md","raw":"---\ntitle: flask分布式部署及flask-session\ndate: 2019-03-25 21:12:52\ntags:\n- flask \n- session\n- 分布式\ncategories:\n- flask\n---\n\n{%note info%}\n随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。\n{%endnote%}\n<!--more-->\n\n### flask默认的session做了什么\nflask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。\n但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：\n```python\nclass SecureCookieSession(CallbackDict, SessionMixin):\n\t...\nclass SecureCookieSessionInterface(SessionInterface):\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n以上是flask.sessions.py实现的主要框架：\n- SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。\n- SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。\n\n### 常见的分布式部署session解决方案\n\n- 服务器间session复制\nsession复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。\n像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，`缺点`是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。\n- session与服务器绑定\n通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。\n`优点`：无需修改业务代码\n`缺点`：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器\n- 客户端session存储\n即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。\n`优点`：无需改造，flask默认支持\n`缺点`：\n\t- session数据存储在客户端，即使加密也还是一件存在泄露风险的事情\n\t- session数据占用外网带宽\n\t- 受cookie的大小限制，session能记录的数据有限\n- 服务端session统一存储\n对session进行统一的存储，所有服务器共享该存储服务上的数据\n`优点`：服务水平扩展性良好，服务端存储，安全\n`缺点`：\n\t- 每次请求至少需要一次内部网络请求，占用网络带宽\n\t- 需要侵入业务代码\n\n### flask-session服务端session存储\n通过比较不难发现，服务端session统一存储是最合适的解决方案。\n那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包`flask-session`，我们一起看看它的实现：\n代码大概500+行，但我们实际用到的可能就几十行。\n- 首先我们需要选择session寄存的服务，flask-session支持`redis`,`memcached`,`filesystem`,`mongodb`,`sqlalchemy`作为存储介质\n- 以redis举例，再看代码：\n```python\nclass RedisSessionInterface(SessionInterface):\n    serializer = pickle\n    session_class = RedisSession\n\n    def __init__(self, redis, key_prefix, use_signer=False, permanent=True):\n        if redis is None:\n            from redis import Redis\n            redis = Redis()\n        self.redis = redis\n        self.key_prefix = key_prefix\n        self.use_signer = use_signer\n        self.permanent = permanent\n\tdef open_session(self, app, request):\n\t\t...\n\tdef save_session(self, app, session, response):\n\t\t...\n```\n重写`open_session，save_session`，将session（dict）存储在redis并将session_id（key）返回给客户端\n\n\n### flask http请求-应答完整的数据流\n客户端http请求 \n-> 服务端负载均衡至随机服务器 \n-> 应用上下文入栈(app_ctx) \n-> 请求上下文入栈(request_ctx),同时生成session \n-> 通过request_ctx中的路由信息找到视图函数(view_func) \n-> view_func进行业务处理 \n-> 应用上下文出栈(app_ctx)\n-> 请求上下文出栈(request_ctx) \n-> 保存session或sessino_id进cookie \n-> 返回应答 \n-> 数据写入对应的文件描述符并刷新\n其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。","slug":"flask分布式部署及flask-session","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885nh000v4js8qiicfhe9","content":"<div class=\"note info\"><p>随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"flask默认的session做了什么\"><a href=\"#flask默认的session做了什么\" class=\"headerlink\" title=\"flask默认的session做了什么\"></a>flask默认的session做了什么</h3><p>flask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。<br>但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSession</span><span class=\"params\">(CallbackDict, SessionMixin)</span>:</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure></p>\n<p>以上是flask.sessions.py实现的主要框架：</p>\n<ul>\n<li>SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。</li>\n<li>SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。</li>\n</ul>\n<h3 id=\"常见的分布式部署session解决方案\"><a href=\"#常见的分布式部署session解决方案\" class=\"headerlink\" title=\"常见的分布式部署session解决方案\"></a>常见的分布式部署session解决方案</h3><ul>\n<li>服务器间session复制<br>session复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。<br>像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，<code>缺点</code>是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。</li>\n<li>session与服务器绑定<br>通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。<br><code>优点</code>：无需修改业务代码<br><code>缺点</code>：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器</li>\n<li>客户端session存储<br>即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。<br><code>优点</code>：无需改造，flask默认支持<br><code>缺点</code>：<ul>\n<li>session数据存储在客户端，即使加密也还是一件存在泄露风险的事情</li>\n<li>session数据占用外网带宽</li>\n<li>受cookie的大小限制，session能记录的数据有限</li>\n</ul>\n</li>\n<li>服务端session统一存储<br>对session进行统一的存储，所有服务器共享该存储服务上的数据<br><code>优点</code>：服务水平扩展性良好，服务端存储，安全<br><code>缺点</code>：<ul>\n<li>每次请求至少需要一次内部网络请求，占用网络带宽</li>\n<li>需要侵入业务代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"flask-session服务端session存储\"><a href=\"#flask-session服务端session存储\" class=\"headerlink\" title=\"flask-session服务端session存储\"></a>flask-session服务端session存储</h3><p>通过比较不难发现，服务端session统一存储是最合适的解决方案。<br>那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包<code>flask-session</code>，我们一起看看它的实现：<br>代码大概500+行，但我们实际用到的可能就几十行。</p>\n<ul>\n<li>首先我们需要选择session寄存的服务，flask-session支持<code>redis</code>,<code>memcached</code>,<code>filesystem</code>,<code>mongodb</code>,<code>sqlalchemy</code>作为存储介质</li>\n<li>以redis举例，再看代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">    serializer = pickle</span><br><span class=\"line\">    session_class = RedisSession</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, redis, key_prefix, use_signer=False, permanent=True)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> redis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\">            redis = Redis()</span><br><span class=\"line\">        self.redis = redis</span><br><span class=\"line\">        self.key_prefix = key_prefix</span><br><span class=\"line\">        self.use_signer = use_signer</span><br><span class=\"line\">        self.permanent = permanent</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>重写<code>open_session，save_session</code>，将session（dict）存储在redis并将session_id（key）返回给客户端</p>\n<h3 id=\"flask-http请求-应答完整的数据流\"><a href=\"#flask-http请求-应答完整的数据流\" class=\"headerlink\" title=\"flask http请求-应答完整的数据流\"></a>flask http请求-应答完整的数据流</h3><p>客户端http请求<br>-&gt; 服务端负载均衡至随机服务器<br>-&gt; 应用上下文入栈(app_ctx)<br>-&gt; 请求上下文入栈(request_ctx),同时生成session<br>-&gt; 通过request_ctx中的路由信息找到视图函数(view_func)<br>-&gt; view_func进行业务处理<br>-&gt; 应用上下文出栈(app_ctx)<br>-&gt; 请求上下文出栈(request_ctx)<br>-&gt; 保存session或sessino_id进cookie<br>-&gt; 返回应答<br>-&gt; 数据写入对应的文件描述符并刷新<br>其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>随着业务系统访问量的增长，多机部署成了必然，下面来聊聊flask的分布式部署以及原理。</p></div>","more":"<h3 id=\"flask默认的session做了什么\"><a href=\"#flask默认的session做了什么\" class=\"headerlink\" title=\"flask默认的session做了什么\"></a>flask默认的session做了什么</h3><p>flask作为web应用框架若多机部署，第一个问题是需要一个请求接入网关，通常我们使用nginx统一进行流量的分发。<br>但随之而来会有一个新的问题，即flask的session多机之间会共享吗？带着这个问题，我们看看flask关于session的源码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSession</span><span class=\"params\">(CallbackDict, SessionMixin)</span>:</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecureCookieSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure></p>\n<p>以上是flask.sessions.py实现的主要框架：</p>\n<ul>\n<li>SecureCookieSession即flask的session类，可以简单的理解成一个dict对象。</li>\n<li>SecureCookieSessionInterface即flask的session接口类，open_session方法用于创建session，save_session方法用于将session加密并存放在response的cookie中。所以flask是默认将用户的session存储在客户端的cookie中，这样请求-应答的数据中就有了用户操作的上下文了，至于这么做的优劣将在下文分析。</li>\n</ul>\n<h3 id=\"常见的分布式部署session解决方案\"><a href=\"#常见的分布式部署session解决方案\" class=\"headerlink\" title=\"常见的分布式部署session解决方案\"></a>常见的分布式部署session解决方案</h3><ul>\n<li>服务器间session复制<br>session复制是早期的企业级的使用比较多的一种服务器集群session管理机制。应用服务器开启web容器的session复制功能，在集群中的几台  服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。<br>像java的一些应用服务器，如tomcat等自带次功能。在python-web不常见，<code>缺点</code>是session同步会暂用内网网络带宽，且服务器水平扩展存在明显上线。</li>\n<li>session与服务器绑定<br>通过请求网关，如nginx，将负载均衡的策略改成ip-hash的模式，即用户的每次请求都会分发到同一台服务器，那么sesison则能够正常的被解析。<br><code>优点</code>：无需修改业务代码<br><code>缺点</code>：缺乏高可用性，当其中一台服务器宕机，该机器上用户需要重新登录到其他服务器</li>\n<li>客户端session存储<br>即flask默认的session存储方案，可见什么都不需要改动，flask已经支持水平扩展，细心的童鞋想想当flask通过gunicorn启动时多进程为啥能够共享session，即不难想到多个服务间共享应该也问题不大。这里注意的是多服务器间的secret_key必须相同。<br><code>优点</code>：无需改造，flask默认支持<br><code>缺点</code>：<ul>\n<li>session数据存储在客户端，即使加密也还是一件存在泄露风险的事情</li>\n<li>session数据占用外网带宽</li>\n<li>受cookie的大小限制，session能记录的数据有限</li>\n</ul>\n</li>\n<li>服务端session统一存储<br>对session进行统一的存储，所有服务器共享该存储服务上的数据<br><code>优点</code>：服务水平扩展性良好，服务端存储，安全<br><code>缺点</code>：<ul>\n<li>每次请求至少需要一次内部网络请求，占用网络带宽</li>\n<li>需要侵入业务代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"flask-session服务端session存储\"><a href=\"#flask-session服务端session存储\" class=\"headerlink\" title=\"flask-session服务端session存储\"></a>flask-session服务端session存储</h3><p>通过比较不难发现，服务端session统一存储是最合适的解决方案。<br>那么我们来谈谈怎么实现，幸运的是已经有前任实现了flask对应的扩展包<code>flask-session</code>，我们一起看看它的实现：<br>代码大概500+行，但我们实际用到的可能就几十行。</p>\n<ul>\n<li>首先我们需要选择session寄存的服务，flask-session支持<code>redis</code>,<code>memcached</code>,<code>filesystem</code>,<code>mongodb</code>,<code>sqlalchemy</code>作为存储介质</li>\n<li>以redis举例，再看代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisSessionInterface</span><span class=\"params\">(SessionInterface)</span>:</span></span><br><span class=\"line\">    serializer = pickle</span><br><span class=\"line\">    session_class = RedisSession</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, redis, key_prefix, use_signer=False, permanent=True)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> redis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\">            redis = Redis()</span><br><span class=\"line\">        self.redis = redis</span><br><span class=\"line\">        self.key_prefix = key_prefix</span><br><span class=\"line\">        self.use_signer = use_signer</span><br><span class=\"line\">        self.permanent = permanent</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_session</span><span class=\"params\">(self, app, request)</span>:</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_session</span><span class=\"params\">(self, app, session, response)</span>:</span></span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>重写<code>open_session，save_session</code>，将session（dict）存储在redis并将session_id（key）返回给客户端</p>\n<h3 id=\"flask-http请求-应答完整的数据流\"><a href=\"#flask-http请求-应答完整的数据流\" class=\"headerlink\" title=\"flask http请求-应答完整的数据流\"></a>flask http请求-应答完整的数据流</h3><p>客户端http请求<br>-&gt; 服务端负载均衡至随机服务器<br>-&gt; 应用上下文入栈(app_ctx)<br>-&gt; 请求上下文入栈(request_ctx),同时生成session<br>-&gt; 通过request_ctx中的路由信息找到视图函数(view_func)<br>-&gt; view_func进行业务处理<br>-&gt; 应用上下文出栈(app_ctx)<br>-&gt; 请求上下文出栈(request_ctx)<br>-&gt; 保存session或sessino_id进cookie<br>-&gt; 返回应答<br>-&gt; 数据写入对应的文件描述符并刷新<br>其实flask的源码阅读起来并不吃力，看下来会发现flask框架代码的思路结构非常的清晰，并惊叹于这个框架的可扩展性，flask的源码非常值得学习和借鉴。</p>"},{"title":"flask-caching源码浅析","date":"2019-07-14T11:49:26.000Z","_content":"\n{%note info%}\nflask-caching源码浅析。\n{%endnote%}\n<!--more-->\n\n## 简介\n- flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。\n- flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：\n\t- simple 程序内部缓存\n\t- filesystem 系统文件缓存\n\t- redis\n\t- redissentinel\n\t- uwsgi\n\t- memcached\n\t- gaememcached\n\t- saslmemcached\n\t- spreadsaslmemcached\n\n## 简单使用\n```python\nfrom flask_caching import Cache\ncache = Cache()\n\nconfig = {\"CACHE_TYPE\": \"redis\", \"CACHE_REDIS_URL\": app.config[\"CACHE_REDIS_URL\"]}\n    cache.init_app(app, config=config)\n\n@app.route('/cache_test/<int:id>')\n@cache.cached(timeout=60 * 5)\ndef cache_test(id):\n    from flask import request\n    got_data = request.get_json()\n    import time\n\n    return f\"{got_data}.{id}.{time.time()}\"\n\n@cache.memoize(timeout=60 * 5)\ndef f_cache(a):\n    return a\n\n@app.route('/cache_test2/<int:id>')\ndef cache_test2(id):\n    return f\"{f_cache(id)}\"\n\n```\n\n\n## cache memoize源码解析\n### **cached**\n\n```python\n    def cached(\n        self,\n        timeout=None,\n        key_prefix=\"view/%s\",\n        unless=None,\n        forced_update=None,\n        response_filter=None,\n        query_string=False,\n        hash_method=hashlib.md5,\n    ):\n        \"\"\"...\"\"\"\n\n        def decorator(f):\n            @functools.wraps(f)\n            def decorated_function(*args, **kwargs):...\n\n                if not found:\n                    rv = f(*args, **kwargs)\n\n                    if response_filter is None or response_filter(rv):\n                        try:\n                            self.cache.set(\n                                cache_key,\n                                rv,\n                                timeout=decorated_function.cache_timeout,\n                            )\n                        except Exception:\n                            if self.app.debug:\n                                raise\n                            logger.exception(\n                                \"Exception possibly due to cache backend.\"\n                            )\n                return rv\n\n            def make_cache_key(*args, **kwargs):...\n\n            def _make_cache_key_query_string():...\n\n            def _make_cache_key(args, kwargs, use_request):...\n\n            decorated_function.uncached = f\n            decorated_function.cache_timeout = timeout\n            decorated_function.make_cache_key = make_cache_key\n\n            return decorated_function\n\n        return decorator\n```\n\n\n- cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：\n\t- timeout用于指定缓存失效的时间，设置0或-1则不失效\n\t- unless是一个函数，用于判断是否需要跳过缓存，可自定义实现\n\t\t\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n\n# ```\n\n- 默认情况下进入逻辑\"elif \"%s\" in key_prefix:\", 因此cached缓存只与requesturl相关，与视图函数的传参无关，`这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key`，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。\n\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n```\n- 另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。\n\n### **memoize**\n- memoize相较于cached的区别\n\t- cache_key实现不同，memoize对key进行了加密\n\t- 针对普通函数缓存结果使用\n\t- 支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现\n\n## 总结-如何写一个缓存框架\n从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：`判断是否跳过缓存，生成查询key，获取缓存数据`。\n我们如果要实现缓存框架，大体需要考虑一下几方面：\n- 支持使用不同的存储实例，**抽象缓存对象接口**，如`get，has，set`\n- 支持区分参数缓存\n- 支持缓存时效性\n- 支持缓存数据加密\n- 如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理\n\n\n## 使用缓存的注意事项（待补充）\n- 缓存穿透\n- 缓存雪崩\n- 缓存集群","source":"_posts/2019-07-14-flask-caching源码浅析.md","raw":"---\ntitle: flask-caching源码浅析\ndate: 2019-07-14 19:49:26\ntags:\n- flask\n- python\n- 源码浅析\ncategories:\n---\n\n{%note info%}\nflask-caching源码浅析。\n{%endnote%}\n<!--more-->\n\n## 简介\n- flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。\n- flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：\n\t- simple 程序内部缓存\n\t- filesystem 系统文件缓存\n\t- redis\n\t- redissentinel\n\t- uwsgi\n\t- memcached\n\t- gaememcached\n\t- saslmemcached\n\t- spreadsaslmemcached\n\n## 简单使用\n```python\nfrom flask_caching import Cache\ncache = Cache()\n\nconfig = {\"CACHE_TYPE\": \"redis\", \"CACHE_REDIS_URL\": app.config[\"CACHE_REDIS_URL\"]}\n    cache.init_app(app, config=config)\n\n@app.route('/cache_test/<int:id>')\n@cache.cached(timeout=60 * 5)\ndef cache_test(id):\n    from flask import request\n    got_data = request.get_json()\n    import time\n\n    return f\"{got_data}.{id}.{time.time()}\"\n\n@cache.memoize(timeout=60 * 5)\ndef f_cache(a):\n    return a\n\n@app.route('/cache_test2/<int:id>')\ndef cache_test2(id):\n    return f\"{f_cache(id)}\"\n\n```\n\n\n## cache memoize源码解析\n### **cached**\n\n```python\n    def cached(\n        self,\n        timeout=None,\n        key_prefix=\"view/%s\",\n        unless=None,\n        forced_update=None,\n        response_filter=None,\n        query_string=False,\n        hash_method=hashlib.md5,\n    ):\n        \"\"\"...\"\"\"\n\n        def decorator(f):\n            @functools.wraps(f)\n            def decorated_function(*args, **kwargs):...\n\n                if not found:\n                    rv = f(*args, **kwargs)\n\n                    if response_filter is None or response_filter(rv):\n                        try:\n                            self.cache.set(\n                                cache_key,\n                                rv,\n                                timeout=decorated_function.cache_timeout,\n                            )\n                        except Exception:\n                            if self.app.debug:\n                                raise\n                            logger.exception(\n                                \"Exception possibly due to cache backend.\"\n                            )\n                return rv\n\n            def make_cache_key(*args, **kwargs):...\n\n            def _make_cache_key_query_string():...\n\n            def _make_cache_key(args, kwargs, use_request):...\n\n            decorated_function.uncached = f\n            decorated_function.cache_timeout = timeout\n            decorated_function.make_cache_key = make_cache_key\n\n            return decorated_function\n\n        return decorator\n```\n\n\n- cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：\n\t- timeout用于指定缓存失效的时间，设置0或-1则不失效\n\t- unless是一个函数，用于判断是否需要跳过缓存，可自定义实现\n\t\t\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n\n# ```\n\n- 默认情况下进入逻辑\"elif \"%s\" in key_prefix:\", 因此cached缓存只与requesturl相关，与视图函数的传参无关，`这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key`，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。\n\n\n```python\ndef _make_cache_key(args, kwargs, use_request):\n    if callable(key_prefix):\n        cache_key = key_prefix()\n    elif \"%s\" in key_prefix:\n        if use_request:\n            cache_key = key_prefix % request.path\n        else:\n            cache_key = key_prefix % url_for(f.__name__, **kwargs)\n    else:\n        cache_key = key_prefix\n\n    return cache_key\n```\n- 另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。\n\n### **memoize**\n- memoize相较于cached的区别\n\t- cache_key实现不同，memoize对key进行了加密\n\t- 针对普通函数缓存结果使用\n\t- 支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现\n\n## 总结-如何写一个缓存框架\n从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：`判断是否跳过缓存，生成查询key，获取缓存数据`。\n我们如果要实现缓存框架，大体需要考虑一下几方面：\n- 支持使用不同的存储实例，**抽象缓存对象接口**，如`get，has，set`\n- 支持区分参数缓存\n- 支持缓存时效性\n- 支持缓存数据加密\n- 如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理\n\n\n## 使用缓存的注意事项（待补充）\n- 缓存穿透\n- 缓存雪崩\n- 缓存集群","slug":"flask-caching源码浅析","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885nk000x4js8w97rjmts","content":"<div class=\"note info\"><p>flask-caching源码浅析。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。</li>\n<li>flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：<ul>\n<li>simple 程序内部缓存</li>\n<li>filesystem 系统文件缓存</li>\n<li>redis</li>\n<li>redissentinel</li>\n<li>uwsgi</li>\n<li>memcached</li>\n<li>gaememcached</li>\n<li>saslmemcached</li>\n<li>spreadsaslmemcached</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_caching <span class=\"keyword\">import</span> Cache</span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;<span class=\"string\">\"CACHE_TYPE\"</span>: <span class=\"string\">\"redis\"</span>, <span class=\"string\">\"CACHE_REDIS_URL\"</span>: app.config[<span class=\"string\">\"CACHE_REDIS_URL\"</span>]&#125;</span><br><span class=\"line\">    cache.init_app(app, config=config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"meta\">@cache.cached(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\">    got_data = request.get_json()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;got_data&#125;</span>.<span class=\"subst\">&#123;id&#125;</span>.<span class=\"subst\">&#123;time.time()&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cache.memoize(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_cache</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test2/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test2</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;f_cache(id)&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"cache-memoize源码解析\"><a href=\"#cache-memoize源码解析\" class=\"headerlink\" title=\"cache memoize源码解析\"></a>cache memoize源码解析</h2><h3 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a><strong>cached</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cached</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    timeout=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key_prefix=<span class=\"string\">\"view/%s\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    unless=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    forced_update=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    response_filter=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    query_string=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    hash_method=hashlib.md5,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"...\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(f)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated_function</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">                rv = f(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> response_filter <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> response_filter(rv):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        self.cache.set(</span><br><span class=\"line\">                            cache_key,</span><br><span class=\"line\">                            rv,</span><br><span class=\"line\">                            timeout=decorated_function.cache_timeout,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> self.app.debug:</span><br><span class=\"line\">                            <span class=\"keyword\">raise</span></span><br><span class=\"line\">                        logger.exception(</span><br><span class=\"line\">                            <span class=\"string\">\"Exception possibly due to cache backend.\"</span></span><br><span class=\"line\">                        )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_cache_key</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key_query_string</span><span class=\"params\">()</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        decorated_function.uncached = f</span><br><span class=\"line\">        decorated_function.cache_timeout = timeout</span><br><span class=\"line\">        decorated_function.make_cache_key = make_cache_key</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：<ul>\n<li>timeout用于指定缓存失效的时间，设置0或-1则不失效</li>\n<li>unless是一个函数，用于判断是否需要跳过缓存，可自定义实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下进入逻辑”elif “%s” in key_prefix:”, 因此cached缓存只与requesturl相关，与视图函数的传参无关，<code>这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key</code>，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。</li>\n</ul>\n<h3 id=\"memoize\"><a href=\"#memoize\" class=\"headerlink\" title=\"memoize\"></a><strong>memoize</strong></h3><ul>\n<li>memoize相较于cached的区别<ul>\n<li>cache_key实现不同，memoize对key进行了加密</li>\n<li>针对普通函数缓存结果使用</li>\n<li>支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结-如何写一个缓存框架\"><a href=\"#总结-如何写一个缓存框架\" class=\"headerlink\" title=\"总结-如何写一个缓存框架\"></a>总结-如何写一个缓存框架</h2><p>从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：<code>判断是否跳过缓存，生成查询key，获取缓存数据</code>。<br>我们如果要实现缓存框架，大体需要考虑一下几方面：</p>\n<ul>\n<li>支持使用不同的存储实例，<strong>抽象缓存对象接口</strong>，如<code>get，has，set</code></li>\n<li>支持区分参数缓存</li>\n<li>支持缓存时效性</li>\n<li>支持缓存数据加密</li>\n<li>如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理</li>\n</ul>\n<h2 id=\"使用缓存的注意事项（待补充）\"><a href=\"#使用缓存的注意事项（待补充）\" class=\"headerlink\" title=\"使用缓存的注意事项（待补充）\"></a>使用缓存的注意事项（待补充）</h2><ul>\n<li>缓存穿透</li>\n<li>缓存雪崩</li>\n<li>缓存集群</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>flask-caching源码浅析。</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>flash-caching是一款flask开发技术栈中使用频率非常高的一款插件，起初的名称为“flask-cache”，由于原作者不再维护，后由其他人在其基础上开发维护了flask-caching。</li>\n<li>flask-caching支持后端存储类型（本文主要围绕使用redis的源码展开）：<ul>\n<li>simple 程序内部缓存</li>\n<li>filesystem 系统文件缓存</li>\n<li>redis</li>\n<li>redissentinel</li>\n<li>uwsgi</li>\n<li>memcached</li>\n<li>gaememcached</li>\n<li>saslmemcached</li>\n<li>spreadsaslmemcached</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_caching <span class=\"keyword\">import</span> Cache</span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\"></span><br><span class=\"line\">config = &#123;<span class=\"string\">\"CACHE_TYPE\"</span>: <span class=\"string\">\"redis\"</span>, <span class=\"string\">\"CACHE_REDIS_URL\"</span>: app.config[<span class=\"string\">\"CACHE_REDIS_URL\"</span>]&#125;</span><br><span class=\"line\">    cache.init_app(app, config=config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"meta\">@cache.cached(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\">    got_data = request.get_json()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;got_data&#125;</span>.<span class=\"subst\">&#123;id&#125;</span>.<span class=\"subst\">&#123;time.time()&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cache.memoize(timeout=60 * 5)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f_cache</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/cache_test2/&lt;int:id&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_test2</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f\"<span class=\"subst\">&#123;f_cache(id)&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"cache-memoize源码解析\"><a href=\"#cache-memoize源码解析\" class=\"headerlink\" title=\"cache memoize源码解析\"></a>cache memoize源码解析</h2><h3 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a><strong>cached</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cached</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    timeout=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key_prefix=<span class=\"string\">\"view/%s\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    unless=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    forced_update=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    response_filter=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    query_string=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    hash_method=hashlib.md5,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"...\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(f)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorated_function</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">                rv = f(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> response_filter <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> response_filter(rv):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        self.cache.set(</span><br><span class=\"line\">                            cache_key,</span><br><span class=\"line\">                            rv,</span><br><span class=\"line\">                            timeout=decorated_function.cache_timeout,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> self.app.debug:</span><br><span class=\"line\">                            <span class=\"keyword\">raise</span></span><br><span class=\"line\">                        logger.exception(</span><br><span class=\"line\">                            <span class=\"string\">\"Exception possibly due to cache backend.\"</span></span><br><span class=\"line\">                        )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_cache_key</span><span class=\"params\">(*args, **kwargs)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key_query_string</span><span class=\"params\">()</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">        decorated_function.uncached = f</span><br><span class=\"line\">        decorated_function.cache_timeout = timeout</span><br><span class=\"line\">        decorated_function.make_cache_key = make_cache_key</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cached是针对flask视图函数的缓存，使用过程中，我们主要关注以下几个参数：<ul>\n<li>timeout用于指定缓存失效的时间，设置0或-1则不失效</li>\n<li>unless是一个函数，用于判断是否需要跳过缓存，可自定义实现</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下进入逻辑”elif “%s” in key_prefix:”, 因此cached缓存只与requesturl相关，与视图函数的传参无关，<code>这里不太了解作者的实现意图，为什么不结合请求参数，且不太方便扩展或重写_make_cache_key</code>，若需要结合请求参数进行缓存，则就要对整个cached方便重写，存在大量冗余代码。具体的实现大概为通过flask.request.get_json()获取request_body，并结合业务对影响缓存的参数设置缓存。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_make_cache_key</span><span class=\"params\">(args, kwargs, use_request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> callable(key_prefix):</span><br><span class=\"line\">        cache_key = key_prefix()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">\"%s\"</span> <span class=\"keyword\">in</span> key_prefix:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> use_request:</span><br><span class=\"line\">            cache_key = key_prefix % request.path</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cache_key = key_prefix % url_for(f.__name__, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cache_key = key_prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache_key</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另外值得学习的是装饰器最后一层的写法，结合了面向对象的思想，设置关键的属性到函数对象，结合后续删除等操作，非常优雅非常pythonic。</li>\n</ul>\n<h3 id=\"memoize\"><a href=\"#memoize\" class=\"headerlink\" title=\"memoize\"></a><strong>memoize</strong></h3><ul>\n<li>memoize相较于cached的区别<ul>\n<li>cache_key实现不同，memoize对key进行了加密</li>\n<li>针对普通函数缓存结果使用</li>\n<li>支持区分函数参数的缓存，索引cached基于参数的缓存改造，可以参考memoize的实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结-如何写一个缓存框架\"><a href=\"#总结-如何写一个缓存框架\" class=\"headerlink\" title=\"总结-如何写一个缓存框架\"></a>总结-如何写一个缓存框架</h2><p>从flask-caching的实现看出，实现缓存，逻辑还是很清晰的：<code>判断是否跳过缓存，生成查询key，获取缓存数据</code>。<br>我们如果要实现缓存框架，大体需要考虑一下几方面：</p>\n<ul>\n<li>支持使用不同的存储实例，<strong>抽象缓存对象接口</strong>，如<code>get，has，set</code></li>\n<li>支持区分参数缓存</li>\n<li>支持缓存时效性</li>\n<li>支持缓存数据加密</li>\n<li>如果要结合业务，则最好再额外添加业务层，统一对缓存调用进行管理</li>\n</ul>\n<h2 id=\"使用缓存的注意事项（待补充）\"><a href=\"#使用缓存的注意事项（待补充）\" class=\"headerlink\" title=\"使用缓存的注意事项（待补充）\"></a>使用缓存的注意事项（待补充）</h2><ul>\n<li>缓存穿透</li>\n<li>缓存雪崩</li>\n<li>缓存集群</li>\n</ul>"},{"title":"hexo容器化部署","date":"2019-12-22T14:09:24.000Z","_content":"\n{%note info%}\nhexo容器化部署，从此再无系统环境迁移的烦恼。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 本文介绍从hexo windows环境改造为docker容器化运行环境。\n\n## 改造过程\nhexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。\n- 本着一切从简原则，直接搜了[dockerhub](https://hub.docker.com/search?q=hexo&type=image)，选了个最多下载的[ipple1986/hexo\n](https://hub.docker.com/r/ipple1986/hexo/dockerfile)，发现直接拉取镜像是可以用的：\n\n```bash\ndocker pull ipple1986/hexo\n```\n- 但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性\n- 于是拿着对方的dockerfile尝试重新构建镜像\n\n```\nFROM centos:7\nENV LANG C.UTF-8\nLABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn\nWORKDIR /opt/hexo\nRUN yum install -y  epel-release && \\\nyum install -y nodejs && npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo-cli -g  && hexo init ipple1986 && cd ipple1986 && npm install\nWORKDIR ipple1986\nEXPOSE 4000\nENTRYPOINT [\"hexo\",\"server\"]\n\n```\n- 结果hexo使用直接报错\n\n![nodejs版本过低异常.png](https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png)\n- google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可\n\n```\ncurl --location https://rpm.nodesource.com/setup_10.x | bash\n```\n- 于是，最终的dockerfile为：\n\n```\nFROM centos:7\nENV LC_ALL en_US.UTF-8\nENV TZ=Asia/Shanghai\n\nLABEL maintainer=\"liwei <839728919@qq.com>\"\n\nWORKDIR /opt/hexo\nRUN curl --location https://rpm.nodesource.com/setup_10.x | bash && \\\nyum install -y epel-release nodejs git && \\\nnpm config set registry https://registry.npm.taobao.org && \\\nnpm install hexo-cli -g\n\nEXPOSE 4000\nCMD [\"hexo\", \"server\"]\n```\n\n- 使用指令如下：\n\n```bash\n# 编译镜像\ndocker build -t blog .\n\n# 运行容器\ndocker run -it -v your-code-path:/opt/hexo --name blog blog:latest\n\n# 进入容器\ndocker exec -it blog bash\n\n# hexo部署\nhexo d # 注意需要配置git，亦可手动输入账号密码\n```","source":"_posts/2019-12-22-hexo容器化部署.md","raw":"---\ntitle: hexo容器化部署\ndate: 2019-12-22 22:09:24\ntags:\n- hexo\ncategories:\n---\n\n{%note info%}\nhexo容器化部署，从此再无系统环境迁移的烦恼。\n{%endnote%}\n<!--more-->\n\n## 简介\n- 本文介绍从hexo windows环境改造为docker容器化运行环境。\n\n## 改造过程\nhexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。\n- 本着一切从简原则，直接搜了[dockerhub](https://hub.docker.com/search?q=hexo&type=image)，选了个最多下载的[ipple1986/hexo\n](https://hub.docker.com/r/ipple1986/hexo/dockerfile)，发现直接拉取镜像是可以用的：\n\n```bash\ndocker pull ipple1986/hexo\n```\n- 但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性\n- 于是拿着对方的dockerfile尝试重新构建镜像\n\n```\nFROM centos:7\nENV LANG C.UTF-8\nLABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn\nWORKDIR /opt/hexo\nRUN yum install -y  epel-release && \\\nyum install -y nodejs && npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo-cli -g  && hexo init ipple1986 && cd ipple1986 && npm install\nWORKDIR ipple1986\nEXPOSE 4000\nENTRYPOINT [\"hexo\",\"server\"]\n\n```\n- 结果hexo使用直接报错\n\n![nodejs版本过低异常.png](https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png)\n- google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可\n\n```\ncurl --location https://rpm.nodesource.com/setup_10.x | bash\n```\n- 于是，最终的dockerfile为：\n\n```\nFROM centos:7\nENV LC_ALL en_US.UTF-8\nENV TZ=Asia/Shanghai\n\nLABEL maintainer=\"liwei <839728919@qq.com>\"\n\nWORKDIR /opt/hexo\nRUN curl --location https://rpm.nodesource.com/setup_10.x | bash && \\\nyum install -y epel-release nodejs git && \\\nnpm config set registry https://registry.npm.taobao.org && \\\nnpm install hexo-cli -g\n\nEXPOSE 4000\nCMD [\"hexo\", \"server\"]\n```\n\n- 使用指令如下：\n\n```bash\n# 编译镜像\ndocker build -t blog .\n\n# 运行容器\ndocker run -it -v your-code-path:/opt/hexo --name blog blog:latest\n\n# 进入容器\ndocker exec -it blog bash\n\n# hexo部署\nhexo d # 注意需要配置git，亦可手动输入账号密码\n```","slug":"hexo容器化部署","published":1,"updated":"2019-12-25T14:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885nn00124js8ybt1y474","content":"<div class=\"note info\"><p>hexo容器化部署，从此再无系统环境迁移的烦恼。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>本文介绍从hexo windows环境改造为docker容器化运行环境。</li>\n</ul>\n<h2 id=\"改造过程\"><a href=\"#改造过程\" class=\"headerlink\" title=\"改造过程\"></a>改造过程</h2><p>hexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。</p>\n<ul>\n<li>本着一切从简原则，直接搜了<a href=\"https://hub.docker.com/search?q=hexo&amp;type=image\" target=\"_blank\" rel=\"noopener\">dockerhub</a>，选了个最多下载的<a href=\"https://hub.docker.com/r/ipple1986/hexo/dockerfile\" target=\"_blank\" rel=\"noopener\">ipple1986/hexo\n</a>，发现直接拉取镜像是可以用的：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ipple1986/hexo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性</li>\n<li>于是拿着对方的dockerfile尝试重新构建镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">LABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn</span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN yum install -y  epel-release &amp;&amp; \\</span><br><span class=\"line\">yum install -y nodejs &amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-cli -g  &amp;&amp; hexo init ipple1986 &amp;&amp; cd ipple1986 &amp;&amp; npm install</span><br><span class=\"line\">WORKDIR ipple1986</span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">ENTRYPOINT [&quot;hexo&quot;,&quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果hexo使用直接报错</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png\" alt=\"nodejs版本过低异常.png\"></p>\n<ul>\n<li>google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location https://rpm.nodesource.com/setup_10.x | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>于是，最终的dockerfile为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LC_ALL en_US.UTF-8</span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;liwei &lt;839728919@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN curl --location https://rpm.nodesource.com/setup_10.x | bash &amp;&amp; \\</span><br><span class=\"line\">yum install -y epel-release nodejs git &amp;&amp; \\</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org &amp;&amp; \\</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">CMD [&quot;hexo&quot;, &quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用指令如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译镜像</span></span><br><span class=\"line\">docker build -t blog .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">docker run -it -v your-code-path:/opt/hexo --name blog blog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it blog bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo部署</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 注意需要配置git，亦可手动输入账号密码</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>hexo容器化部署，从此再无系统环境迁移的烦恼。</p></div>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>本文介绍从hexo windows环境改造为docker容器化运行环境。</li>\n</ul>\n<h2 id=\"改造过程\"><a href=\"#改造过程\" class=\"headerlink\" title=\"改造过程\"></a>改造过程</h2><p>hexo宿主机环境部署和docker的使用就不再赘述了，google大法既可。</p>\n<ul>\n<li>本着一切从简原则，直接搜了<a href=\"https://hub.docker.com/search?q=hexo&amp;type=image\" target=\"_blank\" rel=\"noopener\">dockerhub</a>，选了个最多下载的<a href=\"https://hub.docker.com/r/ipple1986/hexo/dockerfile\" target=\"_blank\" rel=\"noopener\">ipple1986/hexo\n</a>，发现直接拉取镜像是可以用的：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ipple1986/hexo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但我往往更倾向于对dockerfile重新定制，毕竟直接FROM第三方库多少会有点不透明性</li>\n<li>于是拿着对方的dockerfile尝试重新构建镜像</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">LABEL author=ipple1986 email=ipple1986@gmail.com site=https://zhaozhiwen.net.cn</span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN yum install -y  epel-release &amp;&amp; \\</span><br><span class=\"line\">yum install -y nodejs &amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-cli -g  &amp;&amp; hexo init ipple1986 &amp;&amp; cd ipple1986 &amp;&amp; npm install</span><br><span class=\"line\">WORKDIR ipple1986</span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">ENTRYPOINT [&quot;hexo&quot;,&quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果hexo使用直接报错</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/12/22/4N2AI7PvGl9Ep1C.png\" alt=\"nodejs版本过低异常.png\"></p>\n<ul>\n<li>google分析不难看出是nodejs版本过低，通过yum指定安装node版本即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location https://rpm.nodesource.com/setup_10.x | bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>于是，最终的dockerfile为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENV LC_ALL en_US.UTF-8</span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;liwei &lt;839728919@qq.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /opt/hexo</span><br><span class=\"line\">RUN curl --location https://rpm.nodesource.com/setup_10.x | bash &amp;&amp; \\</span><br><span class=\"line\">yum install -y epel-release nodejs git &amp;&amp; \\</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org &amp;&amp; \\</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4000</span><br><span class=\"line\">CMD [&quot;hexo&quot;, &quot;server&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用指令如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译镜像</span></span><br><span class=\"line\">docker build -t blog .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">docker run -it -v your-code-path:/opt/hexo --name blog blog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it blog bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo部署</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 注意需要配置git，亦可手动输入账号密码</span></span><br></pre></td></tr></table></figure>"},{"title":"兼职运维之ulimit","date":"2019-12-27T13:09:45.000Z","_content":"\n\n{%note info%}\n今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。\n{%endnote%}\n<!--more-->\n\n## 现象&定位\n- 部署完成后，收到测试人员反馈业务运行异常\n- 排查后，定位为livy向spark提交任务时执行失败\nlivy日志如下：\n![spark异常.jpg](https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg)\n\n- 初看有点懵，将关键字`spark`和`OpenBLAS blas_thread_init`提交google，结果大多匹配python运行时相关异常，\n![spark异常google.jpg](https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg)\n\n- 仔细看不难发现`RLIMIT_NPROC 4096 current, 514476 max`\n- 由此自然联想到`ulimit -u`，一查发现果然只有4096\n\n## 解决方案\n- 解决方案也简单，设置系统最大允许进程数\n\n**永久生效：**\n\n```\n/etc/security/limits.d/90-nproc.conf\n或\n/etc/security/limits.conf\n在末行加入\n* hard nproc 1000000\n* soft nproc 1000000\n\n```\n**当前session生效：**\n\n```\nulimit -u 1000000\n```\n- 重新测试，问题果然修复\n\n\n## 总结\n- 问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质\n- 该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧\n","source":"_posts/2019-12-27-兼职运维之ulimit-u.md","raw":"---\ntitle: 兼职运维之ulimit\ndate: 2019-12-27 21:09:45\ntags:\n- 兼职运维\ncategories:\n- linux\n---\n\n\n{%note info%}\n今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。\n{%endnote%}\n<!--more-->\n\n## 现象&定位\n- 部署完成后，收到测试人员反馈业务运行异常\n- 排查后，定位为livy向spark提交任务时执行失败\nlivy日志如下：\n![spark异常.jpg](https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg)\n\n- 初看有点懵，将关键字`spark`和`OpenBLAS blas_thread_init`提交google，结果大多匹配python运行时相关异常，\n![spark异常google.jpg](https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg)\n\n- 仔细看不难发现`RLIMIT_NPROC 4096 current, 514476 max`\n- 由此自然联想到`ulimit -u`，一查发现果然只有4096\n\n## 解决方案\n- 解决方案也简单，设置系统最大允许进程数\n\n**永久生效：**\n\n```\n/etc/security/limits.d/90-nproc.conf\n或\n/etc/security/limits.conf\n在末行加入\n* hard nproc 1000000\n* soft nproc 1000000\n\n```\n**当前session生效：**\n\n```\nulimit -u 1000000\n```\n- 重新测试，问题果然修复\n\n\n## 总结\n- 问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质\n- 该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧\n","slug":"兼职运维之ulimit-u","published":1,"updated":"2019-12-27T13:45:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4o885np00134js865amu24j","content":"<div class=\"note info\"><p>今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。</p></div>\n<a id=\"more\"></a>\n<h2 id=\"现象-amp-定位\"><a href=\"#现象-amp-定位\" class=\"headerlink\" title=\"现象&amp;定位\"></a>现象&amp;定位</h2><ul>\n<li>部署完成后，收到测试人员反馈业务运行异常</li>\n<li><p>排查后，定位为livy向spark提交任务时执行失败<br>livy日志如下：<br><img src=\"https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg\" alt=\"spark异常.jpg\"></p>\n</li>\n<li><p>初看有点懵，将关键字<code>spark</code>和<code>OpenBLAS blas_thread_init</code>提交google，结果大多匹配python运行时相关异常，<br><img src=\"https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg\" alt=\"spark异常google.jpg\"></p>\n</li>\n<li><p>仔细看不难发现<code>RLIMIT_NPROC 4096 current, 514476 max</code></p>\n</li>\n<li>由此自然联想到<code>ulimit -u</code>，一查发现果然只有4096</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>解决方案也简单，设置系统最大允许进程数</li>\n</ul>\n<p><strong>永久生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">或</span><br><span class=\"line\">/etc/security/limits.conf</span><br><span class=\"line\">在末行加入</span><br><span class=\"line\">* hard nproc 1000000</span><br><span class=\"line\">* soft nproc 1000000</span><br></pre></td></tr></table></figure>\n<p><strong>当前session生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -u 1000000</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新测试，问题果然修复</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质</li>\n<li>该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>今天部署生产环境遇到了坑，本文聊聊这个坑的上下文。</p></div>","more":"<h2 id=\"现象-amp-定位\"><a href=\"#现象-amp-定位\" class=\"headerlink\" title=\"现象&amp;定位\"></a>现象&amp;定位</h2><ul>\n<li>部署完成后，收到测试人员反馈业务运行异常</li>\n<li><p>排查后，定位为livy向spark提交任务时执行失败<br>livy日志如下：<br><img src=\"https://i.loli.net/2019/12/27/tVroEwZsClS9b54.jpg\" alt=\"spark异常.jpg\"></p>\n</li>\n<li><p>初看有点懵，将关键字<code>spark</code>和<code>OpenBLAS blas_thread_init</code>提交google，结果大多匹配python运行时相关异常，<br><img src=\"https://i.loli.net/2019/12/27/4rdolfctzh18ZCE.jpg\" alt=\"spark异常google.jpg\"></p>\n</li>\n<li><p>仔细看不难发现<code>RLIMIT_NPROC 4096 current, 514476 max</code></p>\n</li>\n<li>由此自然联想到<code>ulimit -u</code>，一查发现果然只有4096</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>解决方案也简单，设置系统最大允许进程数</li>\n</ul>\n<p><strong>永久生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">或</span><br><span class=\"line\">/etc/security/limits.conf</span><br><span class=\"line\">在末行加入</span><br><span class=\"line\">* hard nproc 1000000</span><br><span class=\"line\">* soft nproc 1000000</span><br></pre></td></tr></table></figure>\n<p><strong>当前session生效：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -u 1000000</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新测试，问题果然修复</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>问题事后看并不复杂，但前前后后还是花了不少时间，其实之前ulimit也不是没学习过，但真正出现异常时，往往没有看透问题的本质</li>\n<li>该生产环境主机时刚部署的，毕竟兼职运维，像ulimit此类系统资源的设置没有统一的整体设置过，吃一堑长一智，兼职运维的路上且走且学吧</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4o885hm00004js8excz1wmn","category_id":"ck4o885i600014js836r1a8ww","_id":"ck4o885ie00044js8jwtlk3qm"},{"post_id":"ck4o885m100074js8rylm3ggb","category_id":"ck4o885mk000b4js8eiq9gzu8","_id":"ck4o885na000m4js82lbparz1"},{"post_id":"ck4o885mg00094js8gbx0kjcw","category_id":"ck4o885mt000h4js8xrcsrfvf","_id":"ck4o885ne000s4js89ygfqswx"},{"post_id":"ck4o885mp000f4js864dsb7d4","category_id":"ck4o885na000n4js82962ltx7","_id":"ck4o885nm00104js8n4h2oss2"},{"post_id":"ck4o885nh000v4js8qiicfhe9","category_id":"ck4o885mt000h4js8xrcsrfvf","_id":"ck4o885nq00144js8uf9zx8h3"},{"post_id":"ck4o885mr000g4js8ihggusgz","category_id":"ck4o885na000n4js82962ltx7","_id":"ck4o885nr00174js8bnib5l5w"},{"post_id":"ck4o885n9000l4js8fncx3eci","category_id":"ck4o885nm000z4js8378hlk8l","_id":"ck4o885ns00184js8vstuz4qx"},{"post_id":"ck4o885nb000q4js8mflt06g2","category_id":"ck4o885nr00154js8bpybv88k","_id":"ck4o885nu001d4js8lt934do8"},{"post_id":"ck4o885np00134js865amu24j","category_id":"ck4o885ns00194js8nk6521xi","_id":"ck4o885nv001g4js8xquse5f2"}],"PostTag":[{"post_id":"ck4o885hm00004js8excz1wmn","tag_id":"ck4o885ia00024js8b5x09y25","_id":"ck4o885ih00054js8hswjg4r3"},{"post_id":"ck4o885hm00004js8excz1wmn","tag_id":"ck4o885ic00034js8r99p7vgk","_id":"ck4o885ih00064js849j65uxa"},{"post_id":"ck4o885m100074js8rylm3ggb","tag_id":"ck4o885mk000c4js8ghwhaz5k","_id":"ck4o885mv000j4js8pnud7r9r"},{"post_id":"ck4o885mv000k4js86sevbh51","tag_id":"ck4o885mk000c4js8ghwhaz5k","_id":"ck4o885nb000p4js8sog2loek"},{"post_id":"ck4o885mg00094js8gbx0kjcw","tag_id":"ck4o885mt000i4js8lxjonsck","_id":"ck4o885nj000w4js8y19hwhlk"},{"post_id":"ck4o885mg00094js8gbx0kjcw","tag_id":"ck4o885nb000o4js810n6ex3w","_id":"ck4o885nm000y4js8xgs0ly14"},{"post_id":"ck4o885mp000f4js864dsb7d4","tag_id":"ck4o885mt000i4js8lxjonsck","_id":"ck4o885nt001b4js8xhg8y17n"},{"post_id":"ck4o885mp000f4js864dsb7d4","tag_id":"ck4o885nn00114js80qjy1cv5","_id":"ck4o885nu001c4js823qoqjkn"},{"post_id":"ck4o885mp000f4js864dsb7d4","tag_id":"ck4o885nr00164js85deiesfw","_id":"ck4o885nu001f4js8gyb9hpm1"},{"post_id":"ck4o885mr000g4js8ihggusgz","tag_id":"ck4o885nt001a4js896p01kl8","_id":"ck4o885nw001i4js82tctboql"},{"post_id":"ck4o885mr000g4js8ihggusgz","tag_id":"ck4o885nn00114js80qjy1cv5","_id":"ck4o885nw001j4js8e1tlbowe"},{"post_id":"ck4o885n9000l4js8fncx3eci","tag_id":"ck4o885mk000c4js8ghwhaz5k","_id":"ck4o885nw001l4js8deflw5g8"},{"post_id":"ck4o885n9000l4js8fncx3eci","tag_id":"ck4o885nv001h4js8iaagj2ns","_id":"ck4o885nw001m4js8lzb16pxg"},{"post_id":"ck4o885nb000q4js8mflt06g2","tag_id":"ck4o885nw001k4js8uzq897xp","_id":"ck4o885nx001p4js8mwkmyuqe"},{"post_id":"ck4o885nb000q4js8mflt06g2","tag_id":"ck4o885nx001n4js8tn3ctobr","_id":"ck4o885nx001q4js8vwgydkgy"},{"post_id":"ck4o885nd000r4js8rxz9l7hh","tag_id":"ck4o885nx001o4js83pm3kk3f","_id":"ck4o885ny001s4js83tqszi9m"},{"post_id":"ck4o885nh000v4js8qiicfhe9","tag_id":"ck4o885mt000i4js8lxjonsck","_id":"ck4o885nz001v4js8hvfcc6zs"},{"post_id":"ck4o885nh000v4js8qiicfhe9","tag_id":"ck4o885nx001r4js8chjnnort","_id":"ck4o885nz001w4js8ehm57452"},{"post_id":"ck4o885nh000v4js8qiicfhe9","tag_id":"ck4o885ny001t4js8k48dyeod","_id":"ck4o885nz001y4js85qm5n844"},{"post_id":"ck4o885nk000x4js8w97rjmts","tag_id":"ck4o885mt000i4js8lxjonsck","_id":"ck4o885nz001z4js847fa2p0e"},{"post_id":"ck4o885nk000x4js8w97rjmts","tag_id":"ck4o885mk000c4js8ghwhaz5k","_id":"ck4o885o000214js8aae8seh4"},{"post_id":"ck4o885nk000x4js8w97rjmts","tag_id":"ck4o885ny001u4js8wz9e9u6d","_id":"ck4o885o000224js8qw5oo33x"},{"post_id":"ck4o885nn00124js8ybt1y474","tag_id":"ck4o885nz001x4js83709o8n7","_id":"ck4o885o000234js8w700ezzi"},{"post_id":"ck4o885np00134js865amu24j","tag_id":"ck4o885o000204js8vq1tbgvt","_id":"ck4o885o000244js8folys1ww"}],"Tag":[{"name":"docker","_id":"ck4o885ia00024js8b5x09y25"},{"name":"wins10","_id":"ck4o885ic00034js8r99p7vgk"},{"name":"python","_id":"ck4o885mk000c4js8ghwhaz5k"},{"name":"flask","_id":"ck4o885mt000i4js8lxjonsck"},{"name":"sse","_id":"ck4o885nb000o4js810n6ex3w"},{"name":"问题分析","_id":"ck4o885nn00114js80qjy1cv5"},{"name":"linux","_id":"ck4o885nr00164js85deiesfw"},{"name":"mysql","_id":"ck4o885nt001a4js896p01kl8"},{"name":"coding-tools","_id":"ck4o885nv001h4js8iaagj2ns"},{"name":"algorithm","_id":"ck4o885nw001k4js8uzq897xp"},{"name":"datastructure","_id":"ck4o885nx001n4js8tn3ctobr"},{"name":"部署","_id":"ck4o885nx001o4js83pm3kk3f"},{"name":"session","_id":"ck4o885nx001r4js8chjnnort"},{"name":"分布式","_id":"ck4o885ny001t4js8k48dyeod"},{"name":"源码浅析","_id":"ck4o885ny001u4js8wz9e9u6d"},{"name":"hexo","_id":"ck4o885nz001x4js83709o8n7"},{"name":"兼职运维","_id":"ck4o885o000204js8vq1tbgvt"}]}}