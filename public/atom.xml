<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zipee&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ziperlee.github.io/zipee.github.io/"/>
  <updated>2018-12-30T09:58:22.173Z</updated>
  <id>https://ziperlee.github.io/zipee.github.io/</id>
  
  <author>
    <name>Zipee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python代码pyc化加密部署</title>
    <link href="https://ziperlee.github.io/zipee.github.io/2018/12/30/python%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86%E9%83%A8%E7%BD%B2/"/>
    <id>https://ziperlee.github.io/zipee.github.io/2018/12/30/python代码加密部署/</id>
    <published>2018-12-30T08:45:56.000Z</published>
    <updated>2018-12-30T09:58:22.173Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。</p></div><a id="more"></a><h3 id="为什么转换为pyc？"><a href="#为什么转换为pyc？" class="headerlink" title="为什么转换为pyc？"></a>为什么转换为pyc？</h3><ul><li>pyc官方的解释还请自行google</li><li>简而言之，pyc文件为字节码文件，单个.py生成.pyc文件后运行效果相同</li><li>pyc文件运行效率高于py文件（少了解释器对源码的转换）</li><li>pyc虽然可以进行逆向转换，但不一定可靠（没试过），不过已经满足了简单加密的需求，毕竟源码裸奔交付是心理上不能接收的</li></ul><h3 id="如何转换为pyc？"><a href="#如何转换为pyc？" class="headerlink" title="如何转换为pyc？"></a>如何转换为pyc？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m compileall (file or dir) -b</span><br></pre></td></tr></table></figure><ul><li>-b 支持生成pyc文件于当前目录而非<code>__pycache__</code></li></ul><h3 id="配合jenkins进行自动集成发布"><a href="#配合jenkins进行自动集成发布" class="headerlink" title="配合jenkins进行自动集成发布"></a>配合jenkins进行自动集成发布</h3><ul><li>基于flask开发目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/app</span><br><span class="line">/conf</span><br><span class="line">/tests</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> /bin/sh</span><br><span class="line"></span><br><span class="line">function timeoutController()&#123;</span><br><span class="line">    cmd=$1</span><br><span class="line">    timeout=$2</span><br><span class="line">    mod=$3</span><br><span class="line">    count=1</span><br><span class="line">    while [ $count -le 3 ]; do</span><br><span class="line">        timeout $timeout $cmd</span><br><span class="line">        exitCode=$?</span><br><span class="line">        if [[ $exitCode == 0 ]] || [[ $exitCode -ne 124 ]]; then</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        if [ $exitCode == 124 ]; then</span><br><span class="line">            echo "module: &#123;$mod&#125; timeout &#123;$timeout&#125; s and start to &#123;$count&#125; time retry"</span><br><span class="line">        fi</span><br><span class="line">        count=`expr $count + 1`</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [ $exitCode -ne 0 ]; then</span><br><span class="line">        echo $mod "=====================&gt;unittest failed"</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function code_encrypt()&#123;</span><br><span class="line">    release_dir=$1</span><br><span class="line">    pyc_dir=$2</span><br><span class="line"></span><br><span class="line">    # release svn del .svn</span><br><span class="line">    find $release_dir -name ".svn" | xargs rm -rf</span><br><span class="line"></span><br><span class="line">    # svn del pyc</span><br><span class="line">    cd $pyc_dir</span><br><span class="line">    svn rm * --force</span><br><span class="line">    svn ci -m "pyc delete"</span><br><span class="line"></span><br><span class="line">    # cp release code to pyc &amp;&amp; encrypt code</span><br><span class="line">    cp $release_dir/* $pyc_dir -R</span><br><span class="line">    python -m compileall . -b</span><br><span class="line">    find . -name "*.py" | xargs rm</span><br><span class="line">    rm tests/report -rf</span><br><span class="line">    # replace gunicorn.pyc with gunicorn.py</span><br><span class="line">    rm $pyc_dir/conf/gunicorn.pyc</span><br><span class="line">    cp $release_dir/conf/gunicorn.py $pyc_dir/conf/</span><br><span class="line"></span><br><span class="line">    # pyc svn commit</span><br><span class="line">    svn add . --no-ignore --force</span><br><span class="line">    svn ci -m "pyc commit"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    echo "========================== init env ============="</span><br><span class="line">    source /root/anaconda3/bin/activate py3</span><br><span class="line">    release_dir="/home/pro/pro_release"</span><br><span class="line">    pyc_dir="/home/pro/pro_pyc"</span><br><span class="line">    release_svn_dir="http://*.*.*.*/"</span><br><span class="line"></span><br><span class="line">    # update tag:release code</span><br><span class="line">    rm $release_dir -rf</span><br><span class="line">    svn co $release_svn_dir</span><br><span class="line"></span><br><span class="line">    echo "========================== flake8 ==============="</span><br><span class="line">    cd $release_dir</span><br><span class="line">    timeoutController "flake8 --config=$&#123;release_dir&#125;/.config/flake8 $&#123;release_dir&#125;" 60 "flake8"</span><br><span class="line"></span><br><span class="line">    echo "========================== pytest ==============="</span><br><span class="line">    cd $release_dir/tests</span><br><span class="line">    timeoutController "pytest ."</span><br><span class="line"></span><br><span class="line">    echo "========================== code encrypt ============="</span><br><span class="line">    code_encrypt $release_dir $pyc_dir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure><div class="note warning"><ul><li>以上脚本基于svn代码管理，如使用git，则flake8，pytest测试可通过git hook，而单单保留代码加密</li><li>gunicorn 貌似不支持指定pyc为配置文件，但这不影响整体的加密效果，后续可以在研究研究，毕竟对于我这种重度洁癖患者，留这一个.py文件就像一个小疙瘩，总想给它挠掉</li></ul></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;python不像c，java等编译型语言（编译后发布机器码），解释型则必须把源码发布出去，但仍存在一些交付场景希望能够将python代码加密。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python" scheme="https://ziperlee.github.io/zipee.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://ziperlee.github.io/zipee.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>flask服务端推送</title>
    <link href="https://ziperlee.github.io/zipee.github.io/2018/11/25/flask%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A8%E9%80%81/"/>
    <id>https://ziperlee.github.io/zipee.github.io/2018/11/25/flask服务端推送/</id>
    <published>2018-11-25T07:09:26.000Z</published>
    <updated>2018-11-25T08:32:04.262Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文用以记录在<code>flask-sse</code>使用中踩到的坑及解决方案。</p></div><a id="more"></a><h3 id="当前主流的服务端推送方案"><a href="#当前主流的服务端推送方案" class="headerlink" title="当前主流的服务端推送方案"></a>当前主流的服务端推送方案</h3><ol><li>客户端短连接轮询</li><li>websocket</li><li>Server Send Event（SSE）</li></ol><p>相较于轮询的方式，websocket和sse会稍显高级而不是无脑的轮询浪费网络资源。<br>在最近一次的方案选型中，我选择了sse，理由是websocket是双工，且需要单独的服务，而项目的需求仅是向客户端进行简单的推送信息，对比之下sse更显轻量且开发量更少。</p><hr><h3 id="使用过程中遇到的困难"><a href="#使用过程中遇到的困难" class="headerlink" title="使用过程中遇到的困难"></a>使用过程中遇到的困难</h3><ul><li><p><strong><code>flask-sse</code> redis连接释放问题</strong><br>该库目前存在缺陷，当浏览器刷新或者网关断开重连时会重新<code>new EventSource</code>，然而服务端并无法得知连接的断开，导致redis连接数会一直增加。<br>唯一释放的机会在于当再次收到推送信息，协程被唤醒并产生<code>GeneratorExit</code>异常<br>因此代码中未对异常捕获，将错过最后一次释放reids连接的机会：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@stream_with_context</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> self.messages(channel=channel):</span><br><span class="line">        <span class="keyword">yield</span> str(message)</span><br><span class="line">        self.redis.connection_pool.disconnect()</span><br></pre></td></tr></table></figure><p>  修改的代码已上传github，并提交merge，但是由于没有通过python2的测试用例导致未被合并（懒得适配），有兴趣的童鞋可以直接查看我fork提交的代码。</p><p>  <code>redis连接数查看</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a pwd -h *.*.*.* info | grep client</span><br></pre></td></tr></table></figure></li><li><p><strong>程序阻塞问题</strong><br>由于最开始使用之前未仔细看官方的实用说明和源码，发现uwsgi实用进程线程的启动模式，程序运行几次之后就阻塞了，最后发现正确的打开方式是使用协程的方式驱动http服务。</p><p>  另外还有一点现象，当使用flask自带的http服务器进行多线程<code>threaded=True</code>调试时redis连接能一次性释放掉，而当使用gunicorn+gevent方式运行时却没有一步到位的效果，原因是协程是异步的，一次<code>最多</code>能唤醒对应进程数量的协程，所以redis的释放问题最终还是需要通过定时推送心跳包的方式解决，推荐使用<code>celery</code>。</p></li><li><p><strong>网关超时问题</strong><br>网关基本都会有超时设置，而浏览器的断线重连貌似对于504的异常并不起作用。<br>  因此需要针对超时异常进行特殊处理。<br>  这里给出<a href="https://github.com/BotBotMe/botbot-web/issues/2" target="_blank" rel="noopener">nginx配置</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location /eventsource &#123;</span><br><span class="line">include uwsgi_params;</span><br><span class="line">uwsgi_pass eventsource-botbot-backend;</span><br><span class="line">uwsgi_buffering off;</span><br><span class="line">chunked_transfer_encoding off;</span><br><span class="line">proxy_cache off;</span><br><span class="line">access_log  /var/log/nginx/eventsource_botbot.access.log;</span><br><span class="line">error_page 504 =200 @eventsource-close-graceful;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location @eventsource-close-graceful &#123;</span><br><span class="line">add_header Content-Type text/event-stream;</span><br><span class="line">return 200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>注意</code>每个nginx网关就需要配置</p></li></ul><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/singingwolfboy/flask-sse" target="_blank" rel="noopener">官方用例</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文用以记录在&lt;code&gt;flask-sse&lt;/code&gt;使用中踩到的坑及解决方案。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="flask" scheme="https://ziperlee.github.io/zipee.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://ziperlee.github.io/zipee.github.io/tags/flask/"/>
    
      <category term="sse" scheme="https://ziperlee.github.io/zipee.github.io/tags/sse/"/>
    
  </entry>
  
  <entry>
    <title>win10docker使用填坑</title>
    <link href="https://ziperlee.github.io/zipee.github.io/2018/11/04/win10docker%E4%BD%BF%E7%94%A8%E5%A1%AB%E5%9D%91/"/>
    <id>https://ziperlee.github.io/zipee.github.io/2018/11/04/win10docker使用填坑/</id>
    <published>2018-11-04T05:17:09.000Z</published>
    <updated>2018-11-04T13:45:50.108Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文用以记录在<code>docker win10</code>环境使用中踩到的坑及解决方案。</p></div><a id="more"></a><h2 id="问题一：docker修改配置或者镜像的存储位置后启动异常"><a href="#问题一：docker修改配置或者镜像的存储位置后启动异常" class="headerlink" title="问题一：docker修改配置或者镜像的存储位置后启动异常"></a>问题一：docker修改配置或者镜像的存储位置后启动异常</h2><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a><em>解决方案</em>：</h3><div class="note warning"><ul><li>移动|剪切 C:\Users\Public\Documents\Hyper-V\Virtual hard disks\MobyLinuxVM.vhdx 再重启电脑</li></ul></div><hr><h2 id="问题二：修改镜像存储位置"><a href="#问题二：修改镜像存储位置" class="headerlink" title="问题二：修改镜像存储位置"></a>问题二：修改镜像存储位置</h2><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a><em>解决方案</em>：</h3><div class="note warning"><ul><li>默认位置：C:\Users\Public\Documents\Hyper-V\Virtual hard disks\MobyLinuxVM.vhdx</li><li>修改：Hyper-V管理器<strong>Hyper-v设置</strong>虚拟硬盘修改路径</li></ul></div><hr><h2 id="问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client"><a href="#问题三：docker安装mysql8-0容器后，是用navicat连接报client-does-not-support-authentication-protocol-requested-by-server-consider-upgrading-mysql-client" class="headerlink" title="问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client"></a>问题三：docker安装mysql8.0容器后，是用navicat连接报client does not support authentication protocol requested by server consider upgrading mysql client</h2><h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a><em>解决方案</em>：</h3><div class="note warning"><ul><li>进入容器<br>docker exec -it mysql bash</li><li>进入mysql<br>mysql -u root -p</li><li>创建root用户<br>CREATE USER ‘root‘@’%’ IDENTIFIED IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li><li>设置root用户访问权限<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ WITH GRANT OPTION;</li><li>重置密码<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH <code>mysql_native_password</code> BY ‘123456’;</li><li>提交修改<br>FLUSH PRIVILEGES;</li></ul></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文用以记录在&lt;code&gt;docker win10&lt;/code&gt;环境使用中踩到的坑及解决方案。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="docker" scheme="https://ziperlee.github.io/zipee.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://ziperlee.github.io/zipee.github.io/tags/docker/"/>
    
      <category term="wins10" scheme="https://ziperlee.github.io/zipee.github.io/tags/wins10/"/>
    
  </entry>
  
</feed>
